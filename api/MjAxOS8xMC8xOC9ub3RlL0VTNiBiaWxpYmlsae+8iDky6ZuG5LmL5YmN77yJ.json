{"title":"ES6 bilibili（92集之前）","date":"2019-10-18T05:43:24.000Z","date_formatted":{"ll":"2019年10月18日","L":"2019/10/18","MM-DD":"10-18"},"author":"zao","link":"2019/10/18/note/ES6 bilibili（92集之前）","tags":["es6"],"categories":["note"],"updated":"2019-10-18T05:43:24.000Z","content":"<h2 id=\"面向过程编程\">面向过程编程<a href=\"#面向过程编程\" title=\"面向过程编程\"></a></h2><ul><li>面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候再一个一个的依次调用就可以了。</li>\n<li>面向过程，就是按照我们分析好了的步骤，按照步骤解决问题。</li>\n</ul><h2 id=\"面向对象编程\">面向对象编程<a href=\"#面向对象编程\" title=\"面向对象编程\"></a></h2><ul><li>面向对象是把事物分解成一个个对象，然后由对象之间分工与合作。</li>\n<li>面向对象是以对象功能来划分问题，而不是步骤。</li>\n<li>在面向对象程序开发思想中，每一个对象都是功能中心，具有明确分工。</li>\n<li>面向对象编程具有灵活、代码可复用、容易维护和开发的优点，更适合多人合作的大型软件项目。</li>\n</ul><h3 id=\"面向对象的特性\">面向对象的特性<a href=\"#面向对象的特性\" title=\"面向对象的特性\"></a></h3><ul><li>封装性 </li>\n<li>继承性</li>\n<li>多态性</li>\n</ul><h3 id=\"面向过程与面向对象的优缺点\">面向过程与面向对象的优缺点<a href=\"#面向过程与面向对象的优缺点\" title=\"面向过程与面向对象的优缺点\"></a></h3><h4 id=\"面向过程\">面向过程<a href=\"#面向过程\" title=\"面向过程\"></a></h4><ul><li>优点：性能比面向对象高，适合跟硬件联系很紧密的东西，例如单片机就采用的面向过程编程。</li>\n<li>缺点：没有面向对象易维护、易复用、易扩展。</li>\n</ul><h4 id=\"面向对象\">面向对象<a href=\"#面向对象\" title=\"面向对象\"></a></h4><ul><li>优点：易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，使系统更加灵活、更加易于维护。</li>\n<li>缺点：性能比面向过程低。</li>\n</ul><h2 id=\"es6中的类和对象\">ES6中的类和对象<a href=\"#es6中的类和对象\" title=\"ES6中的类和对象\"></a></h2><h3 id=\"面向对象-1\">面向对象<a href=\"#面向对象-1\" title=\"面向对象\"></a></h3><pre><code>面向对象更贴近我们的实际生活,可以使用面向对象描述现实世界事物。\n但是事物分为具体的事物和抽象的事物</code></pre><h4 id=\"面向对象的思维特点\">面向对象的思维特点<a href=\"#面向对象的思维特点\" title=\"面向对象的思维特点\"></a></h4><ul><li><p>抽取（抽象）对象共用的属性和行为组织（封装）一个类（模板）。</p>\n</li>\n<li><p>对类进行实例化, 获取类的对象。</p>\n<p>  面向对象编程我们考虑的是有哪些对象，按照面向对象的思维特点，不断的创建对象，使用对象，指挥对象做事情。</p>\n</li>\n</ul><h3 id=\"对象\">对象<a href=\"#对象\" title=\"对象\"></a></h3><pre><code>现实生活中：万物皆对象，对象是一个具体的事物，看得见摸\n得着的实物。例如，一本书、一辆汽车、一个人可以是“对象”，\n一个数据库、一张网页、一个与远程服务器的连接也可以是\n“对象”。\n\n在 JavaScript中，对象是一组无序的相关属性和方法的集合，\n所有的事物都是对象，例如字符串、数值、数组、函数等。</code></pre><h4 id=\"对象是由属性和方法组成的：\">对象是由属性和方法组成的：<a href=\"#对象是由属性和方法组成的：\" title=\"对象是由属性和方法组成的：\"></a></h4><ul><li>属性：事物的特征，在对象中用属性来表示（常用名词）</li>\n<li>方法：事物的行为，在对象中用方法来表示（常用动词）</li>\n</ul><h3 id=\"类class\">类class<a href=\"#类class\" title=\"类class\"></a></h3><p>在 ES6 中新增加了类的概念，可以使用class关键字声明一个类，之后以这个类来实例化对象。<br><strong>注意</strong>： 类必须使用 new 实例化对象</p>\n<h3 id=\"类-constructor-构造函数\">类 constructor 构造函数<a href=\"#类-constructor-构造函数\" title=\"类 constructor 构造函数\"></a></h3><pre><code>constructor()方法是类的构造函数(默认方法)，用于传递参\n数，返回实例对象，通过new命令生成对象实例时，自动调用\n该方法。\n如果没有显示定义，类内部会自动给我们创建一个constructor() </code></pre><h4 id=\"创建类\">创建类<a href=\"#创建类\" title=\"创建类\"></a></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 1. 创建一个class，创建一个“明星”类--&gt;</span><br><span class=\"line\">class Star&#123;</span><br><span class=\"line\">    constructor(uname)&#123;</span><br><span class=\"line\">        this.uame &#x2F;&#x2F;指向创建的实例</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> 2.利用类创建对象 new</span><br><span class=\"line\"> new Star()  &#x2F;&#x2F;只要加了new，自动调用constructor</span><br></pre></td></tr></table></figure>\n<ol><li>通过class关键字创建类，类名习惯性定义首字母大写</li>\n<li>类里面有个constructor()函数，可以接受传过来的参数，同时返回实例对象。</li>\n<li>constructor函数只要new生成实例时，就会自动调用这个函数；如果我们不写这个函数，类也会自动生成这个函数。</li>\n<li>生成实例new不能省略。</li>\n<li>最后注意语法规范，创建类时，类名后面不要加小括号；生成实例，类名后面加小括号，构造函数不需要加function。 </li>\n</ol><h3 id=\"类添加方法\">类添加方法<a href=\"#类添加方法\" title=\"类添加方法\"></a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 1. 创建类 class  创建一个 明星类</span><br><span class=\"line\">    class Star &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 类的共有属性放到 constructor 里面</span><br><span class=\"line\">        constructor(uname, age) &#123;</span><br><span class=\"line\">            this.uname &#x3D; uname;</span><br><span class=\"line\">            this.age &#x3D; age;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sing(song) &#123;</span><br><span class=\"line\">            &#x2F;&#x2F; console.log(&#39;我唱歌&#39;);</span><br><span class=\"line\">            console.log(this.uname + song);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 2. 利用类创建对象 new</span><br><span class=\"line\">    var ldh &#x3D; new Star(&#39;刘德华&#39;, 18);</span><br><span class=\"line\">    var zxy &#x3D; new Star(&#39;张学友&#39;, 20);</span><br><span class=\"line\">    console.log(ldh);</span><br><span class=\"line\">    console.log(zxy);</span><br><span class=\"line\">    &#x2F;&#x2F; (1) 我们类里面所有的函数不需要写function </span><br><span class=\"line\">    &#x2F;&#x2F; (2) 多个函数方法之间不需要添加逗号分隔</span><br><span class=\"line\">    ldh.sing(&#39;冰雨&#39;);</span><br><span class=\"line\">    zxy.sing(&#39;李香兰&#39;);</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"类的继承\">类的继承<a href=\"#类的继承\" title=\"类的继承\"></a></h2><p>子类通过==extends==可以继承父类的一些属性和方法。  </p>\n<p><strong>注意</strong>    </p>\n<pre><code>继承中属性或者方法的查找原则：就近原则。        \n继承中，如果实例化子类输出一个方法，先看子类有没有这\n个方法，如果有就先执行子类的；如果子类中没，就去父类\n中查找，如果有，就执行父类中的这个方法（就近原则）。</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Father&#123;   &#x2F;&#x2F; 父类</span><br><span class=\"line\">    conostrctor()&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    money()&#123;</span><br><span class=\"line\">        console.log(100)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\">class  Son extends Father &#123;  &#x2F;&#x2F; 子类继承父类</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var son&#x3D;new Son();</span><br><span class=\"line\">son.money()</span><br></pre></td></tr></table></figure>\n<h3 id=\"super关键字\">super关键字<a href=\"#super关键字\" title=\"super关键字\"></a></h3><p>super 关键字用于访问和调用对象父类上的函数。可以调用父类的构造函数，也可以调用父类的普通函数。</p>\n<p><strong>注意</strong><br>子类在构造函数中使用super, 必须放到 this 前面(必须先调用父类的构造方法,在使用子类构造方法)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Father &#123;</span><br><span class=\"line\">    constructor(x, y) &#123;</span><br><span class=\"line\">        this.x &#x3D; x;</span><br><span class=\"line\">        this.y &#x3D; y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sum() &#123;</span><br><span class=\"line\">        console.log(this.x + this.y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Son extends Father &#123;</span><br><span class=\"line\">    constructor(x, y) &#123;</span><br><span class=\"line\">        super(x, y); &#x2F;&#x2F;调用了父类中的构造函数</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var son &#x3D; new Son(1, 2);</span><br><span class=\"line\">var son1 &#x3D; new Son(11, 22);</span><br><span class=\"line\">son.sum();</span><br><span class=\"line\">son1.sum();</span><br></pre></td></tr></table></figure>\n<p>super必须放到this前面</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">       &#x2F;&#x2F; 父类有加法方法</span><br><span class=\"line\">       class Father &#123;</span><br><span class=\"line\">           constructor(x, y) &#123;</span><br><span class=\"line\">               this.x &#x3D; x;</span><br><span class=\"line\">               this.y &#x3D; y;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           sum() &#123;</span><br><span class=\"line\">               console.log(this.x + this.y);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       &#x2F;&#x2F; 子类继承父类加法方法 同时 扩展减法方法</span><br><span class=\"line\">       class Son extends Father &#123;</span><br><span class=\"line\">           constructor(x, y) &#123;</span><br><span class=\"line\">               &#x2F;&#x2F; 利用super 调用父类的构造函数</span><br><span class=\"line\">               &#x2F;&#x2F; super 必须在子类this之前调用</span><br><span class=\"line\">               super(x, y);</span><br><span class=\"line\">               this.x &#x3D; x;</span><br><span class=\"line\">               this.y &#x3D; y;</span><br><span class=\"line\"></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           subtract() &#123;</span><br><span class=\"line\">               console.log(this.x - this.y);</span><br><span class=\"line\"></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       var son &#x3D; new Son(5, 3);</span><br><span class=\"line\">       son.subtract();</span><br><span class=\"line\">       son.sum();</span><br><span class=\"line\">   &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用类的注意事项\">使用类的注意事项<a href=\"#使用类的注意事项\" title=\"使用类的注意事项\"></a></h3><ul><li>在 ES6 中类没有变量提升，所以必须先定义类，才能通过类实例化对象。</li>\n<li>类里面的共有属性和方法一定要加this使用。</li>\n<li>类里面的this指向问题：<ul><li>constructor 里面的this指向实例对象，方法里面的this 指向这个方法的调用者。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var that;</span><br><span class=\"line\">    var _that;</span><br><span class=\"line\">    class Star &#123;</span><br><span class=\"line\">        constructor(uname, age) &#123;</span><br><span class=\"line\">            &#x2F;&#x2F; constructor 里面的this 指向的是 创建的实例对象</span><br><span class=\"line\">            that &#x3D; this;</span><br><span class=\"line\">            console.log(this);</span><br><span class=\"line\"></span><br><span class=\"line\">            this.uname &#x3D; uname;</span><br><span class=\"line\">            this.age &#x3D; age;</span><br><span class=\"line\">            &#x2F;&#x2F; this.sing();</span><br><span class=\"line\">            this.btn &#x3D; document.querySelector(&#39;button&#39;);</span><br><span class=\"line\">            this.btn.onclick &#x3D; this.sing;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sing() &#123;</span><br><span class=\"line\">            &#x2F;&#x2F; 这个sing方法里面的this 指向的是 btn </span><br><span class=\"line\">            这个按钮,因为这个按钮调用了这个函数</span><br><span class=\"line\">            console.log(this);</span><br><span class=\"line\"></span><br><span class=\"line\">            console.log(that.uname); </span><br><span class=\"line\">            &#x2F;&#x2F; that里面存储的是constructor里面的this</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        dance() &#123;</span><br><span class=\"line\">            &#x2F;&#x2F; 这个dance里面的this 指向的是实例对象 </span><br><span class=\"line\">            ldh 因为ldh 调用了这个函数</span><br><span class=\"line\">            _that &#x3D; this;</span><br><span class=\"line\">            console.log(this);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    var ldh &#x3D; new Star(&#39;刘德华&#39;);</span><br><span class=\"line\">    console.log(that &#x3D;&#x3D;&#x3D; ldh);</span><br><span class=\"line\">    ldh.dance();</span><br><span class=\"line\">    console.log(_that &#x3D;&#x3D;&#x3D; ldh);</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 1. 在ES6中类没有变量提升，所以必须先定义类，</span><br><span class=\"line\">才能通过类实例化对象</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 2. 类里面的共有的属性和方法一定要加this使用.</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul></li>\n</ul><h2 id=\"构造函数\">构造函数<a href=\"#构造函数\" title=\"构造函数\"></a></h2><pre><code>构造函数是一种特殊的函数，主要用来初始化对象，即为对\n象成员变量赋初始值，它总与new一起使用。我们可以把对象\n中一些公共的属性和方法抽取出来，然后封装到这个函数里面。</code></pre><p>在 JS 中，使用构造函数时要注意以下两点：</p>\n<ul><li>构造函数用于创建某一类对象，其首字母要大写</li>\n<li>构造函数要和 new 一起使用才有意义</li>\n</ul><h3 id=\"new-在执行时会做四件事情\">new 在执行时会做四件事情<a href=\"#new-在执行时会做四件事情\" title=\"new 在执行时会做四件事情\"></a></h3><ul><li>在内存中创建一个新的空对象。</li>\n<li>让 this 指向这个新的对象。</li>\n<li>执行构造函数里面的代码，给这个新对象添加属性和方法。</li>\n<li>返回这个新对象（所以构造函数里面不需要 return ）。</li>\n</ul><h3 id=\"成员\">成员<a href=\"#成员\" title=\"成员\"></a></h3><p>JavaScript的构造函数中可以添加一些成员，可以在构造函数本身上添加，也可以在构造函数内部的this上添加。通过这两种方式添加的成员，就分别称为==静态成员==和==实例成员==。</p>\n<ul><li>静态成员：在构造函数本上添加的成员称为静态成员，只能由构造函数本身来访问 。</li>\n<li>实例成员：在构造函数内部创建的对象成员称为实例成员，只能由实例化的对象来访问。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Star()&#123;</span><br><span class=\"line\">    this.name&#x3D;name</span><br><span class=\"line\">    this.age&#x3D;age</span><br><span class=\"line\">    this.sing&#x3D;function()&#123;</span><br><span class=\"line\">        console.log(SSS)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var XXX&#x3D;new Star(&quot;XX&quot;,&quot;YY&quot;)</span><br><span class=\"line\">&#x2F;&#x2F;1.实例成员就是构造函数内部通过this添加的成员</span><br><span class=\"line\">name age sing 就是实例成员</span><br><span class=\"line\">&#x2F;&#x2F; 实例成员只能通过实例化的对象来访问</span><br><span class=\"line\">console.log(XXX.name);</span><br><span class=\"line\">XXX.sing();</span><br><span class=\"line\">&#x2F;&#x2F; console.log(Star.uname);  </span><br><span class=\"line\">&#x2F;&#x2F;不可以通过构造函数来访问实例成员</span><br><span class=\"line\">&#x2F;&#x2F; 2. 静态成员 在构造函数本身上添加的成员  sex 就是静态成员</span><br><span class=\"line\">Star.sex &#x3D; &#39;男&#39;;</span><br><span class=\"line\">&#x2F;&#x2F; 静态成员只能通过构造函数来访问</span><br><span class=\"line\">console.log(Star.sex);</span><br><span class=\"line\">console.log(ldh.sex); &#x2F;&#x2F; 不能通过对象来访问</span><br></pre></td></tr></table></figure>\n<h3 id=\"构造函数的问题\">构造函数的问题<a href=\"#构造函数的问题\" title=\"构造函数的问题\"></a></h3>存在浪费内存的问题<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Star(uname, age) &#123;</span><br><span class=\"line\">    this.uname &#x3D; uname;</span><br><span class=\"line\">    this.age &#x3D; age;</span><br><span class=\"line\">    this.sing &#x3D; function() &#123;</span><br><span class=\"line\">        console.log(&#39;我会唱歌&#39;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var ldh &#x3D; new Star(&#39;刘德华&#39;, 18);</span><br><span class=\"line\">var zxy &#x3D; new Star(&#39;张学友&#39;, 19);</span><br></pre></td></tr></table></figure>\n<img src=\"https://github.com/BXsweetheart/youdaoNotes/blob/master/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%9A%84%E9%97%AE%E9%A2%98.png?raw=true\" class=\"φcy\" alt=\"image\"></li>\n</ul><h3 id=\"构造函数原型-prototype\">构造函数原型 prototype<a href=\"#构造函数原型-prototype\" title=\"构造函数原型 prototype\"></a></h3><pre><code>构造函数通过原型分配的函数是所有对象所共享的。</code></pre><ol><li><p>JavaScript 规定，每一个构造函数==都有一个 prototype==<br>属性，指向另一个对象。注意这个prototype就是一个对<br>象，这个对象的所有属性和方法，都会被构造函数所拥有。</p>\n</li>\n<li><p>我们可以把那些不变的方法，直接定义在 prototype<br>对象上，这样所有对象的实例就可以共享这些方法。</p>\n</li>\n<li><p>一般情况下，我们把公共属性定义到构造函数里面，公共的方法我们放到原型对象身上。</p>\n</li>\n</ol><h4 id=\"问答\">问答<a href=\"#问答\" title=\"问答\"></a></h4><ol><li>原型是什么 ？<br>一个对象，我们也称为 prototype 为原型对象。</li>\n<li>原型的作用是什么 ？<br>共享方法。</li>\n</ol><h3 id=\"对象原型--__-proto-__\">对象原型  __ proto __<a href=\"#对象原型--__-proto-__\" title=\"对象原型  __ proto __\"></a></h3><p>对象都会有一个属性 __ proto __ 指向构造函数的 prototype 原型对象，之所以我们对象可以使用构造函数 prototype 原型对象的属性和方法，就是因为对象有 __ proto __ 原型的存在。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">        function Star(uname, age) &#123;</span><br><span class=\"line\">            this.uname &#x3D; uname;</span><br><span class=\"line\">            this.age &#x3D; age;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        Star.prototype.sing &#x3D; function() &#123;</span><br><span class=\"line\">            console.log(&#39;我会唱歌&#39;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        var ldh &#x3D; new Star(&#39;刘德华&#39;, 18);</span><br><span class=\"line\">        var zxy &#x3D; new Star(&#39;张学友&#39;, 19);</span><br><span class=\"line\">        ldh.sing();</span><br><span class=\"line\">        </span><br><span class=\"line\">        console.log(ldh); &#x2F;&#x2F; 对象身上系统自己添加一个 </span><br><span class=\"line\">        __proto__ 指向我们构造函数的原型对象 prototype</span><br><span class=\"line\">        </span><br><span class=\"line\">        console.log(ldh.__proto__ &#x3D;&#x3D;&#x3D; Star.prototype);</span><br><span class=\"line\">        &#x2F;&#x2F; 方法的查找规则: 首先先看ldh 对象身上是否有 </span><br><span class=\"line\">        sing 方法,如果有就执行这个对象上的sing</span><br><span class=\"line\">        &#x2F;&#x2F; 如果没有sing这个方法,因为有__proto__的存在,就</span><br><span class=\"line\">        去构造函数原型对象prototype身上去查找sing这个方法</span><br><span class=\"line\">    &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://github.com/BXsweetheart/youdaoNotes/blob/master/proto.png?raw=true\" class=\"φcy\" alt=\"image\"></p>\n<ul><li><strong>proto</strong>对象原型和原型对象 prototype 是等价的</li>\n<li><strong>proto</strong>对象原型的意义就在于为对象的查找机制提供一个方向，或者说一条路线，但是它是一个非标准属性，因此实际开发中，不可以使用这个属性，它只是内部指向原型对象 prototype</li>\n</ul><h3 id=\"constructor--构造函数\">constructor  构造函数<a href=\"#constructor--构造函数\" title=\"constructor  构造函数\"></a></h3><ol><li><p>对象原型（ __ proto __）和构造函数（prototype）原型对象里面都有一个属性 constructor 属性 ，constructor 我们称为构造函数，因为它指回构造函数本身。</p>\n</li>\n<li><p>constructor 主要用于记录该对象引用于哪个构造函数，它可以让原型对象重新指向原来的构造函数。</p>\n</li>\n<li><p>一般情况下，对象的方法都在构造函数的原型对象中设置。如果有多个对象的方法，我们可以给原型对象采取对象形式赋值，但是这样就会覆盖构造函数原型对象原来的内容，这样修改后的原型对象 constructor就不再指向当前构造函数了。此时，我们可以在修改后的原型对象中，添加一个constructor指向原来的构造函数。</p>\n</li>\n</ol><h3 id=\"构造函数、实例、原型对象三者之间的关系\">构造函数、实例、原型对象三者之间的关系<a href=\"#构造函数、实例、原型对象三者之间的关系\" title=\"构造函数、实例、原型对象三者之间的关系\"></a></h3><p><img src=\"https://github.com/BXsweetheart/youdaoNotes/blob/master/relationship.png?raw=true\" class=\"φcy\" alt=\"image\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">       function Star(uname, age) &#123;</span><br><span class=\"line\">           this.uname &#x3D; uname;</span><br><span class=\"line\">           this.age &#x3D; age;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       &#x2F;&#x2F; 很多情况下,我们需要手动的利用constructor </span><br><span class=\"line\">       这个属性指回原来的构造函数</span><br><span class=\"line\">       &#x2F;&#x2F; Star.prototype.sing &#x3D; function() &#123;</span><br><span class=\"line\">       &#x2F;&#x2F;     console.log(&#39;我会唱歌&#39;);</span><br><span class=\"line\">       &#x2F;&#x2F; &#125;;</span><br><span class=\"line\">       &#x2F;&#x2F; Star.prototype.movie &#x3D; function() &#123;</span><br><span class=\"line\">       &#x2F;&#x2F;     console.log(&#39;我会演电影&#39;);</span><br><span class=\"line\">       &#x2F;&#x2F; &#125;</span><br><span class=\"line\">       Star.prototype &#x3D; &#123;</span><br><span class=\"line\">           &#x2F;&#x2F; 如果我们修改了原来的原型对象,给原型对象赋</span><br><span class=\"line\">           值的是一个对象,则必须手动的利用constructor指</span><br><span class=\"line\">           回原来的构造函数</span><br><span class=\"line\">           constructor: Star,</span><br><span class=\"line\">           sing: function() &#123;</span><br><span class=\"line\">               console.log(&#39;我会唱歌&#39;);</span><br><span class=\"line\">           &#125;,</span><br><span class=\"line\">           movie: function() &#123;</span><br><span class=\"line\">               console.log(&#39;我会演电影&#39;);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       var ldh &#x3D; new Star(&#39;刘德华&#39;, 18);</span><br><span class=\"line\">       var zxy &#x3D; new Star(&#39;张学友&#39;, 19);</span><br><span class=\"line\">       console.log(Star.prototype);</span><br><span class=\"line\">       console.log(ldh.__proto__);</span><br><span class=\"line\">       console.log(Star.prototype.constructor);</span><br><span class=\"line\">       console.log(ldh.__proto__.constructor);</span><br><span class=\"line\">   &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"原型链\">原型链<a href=\"#原型链\" title=\"原型链\"></a></h3><p><img src=\"https://github.com/BXsweetheart/youdaoNotes/blob/master/%E5%8E%9F%E5%9E%8B%E9%93%BE.png?raw=true\" class=\"φcy\" alt=\"image\"></p>\n<ol><li><p>只要是对象就有<strong>proto</strong> 原型, 指向原型对象</p>\n</li>\n<li><p>我们Star原型对象里面的<strong>proto</strong>原型指向的是 Object.prototype</p>\n</li>\n<li><p>我们Object.prototype原型对象里面的<strong>proto</strong>原型  指向为 null</p>\n</li>\n</ol><h3 id=\"javascript-的成员查找机制规则\">JavaScript 的成员查找机制(规则)<a href=\"#javascript-的成员查找机制规则\" title=\"JavaScript 的成员查找机制(规则)\"></a></h3><ul><li>当访问一个对象的属性（包括方法）时，首先查找这个对象自身有没有该属性。</li>\n<li>如果没有就查找它的原型（也就是 <strong>proto</strong>指向的 prototype 原型对象）。</li>\n<li>如果还没有就查找原型对象的原型（Object的原型对象）。</li>\n<li>依此类推一直找到 Object 为止（null）。</li>\n<li><strong>proto</strong>对象原型的意义就在于为对象成员查找机制提供一个方向，或者说一条路线。</li>\n</ul><h3 id=\"原型对象this指向\">原型对象this指向<a href=\"#原型对象this指向\" title=\"原型对象this指向\"></a></h3><ul><li>构造函数中的this指向我们实例对象。</li>\n<li>原型对象里面放的是方法，这个方法里面的this 指向的是 这个方法的调用者，也就是这个实例对象。</li>\n</ul><h2 id=\"扩展内置对象\">扩展内置对象<a href=\"#扩展内置对象\" title=\"扩展内置对象\"></a></h2><p>可以通过原型对象，对原来的内置对象进行扩展自定义的方法。比如给数组增加自定义求偶数和的功能。（原型对象的应用）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Array.prototype.sum&#x3D;function()&#123;</span><br><span class=\"line\">        var sum&#x3D;0</span><br><span class=\"line\">        for(i&#x3D;0;i&lt;this.length;i++)&#123;</span><br><span class=\"line\">            sum +&#x3D; this[i]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return sum</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var arr&#x3D;[1,2,3]</span><br><span class=\"line\">    console.log(arr.sum())</span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong><br>数组和字符串==内置对象==不能以对象的形式追加，因为会覆盖原本的内置方法——Array.prototype = {} ，只能使用Array.prototype.xxx = function(){} 的方式。</p>\n<h2 id=\"继承\">继承<a href=\"#继承\" title=\"继承\"></a></h2><p>ES6之前并没有给我们提供extends继承。我们可以通过构造函数+原型对象模拟实现继承，被称为组合继承。</p>\n<h3 id=\"call\">call()<a href=\"#call\" title=\"call()\"></a></h3><p>调用这个函数, 并且修改函数运行时的 this 指向</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun.call(thisArg, arg1, arg2, ...)</span><br></pre></td></tr></table></figure>\n<ul><li><p>thisArg：当前调用函数 this 的指向对象。</p>\n</li>\n<li><p>arg1，arg2：传递的其他参数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    function fn(x,y,z)&#123;</span><br><span class=\"line\">        console.log(&quot;deadly sleepy&quot;)</span><br><span class=\"line\">        console.log(this)</span><br><span class=\"line\">        console.log(x+y+z)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var o&#x3D;&#123;</span><br><span class=\"line\">        think:&quot;want to sleep&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    var postgraduate&#x3D;&quot;postgraduate&quot;;</span><br><span class=\"line\">    var is&#x3D;&quot;is&quot;;</span><br><span class=\"line\">    var important&#x3D;&quot;important&quot;</span><br><span class=\"line\">    fn.call()</span><br><span class=\"line\">    fn.call(o)</span><br><span class=\"line\">    fn.call(o,postgraduate,is,important)</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"借用构造函数继承父类型属性\">借用构造函数继承父类型属性<a href=\"#借用构造函数继承父类型属性\" title=\"借用构造函数继承父类型属性\"></a></h3><p>核心原理：<br>通过 call() 把父类型的 this 指向子类型的 this ，这样就可以实现子类型继承父类型的属性。</p>\n<p>  extends属于类的继承，写法是class Son extends Father。<br>  这里是函数<br>  super()是访问和调用父构造函数的方法<br>  call()是继承父构造函数的类和方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 父类</span><br><span class=\"line\">function Father(name, age, sex) &#123;</span><br><span class=\"line\">  this.name &#x3D; name;</span><br><span class=\"line\">  this.age &#x3D; age;</span><br><span class=\"line\">  this.sex &#x3D; sex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F; 子类</span><br><span class=\"line\">function Son(name, age, sex, score) &#123;</span><br><span class=\"line\">  Father.call(this, name, age, sex);  &#x2F;&#x2F; 此时父类的 this </span><br><span class=\"line\">  指向子类的 this，同时调用这个函数</span><br><span class=\"line\">  this.score &#x3D; score;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var s1 &#x3D; new Son(&#39;zs&#39;, 18, &#39;男&#39;, 100);</span><br><span class=\"line\">console.dir(s1);</span><br></pre></td></tr></table></figure>\n<p>子类构造函数中通过call将父类构造函数this指向自身，达到继承父类属性目的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">       &#x2F;&#x2F; 借用父构造函数继承属性</span><br><span class=\"line\">       &#x2F;&#x2F; 1. 父构造函数</span><br><span class=\"line\">       function Father(uname, age) &#123;</span><br><span class=\"line\">           &#x2F;&#x2F; this 指向父构造函数的对象实例</span><br><span class=\"line\">           this.uname &#x3D; uname;</span><br><span class=\"line\">           this.age &#x3D; age;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       Father.prototype.money &#x3D; function() &#123;</span><br><span class=\"line\">           console.log(100000);</span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;;</span><br><span class=\"line\">       &#x2F;&#x2F; 2 .子构造函数 </span><br><span class=\"line\">       function Son(uname, age, score) &#123;</span><br><span class=\"line\">           &#x2F;&#x2F; this 指向子构造函数的对象实例</span><br><span class=\"line\">           Father.call(this, uname, age);</span><br><span class=\"line\">           this.score &#x3D; score;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       &#x2F;&#x2F; Son.prototype &#x3D; Father.prototype;  </span><br><span class=\"line\">      &#x2F;&#x2F;这样直接赋值会有问题,如果修改了子原型对象,父原型</span><br><span class=\"line\">      &#x2F;&#x2F;对象也会跟着一起变化</span><br><span class=\"line\">       Son.prototype &#x3D; new Father();</span><br><span class=\"line\">       &#x2F;&#x2F; 如果利用对象的形式修改了原型对象,别忘了利用</span><br><span class=\"line\">       &#x2F;&#x2F;constructor 指回原来的构造函数</span><br><span class=\"line\">       Son.prototype.constructor &#x3D; Son;</span><br><span class=\"line\">       &#x2F;&#x2F; 这个是子构造函数专门的方法,原型链查找</span><br><span class=\"line\">       Son.prototype.exam &#x3D; function() &#123;</span><br><span class=\"line\">           console.log(&#39;孩子要考试&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       var son &#x3D; new Son(&#39;刘德华&#39;, 18, 100);</span><br><span class=\"line\">       console.log(son);</span><br><span class=\"line\">       console.log(Father.prototype);</span><br><span class=\"line\">       console.log(Son.prototype.constructor);</span><br><span class=\"line\">   &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n<p>一般情况下，对象的方法都在构造函数的原型对象中设置，通过构造函数无法继承父类方法。<br>核心原理： </p>\n</li>\n<li><p>将子类所共享的方法提取出来，让子类的 prototype 原型对象 = new 父类()  </p>\n</li>\n<li><p>本质：子类原型对象等于是实例化父类，因为父类实例化之后另外开辟空间，就不会影响原来父类原型对象</p>\n</li>\n<li><p>将子类的 constructor 从新指向子类的构造函数</p>\n</li>\n</ul><h3 id=\"类的本质\">类的本质<a href=\"#类的本质\" title=\"类的本质\"></a></h3><ol><li>class本质还是function（简单认为，构造函数的另外一种写法）；</li>\n<li>类的所有方法都定义在类的prototype属性上；</li>\n<li>类创建的实例,里面也有<strong>proto</strong>指向类的prototype原型对象；</li>\n<li>所以ES6的类它的绝大部分功能，ES5都可以做到，新的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已；</li>\n<li>所以ES6的类其实就是语法糖；</li>\n<li>语法糖:语法糖就是一种便捷写法。简单理解,有两种方法可以实现同样的功能,但是一种写法更加清晰、方便,那么这个方法就是语法糖。</li>\n</ol><p><strong>ES6之前通过 ==构造函数+ 原型实现面向对象== 编程</strong></p>\n<ul><li>构造函数有原型对象prototype；</li>\n<li>构造函数原型对象prototype 里面有constructor 指向构造函数本身；</li>\n<li>构造函数可以通过原型对象添加方法；</li>\n<li>构造函数创建的实例对象有<strong>proto</strong>原型指向构造函数的原型对象。</li>\n</ul><p><strong>ES6通过 ==类== 实现面向对象编程</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    class Star &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    console.log(typeof Star);</span><br><span class=\"line\">    &#x2F;&#x2F; 1. 类的本质其实还是一个函数我们也可以简单的认为</span><br><span class=\"line\">    &#x2F;&#x2F;类就是构造函数的另外一种写法</span><br><span class=\"line\">    &#x2F;&#x2F; (1) 类有原型对象prototype </span><br><span class=\"line\">    console.log(Star.prototype);</span><br><span class=\"line\">    &#x2F;&#x2F; (2) 类原型对象prototype 里面有constructor 指向类本身</span><br><span class=\"line\">    console.log(Star.prototype.constructor);</span><br><span class=\"line\">    &#x2F;&#x2F; (3)类可以通过原型对象添加方法</span><br><span class=\"line\">    Star.prototype.sing &#x3D; function() &#123;</span><br><span class=\"line\">        console.log(&#39;冰雨&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var ldh &#x3D; new Star();</span><br><span class=\"line\">    console.dir(ldh);</span><br><span class=\"line\">    &#x2F;&#x2F; (4) 类创建的实例对象有__proto__ 原型指向 类的原型对象</span><br><span class=\"line\">    console.log(ldh.__proto__ &#x3D;&#x3D;&#x3D; Star.prototype);</span><br><span class=\"line\">    i &#x3D; i + 1;</span><br><span class=\"line\">    i++</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"es5新增方法\">ES5新增方法<a href=\"#es5新增方法\" title=\"ES5新增方法\"></a></h2><h3 id=\"数组方法\">数组方法<a href=\"#数组方法\" title=\"数组方法\"></a></h3><p>迭代(遍历)方法：      forEach()、map()、filter()、some()、every()；</p>\n<h4 id=\"foreach\">forEach()<a href=\"#foreach\" title=\"forEach()\"></a></h4><pre><code>array.forEach(function(value, index, array))\n1. value每一个数组元素\n2. index每一个数组元素的索引号\n3. array数组本身</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr &#x3D; [1, 2, 3]</span><br><span class=\"line\">arr.forEach(function (value, index, array) &#123;</span><br><span class=\"line\">    console.log(&#39;每个数组元素&#39; + value);</span><br><span class=\"line\">    console.log(&#39;每个数组元素的索引号&#39; + index);</span><br><span class=\"line\">    console.log(&#39;数组本身&#39; + array);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"filter\">filter()<a href=\"#filter\" title=\"filter()\"></a></h4><pre><code>array.filter(function(value, index, array))\n1. value每一个数组元素\n2. index每一个数组元素的索引号\n3. array数组本身</code></pre><ul><li>filter() 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素，主要用于==筛选数组==。</li>\n<li><strong>注意它直接返回一个==新==数组</strong></li>\n</ul><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr &#x3D; [12, 66, 4, 88, 3, 7];</span><br><span class=\"line\">&#x2F;&#x2F;newAArr接收返回的数组</span><br><span class=\"line\">var newArr &#x3D; arr.filter(function (value, index) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; return value &gt;&#x3D; 20;</span><br><span class=\"line\">    return value % 2 &#x3D;&#x3D;&#x3D; 0;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">console.log(newArr);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"some\">some()<a href=\"#some\" title=\"some()\"></a></h4><pre><code>array.some(function(value, index, array))\n1. value每一个数组元素\n2. index每一个数组元素的索引号\n3. array数组本身</code></pre><ol><li>some() 方法用于检测数组中的元素是否满足指定条件。即查找数组中是否有满足条件的元素。</li>\n<li>注意它==返回值是布尔值==， 如果查找到这个元素， 就返回true，  如果查找不到就返回false。</li>\n<li>如果找到第一个满足条件的元素，则终止循环，不在继续查找。</li>\n</ol><pre><code>1. filter()查找到满足条件的元素后，返回的是一个数组， \n而且是把所有满足条件的元素返回回来。\n2. some()查找满足条件的元素是否存在，返回的是一个布尔\n值，查找到第一个满足条件的元素就终止循环。</code></pre><h4 id=\"some和foreach的区别\">some()和forEach的区别<a href=\"#some和foreach的区别\" title=\"some()和forEach的区别\"></a></h4><ol><li>在forEach() 和filter() 里面 return 不会终止迭代。</li>\n<li>在some()里面遇到 return true 就是终止遍历，迭代效率更高。</li>\n</ol><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr &#x3D; [&#39;red&#39;, &#39;green&#39;, &#39;blue&#39;, &#39;pink&#39;];</span><br><span class=\"line\">&#x2F;&#x2F; 1. forEach迭代 遍历</span><br><span class=\"line\">arr.forEach(function(value) &#123;</span><br><span class=\"line\">    if (value &#x3D;&#x3D; &#39;green&#39;) &#123;</span><br><span class=\"line\">        console.log(&#39;找到了该元素&#39;);</span><br><span class=\"line\">&#x2F;&#x2F;         return true; &#x2F;&#x2F; 在forEach 里面 return 不会终止迭代</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(11);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 如果查询数组中唯一的元素, 用some方法更合适,</span><br><span class=\"line\">arr.some(function (value) &#123;</span><br><span class=\"line\">    if (value &#x3D;&#x3D; &#39;green&#39;) &#123;</span><br><span class=\"line\">        console.log(&#39;找到了该元素&#39;);</span><br><span class=\"line\">        return true; &#x2F;&#x2F;  在some 里面 遇到 return true </span><br><span class=\"line\">        &#x2F;&#x2F;就是终止遍历 迭代效率更高</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(11);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.filter(function (value) &#123;</span><br><span class=\"line\">    if (value &#x3D;&#x3D; &#39;green&#39;) &#123;</span><br><span class=\"line\">        console.log(&#39;找到了该元素&#39;);</span><br><span class=\"line\">        return true; &#x2F;&#x2F; filter 里面 return 不会终止迭代</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(11);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串方法\">字符串方法<a href=\"#字符串方法\" title=\"字符串方法\"></a></h3><h4 id=\"trim\">trim()<a href=\"#trim\" title=\"trim()\"></a></h4><ul><li>trim() 方法会从一个字符串的两端删除空白字符。       </li>\n<li>trim() 方法并不影响原字符串本身，它返回的是一个新的字符串。</li>\n<li>解决表单提交用户输入空格的问题。</li>\n</ul><h3 id=\"对象方法\">对象方法<a href=\"#对象方法\" title=\"对象方法\"></a></h3><h4 id=\"objectkeys\">Object.keys()<a href=\"#objectkeys\" title=\"Object.keys()\"></a></h4><p>用于获取对象自身所有的属性</p>\n<pre><code>Object.keys(对象参数名)</code></pre><ul><li>效果类似 for…in</li>\n<li>返回一个由==属性名==组成的==数组==</li>\n</ul><h3 id=\"objectdefineproperty\">Object.defineProperty()<a href=\"#objectdefineproperty\" title=\"Object.defineProperty()\"></a></h3><p>定义对象中新属性或修改原有的属性。(了解)</p>\n<pre><code>Object.defineProperty(obj, prop, descriptor)</code></pre><ul><li>obj：必需。目标对象 。</li>\n<li>prop：必需。需要定义或修改的属性的名字。</li>\n<li>descriptor：必需。目标属性所拥有的特性。</li>\n</ul><h4 id=\"第三个参数-descriptor-说明：\">第三个参数 descriptor 说明：<a href=\"#第三个参数-descriptor-说明：\" title=\"第三个参数 descriptor 说明：\"></a></h4><p><strong>以对象形式 { } 书写</strong></p>\n<ul><li>value: 设置属性的值。默认为undefined；</li>\n<li>writable: 值是否可以重写。true | false  ，默认为false；</li>\n<li>enumerable: 目标属性是否可以被枚举（能不能被遍历）。true | false  ，默认为 false；</li>\n<li>configurable: 目标属性是否可以被删除或是否可以再次修改特性， true | false  ，默认为false。</li>\n</ul><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; Object.defineProperty() 定义新属性或修改原有的属性</span><br><span class=\"line\">   var obj &#x3D; &#123;</span><br><span class=\"line\">       id: 1,</span><br><span class=\"line\">       pname: &#39;小米&#39;,</span><br><span class=\"line\">       price: 1999</span><br><span class=\"line\">   &#125;;</span><br><span class=\"line\">   Object.defineProperty(obj, &#39;num&#39;, &#123;</span><br><span class=\"line\">       value: 1000,</span><br><span class=\"line\">       enumerable: true</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\">   console.log(obj);</span><br><span class=\"line\">   Object.defineProperty(obj, &#39;price&#39;, &#123;</span><br><span class=\"line\">       value: 9.9</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\">   console.log(obj);</span><br><span class=\"line\">   Object.defineProperty(obj, &#39;id&#39;, &#123;</span><br><span class=\"line\">       &#x2F;&#x2F; 如果值为false 不允许修改这个属性值 默认值也是false</span><br><span class=\"line\">       writable: false,</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\">   obj.id &#x3D; 2;</span><br><span class=\"line\">   console.log(obj);</span><br><span class=\"line\">   Object.defineProperty(obj, &#39;address&#39;, &#123;</span><br><span class=\"line\">       value: &#39;中国山东蓝翔技校xx单元&#39;,</span><br><span class=\"line\">       writable: false,</span><br><span class=\"line\">       &#x2F;&#x2F; enumerable 如果值为false 则不允许遍历, 默认的值是 false</span><br><span class=\"line\">       enumerable: false,</span><br><span class=\"line\">       &#x2F;&#x2F; configurable 如果为false 则不允许删除这个属性 </span><br><span class=\"line\">       &#x2F;&#x2F;不允许再修改第三个参数里面的特性 默认为false</span><br><span class=\"line\">       configurable: false</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\">   console.log(obj);</span><br><span class=\"line\">   console.log(Object.keys(obj));</span><br><span class=\"line\">   delete obj.address;</span><br><span class=\"line\">   console.log(obj);</span><br><span class=\"line\">   delete obj.pname;</span><br><span class=\"line\">   console.log(obj);</span><br><span class=\"line\">   Object.defineProperty(obj, &#39;address&#39;, &#123;</span><br><span class=\"line\">       value: &#39;中国山东蓝翔技校xx单元&#39;,</span><br><span class=\"line\">       &#x2F;&#x2F; 如果值为false 不允许修改这个属性值 默认值也是false</span><br><span class=\"line\">       writable: true,</span><br><span class=\"line\">       &#x2F;&#x2F; enumerable 如果值为false 则不允许遍历, 默认的值是 false</span><br><span class=\"line\">       enumerable: true,</span><br><span class=\"line\">       &#x2F;&#x2F; configurable 如果为false 则不允许删除以及这个属性 </span><br><span class=\"line\">       不允许再修改第三个参数里面的特性默认为false</span><br><span class=\"line\">       configurable: true</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\">   console.log(obj.address);&#x2F;&#x2F;不允许再修改第三个参数里面的特性</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数进阶\">函数进阶<a href=\"#函数进阶\" title=\"函数进阶\"></a></h2><h3 id=\"函数的定义和调用\">函数的定义和调用<a href=\"#函数的定义和调用\" title=\"函数的定义和调用\"></a></h3><h4 id=\"函数的定义方式\">函数的定义方式<a href=\"#函数的定义方式\" title=\"函数的定义方式\"></a></h4><ol><li>函数声明方式 function 关键字 (命名函数)</li>\n</ol><pre><code>function fn(){};</code></pre><ol><li>函数表达式 (匿名函数)</li>\n</ol><pre><code>var fun =function(){};</code></pre><ol><li>new Function()   </li>\n</ol><pre><code>var fn = new Function(&apos;参数1&apos;,&apos;参数2&apos;..., &apos;函数体&apos;)</code></pre><ul><li>Function 里面参数都必须是字符串格式</li>\n<li>第三种方式执行效率低，也不方便书写，因此较少使用</li>\n<li>所有函数都是 Function 的实例(对象)  </li>\n<li>函数也属于对象</li>\n</ul><p><img src=\"https://github.com/BXsweetheart/youdaoNotes/blob/master/functionRelationship.png?raw=true\" class=\"φcy\" alt=\"image\"></p>\n<h4 id=\"函数的调用方式\">函数的调用方式<a href=\"#函数的调用方式\" title=\"函数的调用方式\"></a></h4><ol><li>普通函数</li>\n</ol><pre><code>function fn() {\n    console.log(&apos;人生的巅峰&apos;);\n}</code></pre><ol><li>对象的方法</li>\n</ol><pre><code>var o = {\n    sayHi: function() {\n        console.log(&apos;人生的巅峰&apos;);\n\n    }\n}\no.sayHi();</code></pre><ol><li>构造函数</li>\n</ol><pre><code>function Star() {};\nnew Star();</code></pre><ol><li>绑定事件函数</li>\n</ol><pre><code>btn.onclick = function() {};   // 点击了按钮就可以调用这个函数</code></pre><ol><li>定时器函数</li>\n</ol><pre><code>setInterval(function() {}, 1000);  \n//这个函数是定时器自动1秒钟调用一次</code></pre><ol><li>立即执行函数</li>\n</ol><pre><code>(function() {\n        console.log(&apos;人生的巅峰&apos;);\n    })();\n    // 立即执行函数是自动调用\n两种写法\n( function () {} ) ()\n( function () {} () )</code></pre><h3 id=\"this\">this<a href=\"#this\" title=\"this\"></a></h3><h4 id=\"函数内-this-的指向\">函数内 this 的指向<a href=\"#函数内-this-的指向\" title=\"函数内 this 的指向\"></a></h4><p>调用方式的不同决定了this 的指向不同，一般指向调用者。<br>调用方式 | this指向<br>—|—<br>普通函数调用 | window<br>对象方法调用 | 对象<br>构造函数调用 | 实例对象；原型对象里的this也指向实例对象<br>绑定事件调用 | 绑定事件的对象<br>定时器函数调用 | window<br>立即执行函数调用 | window</p>\n<h4 id=\"改变函数内部-this-指向\">改变函数内部 this 指向<a href=\"#改变函数内部-this-指向\" title=\"改变函数内部 this 指向\"></a></h4><p>常用的有 bind()、call()、apply() 三种方法。</p>\n<h5 id=\"call-方法\">call 方法<a href=\"#call-方法\" title=\"call 方法\"></a></h5><p>call() 方法调用一个对象。简单理解为调用函数的方式，但是它可以改变函数的 this 指向。</p>\n<pre><code>fun.call(thisArg, arg1, arg2, ...)</code></pre><ul><li>thisArg：在 fun 函数运行时指定的 this 值</li>\n<li>arg1，arg2：传递的其他参数</li>\n<li>返回值就是函数的返回值，因为它就是调用函数</li>\n<li>因此当我们想改变this指向，同时想调用这个函数的时候，可以使用 call，比如继承。</li>\n</ul><h5 id=\"apply-方法\">apply 方法<a href=\"#apply-方法\" title=\"apply 方法\"></a></h5><p>apply() 方法调用一个函数。简单理解为调用函数的方式，但是它可以改变函数的 this 指向。</p>\n<pre><code>fun.apply(thisArg, [argsArray])</code></pre><ul><li>thisArg：在fun函数运行时指定的 this 值</li>\n<li>argsArray：传递的值，必须包含在数组里面</li>\n<li>返回值就是函数的返回值，因为它就是调用函数</li>\n<li>因此 apply 主要跟数组有关系，比如使用 Math.max() 求数组的最大值</li>\n<li>不用指向对象时，可以写null</li>\n</ul><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr &#x3D; [1, 66, 3, 99, 4];</span><br><span class=\"line\">var arr1 &#x3D; [&#39;red&#39;, &#39;pink&#39;];</span><br><span class=\"line\">&lt;!--var max &#x3D; Math.max.apply(null, arr);--&gt;</span><br><span class=\"line\">&lt;!--写null可能会出现问题，详见严格模式章节--&gt;</span><br><span class=\"line\">var max &#x3D; Math.max.apply(Math, arr);</span><br><span class=\"line\">var min &#x3D; Math.min.apply(Math, arr);</span><br><span class=\"line\">console.log(max, min);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"bind方法\">bind()方法<a href=\"#bind方法\" title=\"bind()方法\"></a></h5><p>bind() 方法不会调用函数。但是能改变函数内部this指向。</p>\n<pre><code>fun.bind(thisArg, arg1, arg2, ...) </code></pre><ul><li>thisArg：在 fun 函数运行时指定的 this 值；</li>\n<li>arg1，arg2：传递的其他参数；</li>\n<li>返回由指定的this值和初始化参数改造的原函数拷贝。当我们只是想改变this指向，并且不想调用这个函数的时候，可以使用 bind。</li>\n</ul><ol><li>不会调用原来的函数，可以改变原来函数内部的this 指向</li>\n<li>返回的是原函数改变this之后产生的新函数；</li>\n<li>如果有的函数我们不需要立即调用，但是又想改变这个函数内部的this指向此时用bind；</li>\n<li>我们有一个按钮,当我们点击了之后，就禁用这个按钮，3秒钟之后开启这个按钮。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">3. bind()  绑定 捆绑的意思</span><br><span class=\"line\"> var o &#x3D; &#123;</span><br><span class=\"line\">     name: &#39;andy&#39;</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"> function fn(a, b) &#123;</span><br><span class=\"line\">     console.log(this);</span><br><span class=\"line\">     console.log(a + b);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"> var f &#x3D; fn.bind(o, 1, 2);</span><br><span class=\"line\"> f();</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    &#x2F;&#x2F; 1. 不会调用原来的函数   </span><br><span class=\"line\">    可以改变原来函数内部的this 指向</span><br><span class=\"line\">    &#x2F;&#x2F; 2. 返回的是原函数改变this之后产生的新函数</span><br><span class=\"line\">    &#x2F;&#x2F; 3. 如果有的函数我们不需要立即调用,但是又想改变这个函数内部的this指向此时用bind</span><br><span class=\"line\">    &#x2F;&#x2F; 4. 我们有一个按钮,当我们点击了之后,就禁用这个按钮,3秒钟之后开启这个按钮</span><br><span class=\"line\">&lt;button&gt;点击&lt;&#x2F;button&gt;</span><br><span class=\"line\">&lt;button&gt;点击&lt;&#x2F;button&gt;</span><br><span class=\"line\">&lt;button&gt;点击&lt;&#x2F;button&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; var btn1 &#x3D; document.querySelector(&#39;button&#39;);</span><br><span class=\"line\">    &#x2F;&#x2F; btn1.onclick &#x3D; function() &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;     this.disabled &#x3D; true; &#x2F;&#x2F; 这个this 指向的是 btn 这个按钮</span><br><span class=\"line\">    &#x2F;&#x2F;     &#x2F;&#x2F; var that &#x3D; this;</span><br><span class=\"line\">    &#x2F;&#x2F;     setTimeout(function() &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;         &#x2F;&#x2F; that.disabled &#x3D; false; &#x2F;&#x2F; 定时器函数里面的this 指向的是window</span><br><span class=\"line\">    &#x2F;&#x2F;         this.disabled &#x3D; false; &#x2F;&#x2F; 此时定时器函数里面的this 指向的是btn</span><br><span class=\"line\">    &#x2F;&#x2F;     &#125;.bind(this), 3000); &#x2F;&#x2F; 这个this 指向的是btn 这个对象</span><br><span class=\"line\">    &#x2F;&#x2F; &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    var btns &#x3D; document.querySelectorAll(&#39;button&#39;);</span><br><span class=\"line\">    for (var i &#x3D; 0; i &lt; btns.length; i++) &#123;</span><br><span class=\"line\">        btns[i].onclick &#x3D; function() &#123;</span><br><span class=\"line\">            this.disabled &#x3D; true;</span><br><span class=\"line\">            setTimeout(function() &#123;</span><br><span class=\"line\">                this.disabled &#x3D; false;</span><br><span class=\"line\">            &#125;.bind(this), 2000);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"call----apply-----bind-总结\">call()    apply()     bind() 总结<a href=\"#call----apply-----bind-总结\" title=\"call()    apply()     bind() 总结\"></a></h4><h5 id=\"相同点\">相同点<a href=\"#相同点\" title=\"相同点\"></a></h5>都可以改变this指向</li>\n</ol><h5 id=\"区别点\">区别点<a href=\"#区别点\" title=\"区别点\"></a></h5><ol><li>call和apply会调用函数，并且改变函数内部this指向；</li>\n<li>call 和 apply 传递的参数不一样，call 传递参数 aru1, aru2…形式 。 apply 必须数组形式[arg]</li>\n<li>bind  不会调用函数, 可以改变函数内部this指向.</li>\n</ol><h5 id=\"主要应用场景\">主要应用场景<a href=\"#主要应用场景\" title=\"主要应用场景\"></a></h5><ol><li>call 经常做继承. </li>\n<li>apply 经常跟数组有关系.  比如借助于数学对象实现数组最大值最小值</li>\n<li>bind  不调用函数,但是还想改变this指向. 比如改变定时器内部的this指向. </li>\n</ol><h3 id=\"严格模式\">严格模式<a href=\"#严格模式\" title=\"严格模式\"></a></h3><h4 id=\"什么是严格模式\">什么是严格模式<a href=\"#什么是严格模式\" title=\"什么是严格模式\"></a></h4><p>JavaScript 除了提供正常模式外，还提供了严格模式（strict mode）。ES5 的严格模式是采用具有限制性 JavaScript 变体的一种方式，即在严格的条件下运行 JS 代码。</p>\n<p>严格模式在 IE10以上版本的浏览器中才会被支持，旧版本浏览器中会被忽略。</p>\n<p>严格模式对正常的 JavaScript 语义做了一些更改： </p>\n<ol><li>消除了 Javascript 语法的一些不合理、不严谨之处，减少了一些怪异行为。</li>\n<li>消除代码运行的一些不安全之处，保证代码运行的安全。</li>\n<li>提高编译器效率，增加运行速度。</li>\n<li>禁用了在 ECMAScript的未来版本中可能会定义的一些语法，为未来新版本的Javascript做好铺垫。比如一些保留字如：class, enum, export, extends, import,super不能做变量名</li>\n</ol><h4 id=\"开启严格模式\">开启严格模式<a href=\"#开启严格模式\" title=\"开启严格模式\"></a></h4><p>严格模式可以应用到整个脚本或个别函数中。因此在使用时，我们可以将严格模式分为为脚本开启严格模式和为函数开启严格模式两种情况。</p>\n<h5 id=\"为脚本开启严格模式\">为脚本开启严格模式<a href=\"#为脚本开启严格模式\" title=\"为脚本开启严格模式\"></a></h5><p>为整个脚本文件开启严格模式，需要在==所有语句之前放一个特定语句“use strict”;（或‘use strict’;）。==</p>\n<pre><code>&lt;!--为整个脚本文件开启严格模式--&gt;\n&lt;script&gt;\n　　&quot;use strict&quot;;\n　　console.log(&quot;这是严格模式。&quot;);\n&lt;/script&gt;</code></pre><p>因为”use strict”加了引号，所以老版本的浏览器会把它当作一行普通字符串而忽略。</p>\n<p>==有的 script 基本是严格模式，有的script脚本是正常模式，这样不利于文件合并，所以可以将整个脚本文件放在一个立即执行的匿名函数之中。这样独立创建一个作用域而不影响其他 script 脚本文件。==</p>\n<pre><code>&lt;script&gt;\n  (function (){\n　　　　&quot;use strict&quot;;\n　　　　function fn() {}\n　  })();\n&lt;/script&gt;</code></pre><h5 id=\"为函数开启严格模式\">为函数开启严格模式<a href=\"#为函数开启严格模式\" title=\"为函数开启严格模式\"></a></h5><p>要给某个函数开启严格模式，需要把“use strict”;  (或 ‘use strict’; ) 声明放在函数体所有语句之前。</p>\n<pre><code>function fn(){\n&lt;!--将 &quot;usestrict&quot;放在函数体的第一行，则整个函数以 &quot;严格模式&quot; 运行。--&gt;\n　　&quot;use strict&quot;;\n　　这里面的代码按照严格模式执行\n}\nfunction fun(){\n    这里面还是按照普通模式执行\n}</code></pre><h4 id=\"严格模式中的变化\">严格模式中的变化<a href=\"#严格模式中的变化\" title=\"严格模式中的变化\"></a></h4><h5 id=\"变量规定\">变量规定<a href=\"#变量规定\" title=\"变量规定\"></a></h5><ul><li>在正常模式中，如果一个变量没有声明就赋值，默认是全局变量。严格模式禁止这种用法，变量都必须先用var 命令声明，然后再使用。</li>\n<li>严禁删除已经声明变量。例如，delete x; 语法是错误的。</li>\n</ul><h5 id=\"严格模式下-this-指向问题\">严格模式下 this 指向问题<a href=\"#严格模式下-this-指向问题\" title=\"严格模式下 this 指向问题\"></a></h5><ol><li>严格模式下全局作用域中的函数this指向的是undefined；</li>\n<li>未开启严格模式构造函数时不加new也可以调用，当普通函数，this指向全局对象；<br>严格模式下，必须加new。如果不加new，会报错undefined。<br>给它赋值，会报错；</li>\n<li>new 实例化的构造函数指向创建的对象实例；</li>\n<li>定时器 this 还是指向 window ；</li>\n<li>事件、对象还是指向调用者。</li>\n</ol><h5 id=\"函数变化\">函数变化<a href=\"#函数变化\" title=\"函数变化\"></a></h5><ol><li>函数不能有重名的参数。</li>\n<li>函数必须声明在顶层。新版本的 JavaScript 会引入“块级作用域”（ES6中已引入）。为了与新版本接轨，不允许在非函数的代码块内声明函数。</li>\n</ol><p>更多严格模式要求参考：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode\" target=\"_blank\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode</a></p>\n<h3 id=\"高阶函数\">高阶函数<a href=\"#高阶函数\" title=\"高阶函数\"></a></h3><p>高阶函数是对其他函数进行操作的函数，它==接收函数作为参数==或==将函数作为返回值输出。==</p>\n<pre><code>&lt;!--接收函数作为参数--&gt;\n&lt;script&gt;\n    function fn(callback){\n      callback&amp;&amp;callback();\n    }\n    fn(function(){alert(&apos;hi&apos;)}\n&lt;/script&gt;\n\n&lt;!--将函数作为返回值输出--&gt;\n&lt;script&gt;\n    function fn(){\n        return function() {}\n    }\n     fn();\n&lt;/script&gt;</code></pre><h3 id=\"闭包\">闭包<a href=\"#闭包\" title=\"闭包\"></a></h3><h4 id=\"变量作用域\">变量作用域<a href=\"#变量作用域\" title=\"变量作用域\"></a></h4><p>变量根据作用域的不同分为两种：全局变量和局部变量。</p>\n<ol><li>函数内部可以使用全局变量。</li>\n<li>函数外部不可以使用局部变量。</li>\n<li>当函数执行完毕，本作用域内的局部变量会销毁。</li>\n</ol><h4 id=\"什么是闭包\">什么是闭包<a href=\"#什么是闭包\" title=\"什么是闭包\"></a></h4><blockquote>\n<p>闭包（closure）指有权访问另一个函数作用域中变量的函数。<br>—–  《JavaScript 高级程序设计》</p>\n</blockquote>\n<p>简单理解就是，一个作用域可以访问另外一个函数内部的局部变量。 </p>\n<h4 id=\"闭包的作用\">闭包的作用<a href=\"#闭包的作用\" title=\"闭包的作用\"></a></h4><p><strong>提问：我们怎么能在fn()函数外面访问fn()中的局部变量 num 呢</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"> function fn() &#123;　　　　</span><br><span class=\"line\">    var num &#x3D; 10;　　　　</span><br><span class=\"line\">    return function &#123;　　　　　　</span><br><span class=\"line\">         console.log(num); &#x2F;&#x2F; 10         　　　　</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  var f &#x3D; fn();</span><br><span class=\"line\">  f()</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n\n<pre><code>闭包作用：延伸变量的作用范围。</code></pre><p>内存泄漏：是指程序中己动态分配的堆内存由于某种原因程序未释放或无法释放，造成系统内存的浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。</p>\n<h3 id=\"递归\">递归<a href=\"#递归\" title=\"递归\"></a></h3><h4 id=\"什么是递归？\">什么是递归？<a href=\"#什么是递归？\" title=\"什么是递归？\"></a></h4><ul><li>如果==一个函数在内部可以调用其本身==，那么这个函数就是递归函数；</li>\n<li>简单理解:函数内部自己调用自己, 这个函数就是递归函数；</li>\n<li>递归函数的作用和循环效果一样；</li>\n<li>==由于递归很容易发生“栈溢出”错误（stack overflow），所以必须要加退出条件 return。==</li>\n</ul><h3 id=\"浅拷贝和深拷贝\">浅拷贝和深拷贝<a href=\"#浅拷贝和深拷贝\" title=\"浅拷贝和深拷贝\"></a></h3><ul><li>浅拷贝只是拷贝一层, 更深层次对象级别的只拷贝引用。<br>只是把地址拷贝了，被拷贝的数据修改，浅拷贝得到的也会被修改。</li>\n<li>深拷贝拷贝多层, 每一级别的数据都会拷贝.</li>\n</ul><h4 id=\"浅拷贝\">浅拷贝<a href=\"#浅拷贝\" title=\"浅拷贝\"></a></h4><pre><code>Object.assign(target, ...sources)     \n属于es6 新增方法，可以浅拷贝。</code></pre><h4 id=\"深拷贝\">深拷贝<a href=\"#深拷贝\" title=\"深拷贝\"></a></h4><p>这块的代码建议配合视频理解。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 深拷贝拷贝多层, 每一级别的数据都会拷贝.</span><br><span class=\"line\">    var obj &#x3D; &#123;</span><br><span class=\"line\">        id: 1,</span><br><span class=\"line\">        name: &#39;andy&#39;,</span><br><span class=\"line\">        msg: &#123;</span><br><span class=\"line\">            age: 18</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        color: [&#39;pink&#39;, &#39;red&#39;]</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    var o &#x3D; &#123;&#125;;</span><br><span class=\"line\">    &#x2F;&#x2F; 封装函数 </span><br><span class=\"line\">    function deepCopy(newobj, oldobj) &#123;</span><br><span class=\"line\">        for (var k in oldobj) &#123;</span><br><span class=\"line\">            &#x2F;&#x2F; 判断我们的属性值属于那种数据类型</span><br><span class=\"line\">            &#x2F;&#x2F; 1. 获取属性值  oldobj[k]</span><br><span class=\"line\">            var item &#x3D; oldobj[k];</span><br><span class=\"line\">            &#x2F;&#x2F; 2. 判断这个值是否是数组</span><br><span class=\"line\">            if (item instanceof Array) &#123;</span><br><span class=\"line\">                newobj[k] &#x3D; [];</span><br><span class=\"line\">                deepCopy(newobj[k], item)</span><br><span class=\"line\">            &#125; else if (item instanceof Object) &#123;</span><br><span class=\"line\">                &#x2F;&#x2F; 3. 判断这个值是否是对象</span><br><span class=\"line\">                newobj[k] &#x3D; &#123;&#125;;</span><br><span class=\"line\">                deepCopy(newobj[k], item)</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                &#x2F;&#x2F; 4. 属于简单数据类型</span><br><span class=\"line\">                newobj[k] &#x3D; item;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    deepCopy(o, obj);</span><br><span class=\"line\">    console.log(o);</span><br><span class=\"line\"></span><br><span class=\"line\">    var arr &#x3D; [];</span><br><span class=\"line\">    console.log(arr instanceof Object);</span><br><span class=\"line\">    o.msg.age &#x3D; 20;</span><br><span class=\"line\">    console.log(obj);</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n<p>其余深拷贝操作可以参照以下链接的内容及其评论。</p>\n<blockquote>\n<p><a href=\"https://www.cnblogs.com/renbo/p/9563050.html\" target=\"_blank\">https://www.cnblogs.com/renbo/p/9563050.html</a></p>\n</blockquote>\n<h2 id=\"正则表达式\">正则表达式<a href=\"#正则表达式\" title=\"正则表达式\"></a></h2><p>因之前接触过正则表达式，个人觉得用时百度就可以了，视频讲的内容理解就够了。</p>\n<h3 id=\"特点\">特点<a href=\"#特点\" title=\"特点\"></a></h3><pre><code>1. 灵活性、逻辑性和功能性非常的强。\n2. 可以迅速地用极简单的方式达到字符串的复杂控制。\n3. 对于刚接触的人来说，比较晦涩难懂。比如验证邮箱：\n^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$\n4. 实际开发,一般都是直接复制写好的正则表达式。 \n但是要求会使用正则表达式并且根据实际情况修改正则\n表达式。比如用户名:  /^[a-z0-9_-]{3,16}$/ </code></pre><h3 id=\"创建正则表达式\">创建正则表达式<a href=\"#创建正则表达式\" title=\"创建正则表达式\"></a></h3><p>在 JavaScript 中，可以通过两种方式创建一个正则表达式。</p>\n<p><strong>1. 通过调用 RegExp 对象的构造函数创建</strong></p>\n<pre><code>var 变量名 = new RegExp(/表达式/); </code></pre><p><strong>2. 通过字面量创建</strong></p>\n<pre><code>var 变量名 = /表达式/; </code></pre><p>以上    // 注释中间放表达式就是正则字面量，更推荐使用第二种</p>\n<h3 id=\"测试正则表达式-test\">测试正则表达式 test<a href=\"#测试正则表达式-test\" title=\"测试正则表达式 test\"></a></h3><p>test() 正则对象方法，用于检测字符串是否符合该规则，该对象会返回 true 或 false，其参数是测试字符串。</p>\n<pre><code>regexObj.test(str) \n\nregexObj 是写的正则表达式\nstr 我们要测试的文本\n就是检测str文本是否符合我们写的正则表达式规范.</code></pre><h3 id=\"正则表达式的组成\">正则表达式的组成<a href=\"#正则表达式的组成\" title=\"正则表达式的组成\"></a></h3><p>一个正则表达式可以由简单的字符构成，比如 /abc/，也可以是简单和特殊字符的组合，比如 /ab*c/ 。其中特殊字符也被称为元字符，在正则表达式中是具有特殊意义的专用符号，如 ^ 、$ 、+ 等。</p>\n<p>特殊字符非常多，可以参考：      </p>\n<ul><li>MDN：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions\" target=\"_blank\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions</a></li>\n<li>jQuery 手册：正则表达式部分</li>\n<li>正则测试工具: <a href=\"http://tool.oschina.net/regex\" target=\"_blank\">http://tool.oschina.net/regex</a></li>\n</ul><h4 id=\"边界符\">边界符<a href=\"#边界符\" title=\"边界符\"></a></h4><p>正则表达式中的边界符（位置符）用来提示字符所处的位置，主要有两个字符。</p>\n<div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th>边界符</th><th>说明</th></tr>\n</thead><tbody><tr>\n<td>^</td><td>表示匹配行首的文本（以谁开始）</td></tr>\n<tr>\n<td>$</td><td>表示匹配行尾的文本（以谁结束）</td></tr>\n</tbody></table></div></div><p><strong>如果 ^ 和 $ 在一起，表示必须是精确匹配。</strong></p>\n<h4 id=\"字符类\">字符类<a href=\"#字符类\" title=\"字符类\"></a></h4><p>字符类表示有一系列字符可供选择，只要匹配其中一个就可以了。所有可供选择的字符都放在方括号内。</p>\n<h5 id=\"1---方括号\">1. []  方括号<a href=\"#1---方括号\" title=\"1. []  方括号\"></a></h5><pre><code>多选一\n\n/[abc]/.test(&apos;andy&apos;)     // true\n\n字符串只要包含 abc 中任意一个字符都会返回 true 。\n\n\n/^[abc]$/.test(&apos;andy&apos;)     // true\n\n三选一 只有是a 或者是 b  或者是c 这三个字母才返回 true</code></pre><h5 id=\"2----方括号内部-范围符--\">2. [-]  方括号内部 范围符 -<a href=\"#2----方括号内部-范围符--\" title=\"2. [-]  方括号内部 范围符 -\"></a></h5><pre><code>var reg = /^[a-z]$/; //\n\n26个英文字母任何一个字母返回 true  - 表示的是a 到z 的范围  \n\n方括号内部加上 - 表示范围，这里表示 a 到 z 26个英文字母都可以。</code></pre><h4 id=\"3-字符组合\">3. 字符组合<a href=\"#3-字符组合\" title=\"3. 字符组合\"></a></h4><pre><code>var reg = /^[a-zA-Z0-9_-]$/; \n\n26个英文字母(大写和小写都可以)任何一个字母返回 true  </code></pre><h4 id=\"4---方括号内部-取反符\">4. [^]  方括号内部 取反符^<a href=\"#4---方括号内部-取反符\" title=\"4. [^]  方括号内部 取反符^\"></a></h4><pre><code>如果中括号里面有^ 表示取反的意思 不要与 边界符 ^ 混淆\n\nvar reg = /^[^a-zA-Z0-9_-]$/;</code></pre><h3 id=\"量词符\">量词符<a href=\"#量词符\" title=\"量词符\"></a></h3><p>量词符用来设定某个模式出现的次数。</p>\n<div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th>header 1</th><th>header 2</th></tr>\n</thead><tbody><tr>\n<td>*</td><td>重复 0 次 或者 更多次</td></tr>\n<tr>\n<td>+</td><td>重复一次 或者 更多次</td></tr>\n<tr>\n<td>?</td><td>重复 0 次 或 一次</td></tr>\n<tr>\n<td>{n}</td><td>重复 n 次</td></tr>\n<tr>\n<td>{n,}</td><td>重复 n 次 或者 更多次</td></tr>\n<tr>\n<td>{n,m}</td><td>重复 n 次 到 m 次</td></tr>\n</tbody></table></div></div><h3 id=\"括号总结\">括号总结<a href=\"#括号总结\" title=\"括号总结\"></a></h3><div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th>符号</th><th>属性</th><th>意义</th></tr>\n</thead><tbody><tr>\n<td>大括号</td><td>量词符。</td><td>里面表示重复次数</td></tr>\n<tr>\n<td>中括号</td><td>字符集合。</td><td>匹配方括号中的任意字符.</td></tr>\n<tr>\n<td>小括号</td><td></td><td>表示优先级。</td></tr>\n</tbody></table></div></div><pre><code>中括号：字符集合。匹配方括号中的任意字符。\n\nvar reg = /^[abc]$/;\n&lt;!--a 也可以 b 也可以 c 可以  a ||b || c--&gt;\n\n\n\n大括号：量词符。里面表示重复次数。\n\nvar reg = /^abc{3}$/; \n&lt;!--它只是让c重复三次   abccc--&gt;\n\n\n小括号：表示优先级。\n\nvar reg = /^(abc){3}$/; \n&lt;!--它是让abcc重复三次--&gt;</code></pre><h3 id=\"replace替换\">replace替换<a href=\"#replace替换\" title=\"replace替换\"></a></h3><pre><code>str.replace(regexp|substr, newSubStr|function)</code></pre><div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th>参数</th><th>定义</th></tr>\n</thead><tbody><tr>\n<td>regexp (pattern)</td><td>一个RegExp对象或者其字面量。该正则所匹配的内容会被第二个参数的返回值替换掉。</td></tr>\n<tr>\n<td>substr (pattern)</td><td>一个将被 newSubStr替换的 字符串。其被视为一整个字符串，而不是一个正则表达式。仅第一个匹配项会被替换。</td></tr>\n<tr>\n<td>newSubStr (replacement)</td><td>用于替换掉第一个参数在原字符串中的匹配部分的字符串。该字符串中可以内插一些特殊的变量名。参考下面的使用字符串作为参数。</td></tr>\n<tr>\n<td>function (replacement)</td><td>一个用来创建新子字符串的函数，该函数的返回值将替换掉第一个参数匹配到的结果。</td></tr>\n</tbody></table></div></div><h3 id=\"正则表达式参数\">正则表达式参数<a href=\"#正则表达式参数\" title=\"正则表达式参数\"></a></h3><pre><code>/表达式/[switch]</code></pre><p>switch（也称修饰符）：按照什么样的模式来匹配，有三种值：        </p>\n<ul><li>g：全局匹配</li>\n<li>i：忽略大小写</li>\n<li>gi：全局匹配+忽略大小写</li>\n</ul><pre><code>用多个敏感词使用 “ | ”  \n例如：/第一个|第二个/</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;textarea name&#x3D;&quot;&quot; id&#x3D;&quot;&quot; cols&#x3D;&quot;30&quot; rows&#x3D;&quot;10&quot;&gt;&lt;&#x2F;textarea&gt;</span><br><span class=\"line\">    &lt;button&gt;submit&lt;&#x2F;button&gt;</span><br><span class=\"line\">    &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F;替换 replace</span><br><span class=\"line\">    &#x2F;&#x2F; var str&#x3D;&quot;andy和red&quot;</span><br><span class=\"line\">    &#x2F;&#x2F; var newStr&#x3D;str.replace(&quot;andy&quot;,&quot;baby&quot;)</span><br><span class=\"line\">    &#x2F;&#x2F; console.log(newStr)</span><br><span class=\"line\">    var text &#x3D; document.querySelector(&quot;textarea&quot;)</span><br><span class=\"line\">    var btn &#x3D; document.querySelector(&quot;button&quot;)</span><br><span class=\"line\">    var div &#x3D; document.querySelector(&#39;div&#39;)</span><br><span class=\"line\">    btn.onclick &#x3D; function () &#123;</span><br><span class=\"line\">        div.innerHTML &#x3D; text.value.replace(&#x2F;激情|嗯哼&#x2F;g, &#39;**&#39;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>","prev":{"title":"restful API","link":"2019/11/10/note/restfulAPI"},"next":{"title":"ES6 bilibili（92集之后）","link":"2019/10/13/note/ES6 bilibili（92集之后）"},"plink":"https://www.hansomezao.com/2019/10/18/note/ES6 bilibili（92集之前）/","toc":[{"id":"面向过程编程","title":"面向过程编程","index":"1"},{"id":"面向对象编程","title":"面向对象编程","index":"2","children":[{"id":"面向对象的特性","title":"面向对象的特性","index":"2.1"},{"id":"面向过程与面向对象的优缺点","title":"面向过程与面向对象的优缺点","index":"2.2"}]},{"id":"es6中的类和对象","title":"ES6中的类和对象","index":"3","children":[{"id":"面向对象-1","title":"面向对象","index":"3.1"},{"id":"对象","title":"对象","index":"3.2"},{"id":"类class","title":"类class","index":"3.3"},{"id":"类-constructor-构造函数","title":"类 constructor 构造函数","index":"3.4"},{"id":"类添加方法","title":"类添加方法","index":"3.5"}]},{"id":"类的继承","title":"类的继承","index":"4","children":[{"id":"super关键字","title":"super关键字","index":"4.1"},{"id":"使用类的注意事项","title":"使用类的注意事项","index":"4.2"}]},{"id":"构造函数","title":"构造函数","index":"5","children":[{"id":"new-在执行时会做四件事情","title":"new 在执行时会做四件事情","index":"5.1"},{"id":"成员","title":"成员","index":"5.2"},{"id":"构造函数的问题","title":"构造函数的问题","index":"5.3"},{"id":"构造函数原型-prototype","title":"构造函数原型 prototype","index":"5.4"},{"id":"对象原型--__-proto-__","title":"对象原型  __ proto __","index":"5.5"},{"id":"constructor--构造函数","title":"constructor  构造函数","index":"5.6"},{"id":"构造函数、实例、原型对象三者之间的关系","title":"构造函数、实例、原型对象三者之间的关系","index":"5.7"},{"id":"原型链","title":"原型链","index":"5.8"},{"id":"javascript-的成员查找机制规则","title":"JavaScript 的成员查找机制(规则)","index":"5.9"},{"id":"原型对象this指向","title":"原型对象this指向","index":"5.10"}]},{"id":"扩展内置对象","title":"扩展内置对象","index":"6"},{"id":"继承","title":"继承","index":"7","children":[{"id":"call","title":"call()","index":"7.1"},{"id":"借用构造函数继承父类型属性","title":"借用构造函数继承父类型属性","index":"7.2"},{"id":"类的本质","title":"类的本质","index":"7.3"}]},{"id":"es5新增方法","title":"ES5新增方法","index":"8","children":[{"id":"数组方法","title":"数组方法","index":"8.1"},{"id":"字符串方法","title":"字符串方法","index":"8.2"},{"id":"对象方法","title":"对象方法","index":"8.3"},{"id":"objectdefineproperty","title":"Object.defineProperty()","index":"8.4"}]},{"id":"函数进阶","title":"函数进阶","index":"9","children":[{"id":"函数的定义和调用","title":"函数的定义和调用","index":"9.1"},{"id":"this","title":"this","index":"9.2"},{"id":"严格模式","title":"严格模式","index":"9.3"},{"id":"高阶函数","title":"高阶函数","index":"9.4"},{"id":"闭包","title":"闭包","index":"9.5"},{"id":"递归","title":"递归","index":"9.6"},{"id":"浅拷贝和深拷贝","title":"浅拷贝和深拷贝","index":"9.7"}]},{"id":"正则表达式","title":"正则表达式","index":"10","children":[{"id":"特点","title":"特点","index":"10.1"},{"id":"创建正则表达式","title":"创建正则表达式","index":"10.2"},{"id":"测试正则表达式-test","title":"测试正则表达式 test","index":"10.3"},{"id":"正则表达式的组成","title":"正则表达式的组成","index":"10.4"},{"id":"量词符","title":"量词符","index":"10.5"},{"id":"括号总结","title":"括号总结","index":"10.6"},{"id":"replace替换","title":"replace替换","index":"10.7"},{"id":"正则表达式参数","title":"正则表达式参数","index":"10.8"}]}]}