{"title":"03.React源码学习-FiberRoot与Fiber","date":"2019-11-27T09:24:29.000Z","date_formatted":{"ll":"2019年11月27日","L":"2019/11/27","MM-DD":"11-27"},"author":"zao","link":"2019/11/27/note/03-React源码学习-FiberRoot与Fiber","tags":["react源码"],"categories":["note"],"updated":"2019-11-27T09:24:29.000Z","content":"<h2 id=\"react中的数据结构\"><em>React中的数据结构</em><a href=\"#react中的数据结构\" title=\"React中的数据结构\"></a></h2><h3 id=\"fiberroot\">FiberRoot<a href=\"#fiberroot\" title=\"FiberRoot\"></a></h3><p>什么是 FiberRoot？</p>\n<ul><li>整个应用的起点</li>\n<li>包含应用挂载的目标节点</li>\n<li>记录整个应用更新过程的各种信息</li>\n</ul><p>结构如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type BaseFiberRootProperties &#x3D; &#123;|</span><br><span class=\"line\">    &#x2F;&#x2F; root节点，render方法接收的第二个参数</span><br><span class=\"line\">  containerInfo: any,</span><br><span class=\"line\">    &#x2F;&#x2F; 只有在持久更新中会用到，也就是不支持增量更新的平台，react-dom不会用到</span><br><span class=\"line\">  pendingChildren: any,</span><br><span class=\"line\">    &#x2F;&#x2F; 当前应用对应的Fiber对象，是Root Fiber</span><br><span class=\"line\">  current: Fiber,</span><br><span class=\"line\">    &#x2F;&#x2F; 一下的优先级是用来区分</span><br><span class=\"line\">    &#x2F;&#x2F; 1) 没有提交(committed)的任务</span><br><span class=\"line\">    &#x2F;&#x2F; 2) 没有提交的挂起任务</span><br><span class=\"line\">    &#x2F;&#x2F; 3) 没有提交的可能被挂起的任务</span><br><span class=\"line\">    &#x2F;&#x2F; 我们选择不追踪每个单独的阻塞登记，为了兼顾性能</span><br><span class=\"line\">    &#x2F;&#x2F; The earliest and latest priority levels that are suspended from committing.</span><br><span class=\"line\">    &#x2F;&#x2F; 最老和新的在提交的时候被挂起的任务</span><br><span class=\"line\">  earliestSuspendedTime: ExpirationTime,</span><br><span class=\"line\">  latestSuspendedTime: ExpirationTime,</span><br><span class=\"line\">    &#x2F;&#x2F; The earliest and latest priority levels that are not known to be suspended.</span><br><span class=\"line\">    &#x2F;&#x2F; 最老和最新的不确定是否会挂起的优先级（所有任务进来一开始都是这个状态）</span><br><span class=\"line\">  earliestPendingTime: ExpirationTime,</span><br><span class=\"line\">  latestPendingTime: ExpirationTime,</span><br><span class=\"line\">    &#x2F;&#x2F; The latest priority level that was pinged by a resolved promise and can</span><br><span class=\"line\">    &#x2F;&#x2F; be retried.</span><br><span class=\"line\">    &#x2F;&#x2F; 最新的通过一个promise被reslove并且可以重新尝试的优先级</span><br><span class=\"line\">  latestPingedTime: ExpirationTime,</span><br><span class=\"line\">    &#x2F;&#x2F; 如果有错误被抛出并且没有更多的更新存在，我们尝试在处理错误前同步重新从头渲染</span><br><span class=\"line\">    &#x2F;&#x2F; 在&#96;renderRoot&#96;出现无法处理的错误时会被设置为&#96;true&#96;</span><br><span class=\"line\">  didError: boolean,</span><br><span class=\"line\">    &#x2F;&#x2F; 正在等待提交的任务的&#96;expirationTime&#96;</span><br><span class=\"line\">  pendingCommitExpirationTime: ExpirationTime,</span><br><span class=\"line\">    &#x2F;&#x2F; 已经完成的任务的FiberRoot对象，如果你只有一个Root，那他永远只可能是这个Root对应的Fiber，或者是null</span><br><span class=\"line\">    &#x2F;&#x2F; 在commit阶段只会处理这个值对应的任务</span><br><span class=\"line\">  finishedWork: Fiber | null,</span><br><span class=\"line\">    &#x2F;&#x2F; 在任务被挂起的时候通过setTimeout设置的返回内容，用来下一次如果有新的任务挂起时清理还没触发的timeout</span><br><span class=\"line\">  timeoutHandle: TimeoutHandle | NoTimeout,</span><br><span class=\"line\">    &#x2F;&#x2F; 顶层context对象，只有主动调用&#96;renderSubtreeIntoContainer&#96;时才会有用</span><br><span class=\"line\">  context: Object | null,</span><br><span class=\"line\">  pendingContext: Object | null,</span><br><span class=\"line\">    &#x2F;&#x2F; 用来确定第一次渲染的时候是否需要融合</span><br><span class=\"line\">  +hydrate: boolean,</span><br><span class=\"line\">    &#x2F;&#x2F; 当前root上剩余的过期时间</span><br><span class=\"line\">    &#x2F;&#x2F; TODO: 提到renderer里面区处理</span><br><span class=\"line\">  nextExpirationTimeToWorkOn: ExpirationTime,</span><br><span class=\"line\">    &#x2F;&#x2F; 当前更新对应的过期时间</span><br><span class=\"line\">  expirationTime: ExpirationTime,</span><br><span class=\"line\">    &#x2F;&#x2F; List of top-level batches. This list indicates whether a commit should be</span><br><span class=\"line\">    &#x2F;&#x2F; deferred. Also contains completion callbacks.</span><br><span class=\"line\">    &#x2F;&#x2F; TODO: Lift this into the renderer</span><br><span class=\"line\">    &#x2F;&#x2F; 顶层批次（批处理任务？）这个变量指明一个commit是否应该被推迟</span><br><span class=\"line\">    &#x2F;&#x2F; 同时包括完成之后的回调</span><br><span class=\"line\">    &#x2F;&#x2F; 貌似用在测试的时候？</span><br><span class=\"line\">  firstBatch: Batch | null,</span><br><span class=\"line\">    &#x2F;&#x2F; root之间关联的链表结构</span><br><span class=\"line\">  nextScheduledRoot: FiberRoot | null,</span><br><span class=\"line\">|&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"fiber\">Fiber<a href=\"#fiber\" title=\"Fiber\"></a></h3><p>什么是Fiber？</p>\n<ul><li>每一个ReactElement对应一个Fiber对象</li>\n<li>记录节点的各种状态</li>\n<li>串联整个应用形成树结构</li>\n</ul><p>结构如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; Fiber对应一个组件需要被处理或者已经处理了，一个组件可以有一个或者多个Fiber</span><br><span class=\"line\">type Fiber &#x3D; &#123;|</span><br><span class=\"line\">    &#x2F;&#x2F; 标记不同的组件类型</span><br><span class=\"line\">  tag: WorkTag,</span><br><span class=\"line\">    &#x2F;&#x2F; ReactElement里面的key</span><br><span class=\"line\">  key: null | string,</span><br><span class=\"line\">    &#x2F;&#x2F; ReactElement.type，也就是我们调用&#96;createElement&#96;的第一个参数</span><br><span class=\"line\">  elementType: any,</span><br><span class=\"line\">    &#x2F;&#x2F; The resolved function&#x2F;class&#x2F; associated with this fiber.</span><br><span class=\"line\">    &#x2F;&#x2F; 异步组件resolved之后返回的内容，一般是&#96;function&#96;或者&#96;class&#96;</span><br><span class=\"line\">  type: any,</span><br><span class=\"line\">    &#x2F;&#x2F; The local state associated with this fiber.</span><br><span class=\"line\">    &#x2F;&#x2F; 跟当前Fiber相关本地状态（比如浏览器环境就是DOM节点）</span><br><span class=\"line\">  stateNode: any,</span><br><span class=\"line\">    &#x2F;&#x2F; 指向他在Fiber节点树中的&#96;parent&#96;，用来在处理完这个节点之后向上返回</span><br><span class=\"line\">  return: Fiber | null,</span><br><span class=\"line\">    &#x2F;&#x2F; 单链表树结构</span><br><span class=\"line\">    &#x2F;&#x2F; 指向自己的第一个子节点</span><br><span class=\"line\">  child: Fiber | null,</span><br><span class=\"line\">    &#x2F;&#x2F; 指向自己的兄弟结构</span><br><span class=\"line\">    &#x2F;&#x2F; 兄弟节点的return指向同一个父节点</span><br><span class=\"line\">  sibling: Fiber | null,</span><br><span class=\"line\">  index: number,</span><br><span class=\"line\">    &#x2F;&#x2F; ref属性</span><br><span class=\"line\">  ref: null | (((handle: mixed) &#x3D;&gt; void) &amp; &#123;_stringRef: ?string&#125;) | RefObject,</span><br><span class=\"line\">    &#x2F;&#x2F; 新的变动带来的新的props</span><br><span class=\"line\">  pendingProps: any, </span><br><span class=\"line\">    &#x2F;&#x2F; 上一次渲染完成之后的props</span><br><span class=\"line\">  memoizedProps: any,</span><br><span class=\"line\">    &#x2F;&#x2F; 该Fiber对应的组件产生的Update会存放在这个队列里面</span><br><span class=\"line\">  updateQueue: UpdateQueue&lt;any&gt; | null,</span><br><span class=\"line\">    &#x2F;&#x2F; 上一次渲染的时候的state</span><br><span class=\"line\">  memoizedState: any,</span><br><span class=\"line\">    &#x2F;&#x2F; 一个列表，存放这个Fiber依赖的context</span><br><span class=\"line\">  firstContextDependency: ContextDependency&lt;mixed&gt; | null,</span><br><span class=\"line\">    &#x2F;&#x2F; 用来描述当前Fiber和他子树的&#96;Bitfield&#96;</span><br><span class=\"line\">    &#x2F;&#x2F; 共存的模式表示这个子树是否默认是异步渲染的</span><br><span class=\"line\">    &#x2F;&#x2F; Fiber被创建的时候他会继承父Fiber</span><br><span class=\"line\">    &#x2F;&#x2F; 其他的标识也可以在创建的时候被设置</span><br><span class=\"line\">    &#x2F;&#x2F; 但是在创建之后不应该再被修改，特别是他的子Fiber创建之前</span><br><span class=\"line\">  mode: TypeOfMode,</span><br><span class=\"line\">    &#x2F;&#x2F; Effect</span><br><span class=\"line\">    &#x2F;&#x2F; 用来记录Side Effect</span><br><span class=\"line\">  effectTag: SideEffectTag,</span><br><span class=\"line\">    &#x2F;&#x2F; 单链表用来快速查找下一个side effect</span><br><span class=\"line\">  nextEffect: Fiber | null,</span><br><span class=\"line\">    &#x2F;&#x2F; 子树中第一个side effect</span><br><span class=\"line\">  firstEffect: Fiber | null,</span><br><span class=\"line\">    &#x2F;&#x2F; 子树中最后一个side effect</span><br><span class=\"line\">  lastEffect: Fiber | null,</span><br><span class=\"line\">    &#x2F;&#x2F; 代表任务在未来的哪个时间点应该被完成</span><br><span class=\"line\">    &#x2F;&#x2F; 不包括他的子树产生的任务</span><br><span class=\"line\">  expirationTime: ExpirationTime,</span><br><span class=\"line\">    &#x2F;&#x2F; 快速确定子树中是否有不在等待的变化</span><br><span class=\"line\">  childExpirationTime: ExpirationTime,</span><br><span class=\"line\">    &#x2F;&#x2F; 在Fiber树更新的过程中，每个Fiber都会有一个跟其对应的Fiber</span><br><span class=\"line\">    &#x2F;&#x2F; 我们称他为&#96;current &lt;&#x3D;&#x3D;&gt; workInProgress&#96;</span><br><span class=\"line\">    &#x2F;&#x2F; 在渲染完成之后他们会交换位置</span><br><span class=\"line\">  alternate: Fiber | null,</span><br><span class=\"line\">    &#x2F;&#x2F; 下面是调试相关的，收集每个Fiber和子树渲染时间的</span><br><span class=\"line\">  actualDuration?: number,</span><br><span class=\"line\">    &#x2F;&#x2F; If the Fiber is currently active in the &quot;render&quot; phase,</span><br><span class=\"line\">    &#x2F;&#x2F; This marks the time at which the work began.</span><br><span class=\"line\">    &#x2F;&#x2F; This field is only set when the enableProfilerTimer flag is enabled.</span><br><span class=\"line\">  actualStartTime?: number,</span><br><span class=\"line\">    &#x2F;&#x2F; Duration of the most recent render time for this Fiber.</span><br><span class=\"line\">    &#x2F;&#x2F; This value is not updated when we bailout for memoization purposes.</span><br><span class=\"line\">    &#x2F;&#x2F; This field is only set when the enableProfilerTimer flag is enabled.</span><br><span class=\"line\">  selfBaseDuration?: number,</span><br><span class=\"line\">    &#x2F;&#x2F; Sum of base times for all descedents of this Fiber.</span><br><span class=\"line\">    &#x2F;&#x2F; This value bubbles up during the &quot;complete&quot; phase.</span><br><span class=\"line\">    &#x2F;&#x2F; This field is only set when the enableProfilerTimer flag is enabled.</span><br><span class=\"line\">  treeBaseDuration?: number,</span><br><span class=\"line\">    &#x2F;&#x2F; Conceptual aliases</span><br><span class=\"line\">    &#x2F;&#x2F; workInProgress : Fiber -&gt;  alternate The alternate used for reuse happens</span><br><span class=\"line\">    &#x2F;&#x2F; to be the same as work in progress.</span><br><span class=\"line\">    &#x2F;&#x2F; __DEV__ only</span><br><span class=\"line\">  _debugID?: number,</span><br><span class=\"line\">  _debugSource?: Source | null,</span><br><span class=\"line\">  _debugOwner?: Fiber | null,</span><br><span class=\"line\">  _debugIsCurrentlyTiming?: boolean,</span><br><span class=\"line\">|&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"来看看fiber是如何串联节点的：\">来看看Fiber是如何串联节点的：<a href=\"#来看看fiber是如何串联节点的：\" title=\"来看看Fiber是如何串联节点的：\"></a></h5><p>有如下节点结构：</p>\n<p><img src=\"https://s2.ax1x.com/2020/03/01/3gmZJH.png\" class=\"φcy\" alt=\"Event Loop\"></p>\n<p>被Fiber处理成能高效遍历的树形结构后：</p>\n<p><img src=\"https://s2.ax1x.com/2020/03/01/3gmMOP.jpg\" class=\"φcy\" alt=\"Event Loop\"></p>\n","prev":{"title":"04.React源码学习-update","link":"2019/11/28/note/04-React源码学习-update"},"next":{"title":"02.React源码学习-component","link":"2019/11/26/note/02-React源码学习-component"},"plink":"https://www.hansomezao.com/2019/11/27/note/03-React源码学习-FiberRoot与Fiber/","toc":[{"id":"react中的数据结构","title":"React中的数据结构","index":"1","children":[{"id":"fiberroot","title":"FiberRoot","index":"1.1"},{"id":"fiber","title":"Fiber","index":"1.2"}]}]}