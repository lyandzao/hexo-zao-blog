{"title":"正则表达式","date":"2019-11-20T08:40:03.000Z","date_formatted":{"ll":"2019年11月20日","L":"2019/11/20","MM-DD":"11-20"},"author":"zao","link":"2019/11/20/note/正则表达式","tags":["正则"],"categories":["note"],"updated":"2019-11-20T08:40:03.000Z","content":"<h2 id=\"第一部分-基础知识\">第一部分 基础知识<a href=\"#第一部分-基础知识\" title=\"第一部分 基础知识\"></a></h2><h3 id=\"一、正则申明方式\">一、正则申明方式<a href=\"#一、正则申明方式\" title=\"一、正则申明方式\"></a></h3><h4 id=\"1、构造函数方式\">1、构造函数方式<a href=\"#1、构造函数方式\" title=\"1、构造函数方式\"></a></h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'\\d'</span>, <span class=\"string\">'gi'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>● 通过 new 构造一个正则表达式对象，其中第一个参数 ‘\\d’ 是正则内容，第二个参数 ‘gi’ 是修饰符。两个参数皆为字符串类型</p>\n<p>● 修饰符的作用是对匹配过程进行限定</p>\n<p>● 修饰符有三种：i, g, m，可以同时出现，没有顺序（即 gi 与 ig 一样），请参考下方说明</p>\n<div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th>修饰符</th><th>说明</th></tr>\n</thead><tbody><tr>\n<td>i</td><td>忽略大小写匹配</td></tr>\n<tr>\n<td>g</td><td>全局匹配，即是匹配一个后继续匹配，直到结束</td></tr>\n<tr>\n<td>m</td><td>多行匹配，即是遇到换行后不停止匹配，直到结束</td></tr>\n</tbody></table></div></div><p><strong>说明</strong>：<br> ● [a-z] 表示从小写字母a到小写字母z之间的任意字符(含a和z)，下文会有详细说明<br> ● + 表示至少出现一次<br> ● \\n 在js中表示换行<br> ● ^[a-z] 表示以任意小写字母开头的行</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'aBcd efg'</span>.match(<span class=\"regexp\">/[a-z]+/</span>);</span><br><span class=\"line\"><span class=\"comment\">// [\"a\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'aBcd efg'</span>.match(<span class=\"regexp\">/[a-z]+/i</span>);</span><br><span class=\"line\"><span class=\"comment\">// [\"aBcd\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'aBcd efg'</span>.match(<span class=\"regexp\">/[a-z]+/g</span>);</span><br><span class=\"line\"><span class=\"comment\">// [\"a\", \"cd\", \"efg\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'aBcd efg'</span>.match(<span class=\"regexp\">/[a-z]+/gi</span>);</span><br><span class=\"line\"><span class=\"comment\">// [\"aBcd\", \"efg\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'aB\\ncd\\n efg'</span>.match(<span class=\"regexp\">/^[a-z]+/m</span>);</span><br><span class=\"line\"><span class=\"comment\">// [\"a\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'aB\\ncd\\n efg'</span>.match(<span class=\"regexp\">/^[a-z]+/g</span>);</span><br><span class=\"line\"><span class=\"comment\">// [\"a\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'aB\\ncd\\n efg'</span>.match(<span class=\"regexp\">/^[a-z]+/gm</span>);</span><br><span class=\"line\"><span class=\"comment\">// [\"a\", \"cd\"]</span></span><br><span class=\"line\"><span class=\"comment\">// 注意不是 [\"a\", \"cd\", \"efg\"]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、字面量方式\">2、字面量方式<a href=\"#2、字面量方式\" title=\"2、字面量方式\"></a></h4><p>相比较上一种方式，这一种更为常见，上面示例也都使用了这种方式</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/\\d/gi</span>;</span><br></pre></td></tr></table></figure>\n\n<p>两个斜线内为正则的内容，后面可以跟修饰符，与第一种构造函数方式相比更简洁，缺点是正则内容不能拼接，对于大多数场景俩说足够了</p>\n<h3 id=\"二、正则相关符号\">二、正则相关符号<a href=\"#二、正则相关符号\" title=\"二、正则相关符号\"></a></h3><h4 id=\"1、方括号--用法\">1、方括号 [] 用法<a href=\"#1、方括号--用法\" title=\"1、方括号 [] 用法\"></a></h4><p>用于查找方括号内的任意字符：</p>\n<p><img src=\"https:////upload-images.jianshu.io/upload_images/15206437-b77f9d1199655f09?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\" class=\"φcy\" alt=\"img\"></p>\n<p>在这里插入图片描述</p>\n<p><strong>注意：</strong> 1）^ 在 [] 内开始位置及正则双斜线开始位置有特殊含义，其他位置表示 ^ 字符本身</p>\n<p>● // 正则开头位置表示以某某开头的字符串，如下表示以大写或小写字母开头的且连续为字母的字符串：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'adobe 2016'</span>.match(<span class=\"regexp\">/^[a-zA-Z]+/</span>);</span><br><span class=\"line\">/<span class=\"regexp\">/ [\"adobe\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>● 在正则 或 匹配中(即 | 匹配)，表示 或者以某某字符开始的字符串，如下表示匹配 连续数字 或 以小写字母开头且连续为小写字母的字符串，所以返回结果包含2016 和 adobe，注意返回结果不是 [“2016”, “adobe”]</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'adobe2016ps'</span>.match(<span class=\"regexp\">/\\d+|^[a-z]+/g</span>);</span><br><span class=\"line\">/<span class=\"regexp\">/ [\"adobe\", \"2016\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>● 在 [] 内开始位置时，表示不匹配 [] 内除 ^ 以外的所有字符：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'adobe'</span>.match(<span class=\"regexp\">/[^abc]/g</span>);</span><br><span class=\"line\">/<span class=\"regexp\">/ [\"d\", \"o\", \"e\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>注： $ 与 ^ 的前两个用法相似，只不过匹配的是以某某字符结尾的字符串，举例：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'adobe 2016'</span>.match(<span class=\"regexp\">/\\d+|[a-z]+$/g</span>);</span><br><span class=\"line\">/<span class=\"regexp\">/ [\"2016\"]</span></span><br><span class=\"line\"><span class=\"regexp\">'adobe'.match(/</span>\\d+<span class=\"params\">|[a-z]+$/g);</span></span><br><span class=\"line\"><span class=\"params\">// [\"adobe\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>2）- (连字符)表示左边字符的 ASCII 值到右边字符 ASCII 编码值之间及左右字符自身的所有字符</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'adobe PS 2016'</span>.match(<span class=\"regexp\">/[a-g]/g</span>);</span><br><span class=\"line\">/<span class=\"regexp\">/ [\"a\", \"d\", \"b\", \"e\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>3）- 连字符左侧的字符对应的 ASCII 值一定要小于或等于右侧的字符，否则会报语法错误</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'adobe'</span>.match(<span class=\"regexp\">/[z-a]/</span>);</span><br><span class=\"line\">/<span class=\"regexp\">/ Uncaught SyntaxError: Invalid regular expression: /</span>[z-a]/: Range out of order <span class=\"keyword\">in</span> character <span class=\"class\"><span class=\"keyword\">class</span>...</span></span><br></pre></td></tr></table></figure>\n\n<p>4）如果希望对连字符 - 本身进行匹配，需要用反斜线转义</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'adobe-2016'</span>.match(<span class=\"regexp\">/[a-g\\-]/g</span>);</span><br><span class=\"line\">/<span class=\"regexp\">/ [\"a\", \"d\", \"b\", \"e\", \"-\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>5）查看 ASCII 表就会发现，大写字母的 ASCII 值是小于小写字母的，因此下面用法会报语法错误</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'adobe-2016'</span>.match(<span class=\"regexp\">/[a-Z]/g</span>);</span><br><span class=\"line\"><span class=\"comment\">// Uncaught SyntaxError: Invalid regular expression: /[a-Z]/: Range out of order in character ...</span></span><br></pre></td></tr></table></figure>\n\n<p>那么问题来了，如果要表示所有字母，不区分大小写怎么办呢？其实有两种方式：<br> A、第一种是使用修饰符 i，前面提到过。举例：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'adobe-PS'</span>.match(<span class=\"regexp\">/[a-z]/gi</span>);</span><br><span class=\"line\">/<span class=\"regexp\">/ [\"a\", \"d\", \"o\", \"b\", \"e\", \"P\", \"S\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>B、第二种是在正则中明确指明大小写字母，举例：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'adobe-PS'</span>.match(<span class=\"regexp\">/[a-zA-Z]/g</span>);</span><br><span class=\"line\">/<span class=\"regexp\">/ [\"a\", \"d\", \"o\", \"b\", \"e\", \"P\", \"S\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>返回结果跟第一种一样。当然这个例子有些特殊：匹配了所有大小写字母。当只匹配部分大小写字母的时候只能使用第二种方式，在此就不做示例了，读者可以自己测试</p>\n<p>6）匹配大小字母不能写成 [A-z]，虽然不会报语法错误，但隐式的放大了匹配范围，查看 ASCII 会发现，在大写字母 Z 到小写字母 a 之间还有 [、 \\、 ]、 ^、 _、 ` 这6个字符，因此不能这么写。</p>\n<p>7）想必有同学会问， \\w 不也可以匹配字母么？是的，\\w 确实可以匹配字母，但跟上面说的一样,也隐式的放大了匹配范围，\\w 除了匹配大小字母外还匹配了数字和下划线，即 \\w 与 [A-Za-z0-9_] 等价，当然 A-Z、a-z、0-9(等价于\\d)、_这四组没顺序之分</p>\n<h4 id=\"2、特殊含义字符\">2、特殊含义字符<a href=\"#2、特殊含义字符\" title=\"2、特殊含义字符\"></a></h4><p>● . 匹配任意单个字符，除换行和结束符</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'1+0.2*2=1.4'</span>.match(<span class=\"regexp\">/.&#123;2&#125;/g</span>);</span><br><span class=\"line\">/<span class=\"regexp\">/ [\"1+\", \"0.\", \"2*\", \"2=\", \"1.\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>● \\w 匹配任意单词字符（数字、字母、下划线），等价于[A-Za-z0-9_]</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'ad34~!@$ps'</span>.match(<span class=\"regexp\">/\\w/g</span>);</span><br><span class=\"line\">/<span class=\"regexp\">/ [\"a\", \"d\", \"3\", \"4\", \"p\", \"s\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>● \\W 匹配任意单词字符，与\\w相反，等价于[^A-Za-z0-9_]</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'ad34~!@$ps'</span>.match(<span class=\"regexp\">/\\W/g</span>);</span><br><span class=\"line\">/<span class=\"regexp\">/ [\"~\", \"!\", \"@\", \"$\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>● \\d 匹配数字，等价于 [0-9]</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'ps6'</span>.match(<span class=\"regexp\">/\\d/g</span>);</span><br><span class=\"line\">/<span class=\"regexp\">/ [\"6\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>● \\D 匹配非数字，等价于 [0-9]</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'ps6'</span>.match(<span class=\"regexp\">/\\D/g</span>);</span><br><span class=\"line\">/<span class=\"regexp\">/ [\"p\", \"s\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>● \\s 匹配空白字符，主要有(\\n、\\f、\\r、\\t、\\v)，注意’a\\sb’中的\\s依然是字符s，所以’a\\sb’.match(/\\s/g)返回 null</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'adobe ps'</span>.match(<span class=\"regexp\">/\\s/g</span>);</span><br><span class=\"line\">/<span class=\"regexp\">/ [\" \"]</span></span><br></pre></td></tr></table></figure>\n\n<p>● \\S 匹配非空白字符，与\\s相反</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'adobe ps'</span>.match(<span class=\"regexp\">/\\S/g</span>);</span><br><span class=\"line\">/<span class=\"regexp\">/ [\"a\", \"d\", \"o\", \"b\", \"e\", \"p\", \"s\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>● \\b 匹配单词边界，注意连续的数字、字母或下划线组成的字符串会认为一个单词</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'adobe(2016) ps6.4'</span>.match(<span class=\"regexp\">/\\b(\\w+)/g</span>);</span><br><span class=\"line\">/<span class=\"regexp\">/ [\"adobe\", \"2016\", \"ps6\", \"4\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>● \\B 匹配非单词边界，仔细体会下面的示例与\\b的结果</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'adobe(2016) ps6.4'</span>.match(<span class=\"regexp\">/\\B(\\w+)/g</span>);</span><br><span class=\"line\">/<span class=\"regexp\">/ [\"dobe\", \"016\", \"s6\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>● \\0 匹配NUL字符</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'\\0'</span>.match(<span class=\"regexp\">/\\0/</span>);</span><br><span class=\"line\">/<span class=\"regexp\">/ [\"NUL\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>● \\n 匹配换行符（编码：10，newline）</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'adobe\\nps'</span>.match(<span class=\"regexp\">/\\n/</span>).index;</span><br><span class=\"line\"><span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n\n<p>● \\f 匹配换页符</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'adobe\\fps'</span>.match(<span class=\"regexp\">/\\f/</span>).index;</span><br><span class=\"line\"><span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n\n<p>● \\r 匹配回车符（编码：13，return）</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'adobe\\rps'</span>.match(<span class=\"regexp\">/\\r/</span>).index;</span><br><span class=\"line\"><span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n\n<p>● \\t 匹配制表符，键盘tab对应的字符</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'adobe\\tps'</span>.match(<span class=\"regexp\">/\\t/</span>).index;</span><br><span class=\"line\"><span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n\n<p>● \\v 匹配垂直制表符</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'adobe\\vps'</span>.match(<span class=\"regexp\">/\\v/</span>).index;</span><br><span class=\"line\"><span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n\n<p>● \\xxx 匹配以八进制数xxx规定的字符</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'a'</span>.charCodeAt(<span class=\"number\">0</span>).toString(<span class=\"number\">8</span>);</span><br><span class=\"line\">/<span class=\"regexp\">/ \"141\"</span></span><br><span class=\"line\"><span class=\"regexp\">'adobe ps'.match(/</span>\\<span class=\"number\">141</span>/g);</span><br><span class=\"line\">/<span class=\"regexp\">/ [\"a\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>● \\xdd 匹配以十六进制数dd规定的字符</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'a'</span>.charCodeAt(<span class=\"number\">0</span>).toString(<span class=\"number\">16</span>);</span><br><span class=\"line\">/<span class=\"regexp\">/ \"61\"</span></span><br><span class=\"line\"><span class=\"regexp\">'adobe ps'.match(/</span>\\x61/g);</span><br><span class=\"line\">/<span class=\"regexp\">/ [\"a\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>● \\uxxxx 匹配以十六进制数xxxx规定的 Unicode字符，注意位数不够需要补0</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'a'</span>.charCodeAt(<span class=\"number\">0</span>).toString(<span class=\"number\">16</span>);</span><br><span class=\"line\">/<span class=\"regexp\">/ \"61\"</span></span><br><span class=\"line\"><span class=\"regexp\">'adobe ps'.match(/</span>\\u0061/g);</span><br><span class=\"line\">/<span class=\"regexp\">/ [\"a\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>注意：<br> window系统回车换行符为\\r\\n，linux系统下没有\\r，linux系统通过vi编辑器打开window系统的文本文件时候，经常在行尾出现^M符号，也就是\\r的原因，解析文本的时候需要注意相关判断。</p>\n<h4 id=\"3、量词说明\">3、量词说明<a href=\"#3、量词说明\" title=\"3、量词说明\"></a></h4><p>● n+ 匹配包含至少一个n的字符串</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'adobe paas'</span>.match(<span class=\"regexp\">/a+\\w+/g</span>);</span><br><span class=\"line\">/<span class=\"regexp\">/ [\"adobe\", \"aas\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>● n* 匹配包含零个或多个n的字符串</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'ab3 aa12bb'</span>.match(<span class=\"regexp\">/a*\\d+/g</span>);</span><br><span class=\"line\">/<span class=\"regexp\">/ [\"3\", \"aa12\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>● n? 匹配包含零个或一个n的字符串</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'ab3 aa12bb'</span>.match(<span class=\"regexp\">/a?\\d+/g</span>);</span><br><span class=\"line\">/<span class=\"regexp\">/ [\"3\", \"a12\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>● n{x} 匹配包含连续x个n的字符串</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'ab3 aa12bb aaa34'</span>.match(<span class=\"regexp\">/a&#123;2&#125;\\d+/g</span>);</span><br><span class=\"line\">/<span class=\"regexp\">/ [\"aa12\", \"aa34\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>● n{x,y} 匹配包含至少连续x个且最多连续y个n的字符串</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'a3 aaa12bb aaaaaaa34'</span>.match(<span class=\"regexp\">/a&#123;2,4&#125;\\d+/g</span>);</span><br><span class=\"line\">/<span class=\"regexp\">/ [\"aaa12\", \"aaaa34\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>● n{x,} 匹配包含至少连续x个n的字符串</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'a3 aaa12bbaa4'</span>.match(<span class=\"regexp\">/a&#123;2,&#125;\\d+/g</span>);</span><br><span class=\"line\">/<span class=\"regexp\">/ [\"aaa12\", \"aa4\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>由上可知，以下 表达式1 与 表达式2 等价</p>\n<div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th>表达式1</th><th>表达式2</th></tr>\n</thead><tbody><tr>\n<td>n+</td><td>n{1,}</td></tr>\n<tr>\n<td>n*</td><td>n{0,}</td></tr>\n<tr>\n<td>n？</td><td>n{0,1}</td></tr>\n</tbody></table></div></div><h4 id=\"4、符号说明\">4、符号说明<a href=\"#4、符号说明\" title=\"4、符号说明\"></a></h4><p>符号 {}、、$、*、+、?、[]、[]、- 已经在前面介绍过，接下来看下其他特殊字符<br> ● a|b 匹配包含a或b的字符串</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'adobe ps13'</span>.match(<span class=\"regexp\">/([a-g]+l\\d+)/g</span>);</span><br><span class=\"line\">/<span class=\"regexp\">/ [\"ad\", \"be\", \"13\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>● / 字面量方式申明正则时的界定符</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'adobe'</span>.match(<span class=\"regexp\">/\\w+/</span>);</span><br><span class=\"line\">/<span class=\"regexp\">/ [\"adobe\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>● \\ 普通反斜线字符</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'a\\\\dobe'</span>.match(<span class=\"regexp\">/\\\\/</span>);</span><br><span class=\"line\"><span class=\"comment\">// [\"\\\"]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5、小括号--用法\">5、小括号 () 用法<a href=\"#5、小括号--用法\" title=\"5、小括号 () 用法\"></a></h4><p>正则在非全局(g)模式下，通过match方式，返回的数组第一个值整体匹配的字符串，其他值为通过括号分组匹配到的<br> 1）捕获用法<br> ● 表示对匹配的字符串进行分组</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'adobe cs9cs10, adobe cs11'</span>.match(<span class=\"regexp\">/([a-z]+\\d+)+/</span>);</span><br><span class=\"line\"><span class=\"comment\">// [\"cs9cs10\", \"cs10\"]</span></span><br><span class=\"line\"><span class=\"comment\">// 注意&#123;2,&#125;是对 括弧内的匹配 的描述</span></span><br></pre></td></tr></table></figure>\n\n<p>● 与|一起使用表示选择性</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"he is 12. she is 13. it's box\"</span>.match(<span class=\"regexp\">/(it|she|he)\\s+is/g</span>);</span><br><span class=\"line\">/<span class=\"regexp\">/ [\"he is\", \"she is\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>● 表示对匹配的字符串捕获</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'adobe cs9'</span>.match(<span class=\"regexp\">/[a-z]+\\d+/</span>);</span><br><span class=\"line\">/<span class=\"regexp\">/ [\"cs9\"]</span></span><br><span class=\"line\"><span class=\"regexp\">'adobe cs9'.match(/</span>[a-z]+(\\d+)/);</span><br><span class=\"line\">/<span class=\"regexp\">/ [\"cs9\", \"9\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>● 表示对匹配的字符串反向引用，引用从 \\1 开始，从正则左侧第一个左括号（当然要是闭合的括号才行）开始计算，每多一对括号，引用数加一，在非捕获情况下不会加一。但正则比较复杂时，减少引用可以提升匹配性能，关于 非捕获 下方会详细介绍<br> 引用的结果可以通过 构造函数 RegExp 获取，即 RegExp.<img src=\"https://math.jianshu.com/math?formula=1%E4%B8%80%E7%9B%B4%E5%88%B0%20RegExp.\" alt=\"1一直到 RegExp.\">9</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">'Can</span> you can a can <span class=\"keyword\">as</span> a canner can can a can?'.<span class=\"keyword\">match</span>(/([cC]an+)\\s+\\<span class=\"number\">1</span>/g);</span><br><span class=\"line\"><span class=\"comment\">// [\"can can\"]</span></span><br><span class=\"line\"><span class=\"comment\">// 注意 `\\1` 等价于正则里的 `([a-z]+)`，即与下面示例相同</span></span><br><span class=\"line\"><span class=\"symbol\">'Can</span> you can a can <span class=\"keyword\">as</span> a canner can can a can?'.<span class=\"keyword\">match</span>(/[cC]an+\\s+[cC]an+/g);</span><br><span class=\"line\"><span class=\"comment\">// [\"can can\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果把括弧去掉可以看下结果</span></span><br><span class=\"line\"><span class=\"symbol\">'Can</span> you can a can <span class=\"keyword\">as</span> a canner can can a can?'.<span class=\"keyword\">match</span>(/[cC]an+\\s+\\<span class=\"number\">1</span>/g);</span><br><span class=\"line\"><span class=\"comment\">// null</span></span><br></pre></td></tr></table></figure>\n\n<p>2）非捕获用法，以(?)形式出现<br> ● (?:n ) 表示非捕获组</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 不使用括号时</span></span><br><span class=\"line\"><span class=\"string\">'adobe12ps15test'</span>.match(<span class=\"regexp\">/[a-z]+\\d+[a-z]+/</span>);</span><br><span class=\"line\"><span class=\"comment\">// [\"adobe12ps\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>// 使用括号分组</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'adobe12ps15test'</span>.match(<span class=\"regexp\">/[a-z]+(\\d+)([a-z]+)/</span>);</span><br><span class=\"line\">/<span class=\"regexp\">/ [\"adobe12ps\", \"12\", \"ps\"]</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">'adobe12ps15test'.match(/</span>[a-z]+(?<span class=\"symbol\">:</span>\\d+)([a-z]+)/);</span><br><span class=\"line\">/<span class=\"regexp\">/ [\"adobe12ps\", \"ps\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>// 看起来上面语句不用(?:)也可以得到相同结果，即：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'adobe12ps15test'</span>.match(<span class=\"regexp\">/[a-z]+\\d+([a-z]+)/</span>);</span><br><span class=\"line\">/<span class=\"regexp\">/ [\"adobe12ps\", \"ps\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>// 注意，但需求希望匹配字母之间的规则复杂时，如希望匹配字母，且字母之间可以为1或3时，但不需要1和3</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'adobe11ps15test'</span>.match(<span class=\"regexp\">/[a-z]+(1|3)+([a-z]+)/</span>);</span><br><span class=\"line\">/<span class=\"regexp\">/ [\"adobe11ps\", \"1\", \"ps\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>// 返回中不希望包含数字怎么办，可以使用非捕获</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'adobe11ps15test'</span>.match(<span class=\"regexp\">/[a-z]+(?:1|3)+([a-z]+)/</span>);</span><br><span class=\"line\">/<span class=\"regexp\">/ [\"adobe11ps\", \"ps\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>● (?=n ) 匹配任何其后紧跟字符n的字符串，但返回中不包含n</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'adobe12ps15test'</span>.match(<span class=\"regexp\">/[a-z]+(?=\\d)/g</span>);</span><br><span class=\"line\">/<span class=\"regexp\">/ [\"adobe\", \"ps\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>● (?!n ) 匹配任何其后没有紧跟字符n的字符串，返回中不包含n</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'adobe12ps15test'</span>.match(<span class=\"regexp\">/[a-z]+(?!\\d)/g</span>);</span><br><span class=\"line\">/<span class=\"regexp\">/ [\"adob\", \"p\", \"test\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>● (?&lt;=n ) 匹配任何其前紧跟字符n的字符串，返回中不包含n</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'adobe12ps15test'</span>.match(<span class=\"regexp\">/(?&lt;=\\d)[a-z]+/g</span>);</span><br><span class=\"line\">/<span class=\"regexp\">/ [\"ps\", \"test\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>● (?&lt;!n ) 匹配任何其前紧跟字符n的字符串，返回中不包含n</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'adobe12ps15test'</span>.match(<span class=\"regexp\">/(?&lt;!\\d)[a-z]+/g</span>);</span><br><span class=\"line\">/<span class=\"regexp\">/ [\"adobe\", \"s\", \"est\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>3）注意<br> ● A、如果希望对上面特殊字符本身进行匹配，需要在其前面添加\\进行转移</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'11+2=13'</span>.match(<span class=\"regexp\">/\\d+\\+/g</span>); </span><br><span class=\"line\">/<span class=\"regexp\">/ [\"11+\"]</span></span><br><span class=\"line\"><span class=\"regexp\">'(11+2)*2=26'.match(/</span>\\(\\d+\\+\\d+\\)/g); </span><br><span class=\"line\">/<span class=\"regexp\">/ [\"(11+2)\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>● B、\\举例</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 注意下面两个表达式返回的结果</span></span><br><span class=\"line\"><span class=\"string\">'path C:\\Windows\\System32'</span>.match(<span class=\"regexp\">/([a-zA-Z]:\\\\\\w+)/g</span>); </span><br><span class=\"line\"><span class=\"comment\">// null</span></span><br><span class=\"line\"><span class=\"string\">'path C:\\\\Windows\\\\System32'</span>.match(<span class=\"regexp\">/([a-zA-Z]:\\\\\\w+)/g</span>); </span><br><span class=\"line\"><span class=\"comment\">// [\"C:\\Windows\"]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>说明: 在申明字符串 ‘path C:\\Windows\\System32’ 时，其中的 ‘’ 就已经被当做转移符，既是 ‘\\W’ ===<br> ‘W’,所以如果希望申明的字符串中包含反斜线，需要在加一个反斜线转义，即 \\</p>\n</blockquote>\n<h4 id=\"6、正则相关方法\">6、正则相关方法<a href=\"#6、正则相关方法\" title=\"6、正则相关方法\"></a></h4><p>1） RegExp对象相关方法</p>\n<p><img src=\"https:////upload-images.jianshu.io/upload_images/15206437-9398fbd176a1c727?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\" class=\"φcy\" alt=\"img\"></p>\n<p>在这里插入图片描述</p>\n<p>2）String对象相关方法</p>\n<p><img src=\"https:////upload-images.jianshu.io/upload_images/15206437-71eac21009e1eac6?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\" class=\"φcy\" alt=\"img\"></p>\n<p>在这里插入图片描述</p>\n<p>3）replace 具体用法<br> 顾名思义，是字符串替换方法，但用法比较广泛，相信读者已经非常熟悉了。在此就当复习了<br> A、 基本用法<br> 直接传入字符串进行替换，找到子串后只替换一次，举例：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'adobe abc'</span>.replace(<span class=\"string\">'b'</span>, <span class=\"string\">'_'</span>)</span><br><span class=\"line\"><span class=\"comment\">// \"ado_e abc\"</span></span><br><span class=\"line\"><span class=\"comment\">// 注意 第二个 b 没有被替换</span></span><br></pre></td></tr></table></figure>\n\n<p>如果希望全部替换，可以使用正则表达式并用全局修饰符 g 方式，举例：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'adobe abc'</span>.replace(<span class=\"regexp\">/b/g</span>, <span class=\"string\">'_'</span>)</span><br><span class=\"line\"><span class=\"comment\">// \"ado_e a_c\"</span></span><br></pre></td></tr></table></figure>\n\n<p>B、 高级用法<br> 第二个参数可以使用 function，其中有三个参数，分别为 匹配的字符串、当前匹配的字符串index值、匹配的源字符串，最终结果根据每次匹配结果进行相应的替换<br> 举例：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'adobe aacc bbaa'</span>.replace(<span class=\"regexp\">/a+/g</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">str, index, source</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(index &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str.toUpperCase();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// \"adobe AAcc bbAA\"</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第二部分-案例分析\">第二部分 案例分析<a href=\"#第二部分-案例分析\" title=\"第二部分 案例分析\"></a></h2><h3 id=\"一、常见匹配\">一、常见匹配<a href=\"#一、常见匹配\" title=\"一、常见匹配\"></a></h3><p>在写正则之前，需要注意以下几点：</p>\n<ol><li>一定要清楚期望的规则是什么，不然无从匹配</li>\n<li>有些正则不只一种写法，要注意简短干练，复杂的正则表达式不仅难懂，而且容易出BUG，性能也不是很好</li>\n<li>正则虽好，可要适度奥。有些字符串处理不一定适合用正则</li>\n</ol><h3 id=\"1、手机号\">1、手机号<a href=\"#1、手机号\" title=\"1、手机号\"></a></h3><p>规则：以1开头第二位为3、5、7、8且长度为11位的数字组合</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/^<span class=\"number\">1</span>[<span class=\"number\">3578</span>]\\d&#123;<span class=\"number\">9</span>&#125;$/.test(<span class=\"number\">13600001111</span>);</span><br><span class=\"line\">/<span class=\"regexp\">/ true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、-字符串提取\">2、 字符串提取<a href=\"#2、-字符串提取\" title=\"2、 字符串提取\"></a></h3><p>举例：提取字符串中的数字<br> 分析：<br> 根据对数字的理解，可能为负数，即-?，如果是负数，其后需要是数字且至少一位，即 -?\\d+，小数部分可能有也可能没有，所以需要对小数部分括弧起来用 ? 或 {0, 1}限定，因为.是特殊字符需要转义，于是表达式为：-?\\d+(.\\d+)?</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'(12.3 - 32.3)*2 = -40'</span>.match(<span class=\"regexp\">/-?\\d+(\\.\\d+)?/g</span>);</span><br><span class=\"line\">/<span class=\"regexp\">/ [\"12.3\", \"32.3\", \"2\", \"-40\"]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二、jquery中的正则片段\">二、jQuery中的正则片段<a href=\"#二、jquery中的正则片段\" title=\"二、jQuery中的正则片段\"></a></h3><p>1、表达式<br> 在jQuery 3.1.2-pre中找到一个解析单标签的正则，如下：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/^&lt;([a-z][^\\/\\<span class=\"number\">0</span>&gt;:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?&gt;(?:<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">\\</span>/\\<span class=\"attr\">1</span>&gt;</span></span>|)$/i</span><br></pre></td></tr></table></figure>\n\n<p>2、分解<br> 乍一看有点懵，其实拆解之后就容易理解了，注意拆解的步骤，通常来说：<br> 1） 第一步可以先看括号 () ，可以将各个小括号及非括号的分成不同部分，如</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/^&lt;  ([a-z][^\\/\\<span class=\"number\">0</span>&gt;:\\x20\\t\\r\\n\\f]*)  [\\x20\\t\\r\\n\\f]*\\/?&gt;  (?:<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">\\</span>/\\<span class=\"attr\">1</span>&gt;</span></span>|)  $/i</span><br></pre></td></tr></table></figure>\n\n<p>2） 第二步可以将中括号分开</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/^&lt;  (  [a-z]  [^\\/\\<span class=\"number\">0</span>&gt;:\\x20\\t\\r\\n\\f]*  )  [\\x20\\t\\r\\n\\f]*  \\/?&gt;  (?:<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">\\</span>/\\<span class=\"attr\">1</span>&gt;</span></span>|)  $/i</span><br></pre></td></tr></table></figure>\n\n<p>现在是不是已经很清楚了，接下来分解下，就很容易理解了<br> 3、详解<br> ● 1）^&lt; 很明显在匹配标签左尖括号括号，且以其开始</p>\n<p>● 2）<code>( [a-z] [^\\/\\0&gt;:\\x20\\t\\r\\n\\f]* )</code> 这个括号有两部分，第一个 [a-z] 没什么好解释，即标签&lt;紧跟的必须为字母，因为全局加了 i(忽略大小写) 修饰符，所以大小写字母都可以；<code>[^\\/\\0&gt;:\\x20\\t\\r\\n\\f]*</code>，及限制标签名必须以字母开始，且第二个字母不能为<code>/ \\0 &gt; : \\20 t \\r \\n \\f</code>的任意多个字符（思考为什么），() 表示对标签的分组，方便取到标签名</p>\n<p>● 3）<code>[\\x20\\t\\r\\n\\f]*</code> 表示可能含有 <code>[\\x20\\t\\r\\n\\f]</code> 这些特殊字符，与前面的 <code>[^\\/\\0&gt;:\\x20\\t\\r\\n\\f]*</code> 相似却不一样，通过这里可以看出&lt;br之后进行回车也能匹配到<br> ● 4）/?&gt; 能匹配<br>或</p>\n<p> ● 5）<code>(?:&lt;\\/\\1&gt;|)</code> 这里不捕获，并用\\1去反向引用第一个括号的表达式 <code>([a-z][^\\/\\0&gt;:\\x20\\t\\r\\n\\f]*)。</code>这里的|表示 &lt;/\\1&gt; 可有可无，即：<code>(?:&lt;\\/\\1&gt;|) 与 (?:&lt;\\/\\1&gt;)?</code>匹配结果一样</p>\n","prev":{"title":"01.React源码学习-createElement","link":"2019/11/25/note/01-React源码学习-createElement"},"next":{"title":"restful API","link":"2019/11/10/note/restfulAPI"},"plink":"https://www.hansomezao.com/2019/11/20/note/正则表达式/","toc":[{"id":"第一部分-基础知识","title":"第一部分 基础知识","index":"1","children":[{"id":"一、正则申明方式","title":"一、正则申明方式","index":"1.1"},{"id":"二、正则相关符号","title":"二、正则相关符号","index":"1.2"}]},{"id":"第二部分-案例分析","title":"第二部分 案例分析","index":"2","children":[{"id":"一、常见匹配","title":"一、常见匹配","index":"2.1"},{"id":"1、手机号","title":"1、手机号","index":"2.2"},{"id":"2、-字符串提取","title":"2、 字符串提取","index":"2.3"},{"id":"二、jquery中的正则片段","title":"二、jQuery中的正则片段","index":"2.4"}]}]}