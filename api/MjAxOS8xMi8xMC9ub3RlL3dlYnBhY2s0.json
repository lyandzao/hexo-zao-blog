{"title":"webpack4","date":"2019-12-10T05:39:30.000Z","date_formatted":{"ll":"2019年12月10日","L":"2019/12/10","MM-DD":"12-10"},"author":"网上收集,来源不明","link":"2019/12/10/note/webpack4","tags":["webpack"],"categories":["note"],"updated":"2019-12-10T05:39:30.000Z","content":"<ul><li><a href=\"#%e5%ae%89%e8%a3%85%e5%89%8d%e5%85%88npm%e5%88%9d%e5%a7%8b%e5%8c%96\">安装前先npm初始化</a></li>\n<li><a href=\"#%e6%9c%ac%e5%9c%b0%e6%9c%8d%e5%8a%a1\">本地服务</a></li>\n<li><a href=\"#%e5%a4%8d%e5%88%b6html\">复制html</a></li>\n<li><a href=\"#%e5%a4%84%e7%90%86css\">处理css</a></li>\n<li><a href=\"#%e5%a4%84%e7%90%86less\">处理less</a></li>\n<li><a href=\"#%e6%8a%bd%e7%a6%bbcss%e6%96%87%e4%bb%b6%e9%80%9a%e8%bf%87link%e5%bc%95%e5%85%a5\">抽离css文件，通过link引入</a></li>\n<li><a href=\"#%e5%8e%8b%e7%bc%a9css%e5%92%8cjs\">压缩css和js</a></li>\n<li><a href=\"#%e7%bb%99css%e5%8a%a0%e4%b8%8a%e5%85%bc%e5%ae%b9%e6%b5%8f%e8%a7%88%e5%99%a8%e7%9a%84%e5%89%8d%e7%bc%80\">给css加上兼容浏览器的前缀</a></li>\n<li><a href=\"#es6-%e8%bd%ac-es5\">es6 转 es5</a></li>\n<li><a href=\"#%e8%bd%aces7%e7%9a%84%e8%af%ad%e6%b3%95\">转es7的语法</a><ul><li><a href=\"#%e5%85%b6%e4%bb%96%e4%b8%8d%e5%85%bc%e5%ae%b9%e7%9a%84%e9%ab%98%e7%ba%a7%e8%af%ad%e6%b3%95\">其他不兼容的高级语法</a></li>\n</ul></li>\n<li><a href=\"#%e8%af%ad%e6%b3%95%e6%a3%80%e6%9f%a5-eslint\">语法检查 eslint</a></li>\n<li><a href=\"#%e5%85%a8%e5%b1%80%e5%8f%98%e9%87%8f%e5%bc%95%e5%85%a5\">全局变量引入</a><ul><li><a href=\"#%e6%b3%951\">法1：</a></li>\n<li><a href=\"#%e6%b3%952\">法2：</a></li>\n<li><a href=\"#%e6%b3%953-%e5%a6%82%e4%bd%95%e5%9c%a8%e6%af%8f%e4%b8%aa%e6%a8%a1%e5%9d%97%e4%b8%ad%e6%b3%a8%e5%85%a5\">法3. 如何在每个模块中注入：</a></li>\n<li><a href=\"#%e6%b3%954\">法4：</a></li>\n</ul></li>\n<li><a href=\"#webpack%e5%9b%be%e7%89%87%e6%89%93%e5%8c%85\">webpack图片打包</a></li>\n<li><a href=\"#%e5%bd%93%e5%9b%be%e7%89%87%e5%b0%8f%e4%ba%8e%e5%a4%9a%e5%b0%91%e7%94%a8base64\">当图片小于多少，用base64</a></li>\n<li><a href=\"#%e6%89%93%e5%8c%85%e6%96%87%e4%bb%b6%e5%88%86%e7%b1%bb\">打包文件分类</a></li>\n<li><a href=\"#%e5%b8%8c%e6%9c%9b%e8%be%93%e5%87%ba%e7%9a%84%e6%97%b6%e5%80%99%e7%bb%99%e8%bf%99%e4%ba%9bcssimg%e5%8a%a0%e4%b8%8a%e5%89%8d%e7%bc%80%e4%bc%a0%e5%88%b0%e6%9c%8d%e5%8a%a1%e5%99%a8%e4%b9%9f%e8%83%bd%e8%ae%bf%e9%97%ae\">希望输出的时候，给这些<code>css\\img</code>加上前缀，传到服务器也能访问</a></li>\n<li><a href=\"#%e5%a6%82%e6%9e%9c%e5%8f%aa%e5%b8%8c%e6%9c%9b%e5%a4%84%e7%90%86%e5%9b%be%e7%89%87\">如果只希望处理图片</a></li>\n<li><a href=\"#%e6%89%93%e5%8c%85%e5%a4%9a%e9%a1%b5%e5%ba%94%e7%94%a8\">打包多页应用</a></li>\n<li><a href=\"#%e9%85%8d%e7%bd%aesource-map\">配置<code>source-map</code></a></li>\n<li><a href=\"#watch-%e6%94%b9%e5%ae%8c%e4%bb%a3%e8%a1%a8%e9%87%8d%e6%96%b0%e6%89%93%e5%8c%85%e5%ae%9e%e4%bd%93\"><code>watch</code> 改完代表重新打包实体</a></li>\n<li><a href=\"#webpack%e7%9a%84%e5%85%b6%e4%bb%96%e4%b8%89%e4%b8%aa%e5%b0%8f%e6%8f%92%e4%bb%b6\"><code>webpack</code>的其他三个小插件</a></li>\n<li><a href=\"#webpack-%e8%b7%a8%e5%9f%9f\"><code>webpack</code> 跨域</a></li>\n<li><a href=\"#1%e5%a6%82%e6%9e%9c%e5%90%8e%e7%ab%af%e7%bb%99%e7%9a%84%e8%af%b7%e6%b1%82%e6%b2%a1%e6%9c%89api-%e8%b7%a8%e5%9f%9f\">1.如果后端给的请求没有API 「跨域」</a></li>\n<li><a href=\"#2%e5%89%8d%e7%ab%af%e5%8f%aa%e6%83%b3%e5%8d%95%e7%ba%afmock%e6%95%b0%e6%8d%ae-%e8%b7%a8%e5%9f%9f\">2.前端只想单纯mock数据 「跨域」</a></li>\n<li><a href=\"#3%e6%9c%89%e6%9c%8d%e5%8a%a1%e7%ab%af%e4%b8%8d%e7%94%a8%e4%bb%a3%e7%90%86-%e6%9c%8d%e5%8a%a1%e7%ab%af%e5%90%af%e5%8a%a8webpack-%e8%b7%a8%e5%9f%9f\">3.有服务端，不用代理, 服务端启动webpack 「跨域」</a></li>\n<li><a href=\"#webpack%e8%a7%a3%e6%9e%90resolve\">webpack解析resolve</a></li>\n<li><a href=\"#%e4%bd%86%e6%98%af%e6%af%8f%e6%ac%a1%e5%bc%95%e5%85%a5%e9%83%bd%e5%be%88%e9%95%bf%e5%a6%82%e4%bd%95%e4%bc%98%e9%9b%85%e5%bc%95%e5%85%a5\">但是每次引入都很长，如何优雅引入</a></li>\n<li><a href=\"#%e7%9c%81%e7%95%a5%e6%89%a9%e5%b1%95%e5%90%8d\">省略扩展名</a></li>\n<li><a href=\"#%e5%ae%9a%e4%b9%89%e7%8e%af%e5%a2%83%e5%8f%98%e9%87%8f\">定义环境变量</a></li>\n<li><a href=\"#%e5%8c%ba%e5%88%86%e4%b8%a4%e4%b8%aa%e4%b8%8d%e5%90%8c%e7%9a%84%e7%8e%af%e5%a2%83\">区分两个不同的环境</a></li>\n<li><a href=\"#webpack-%e4%bc%98%e5%8c%96\">webpack 优化</a></li>\n<li><a href=\"#%e4%bc%98%e5%8c%96%e5%bd%93%e6%9f%90%e4%ba%9b%e5%8c%85%e6%98%af%e7%8b%ac%e7%ab%8b%e7%9a%84%e4%b8%aa%e4%bd%93%e6%b2%a1%e6%9c%89%e4%be%9d%e8%b5%96\">优化：当某些包是独立的个体没有依赖</a></li>\n<li><a href=\"#%e4%bc%98%e5%8c%96%e8%a7%84%e5%88%99%e5%8c%b9%e9%85%8d%e8%ae%be%e7%bd%ae%e8%8c%83%e5%9b%b4\">优化：规则匹配设置范围</a></li>\n<li><a href=\"#%e4%bc%98%e5%8c%96%e5%bf%bd%e7%95%a5%e4%be%9d%e8%b5%96%e4%b8%ad%e4%b8%8d%e5%bf%85%e8%a6%81%e7%9a%84%e8%af%ad%e8%a8%80%e5%8c%85\">优化：忽略依赖中不必要的语言包</a></li>\n<li><a href=\"#%e5%8a%a8%e6%80%81%e9%93%be%e6%8e%a5%e5%ba%93\">动态链接库</a></li>\n<li><a href=\"#%e5%a4%9a%e7%ba%bf%e7%a8%8b%e6%89%93%e5%8c%85happypack\">多线程打包<code>happypack</code></a></li>\n<li><a href=\"#webpack-%e8%87%aa%e5%b8%a6%e7%9a%84%e4%bc%98%e5%8c%96\">webpack 自带的优化</a></li>\n<li><a href=\"#%e6%8a%bd%e5%8f%96%e5%85%ac%e5%85%b1%e4%bb%a3%e7%a0%81\">抽取公共代码</a></li>\n<li><a href=\"#%e6%87%92%e5%8a%a0%e8%bd%bd%e5%bb%b6%e8%bf%9f%e5%8a%a0%e8%bd%bd\">懒加载(延迟加载)</a></li>\n<li><a href=\"#%e7%83%ad%e6%9b%b4%e6%96%b0%e5%bd%93%e9%a1%b5%e9%9d%a2%e6%94%b9%e5%8f%98%e5%8f%aa%e6%9b%b4%e6%96%b0%e6%94%b9%e5%8f%98%e7%9a%84%e9%83%a8%e5%88%86%e4%b8%8d%e9%87%8d%e6%96%b0%e6%89%93%e5%8c%85\">热更新(当页面改变只更新改变的部分，不重新打包)</a></li>\n<li><a href=\"#tapable%e4%bb%8b%e7%bb%8d---synchook\">tapable介绍 - SyncHook</a></li>\n<li><a href=\"#tapable%e4%bb%8b%e7%bb%8d---syncbailhook\">tapable介绍 - SyncBailHook</a></li>\n<li><a href=\"#tapable%e4%bb%8b%e7%bb%8d---syncwaterfallhook\">tapable介绍 - SyncWaterfallHook</a></li>\n<li><a href=\"#tapable%e4%bb%8b%e7%bb%8d---syncloophook\">tapable介绍 - SyncLoopHook</a></li>\n<li><a href=\"#asyncparallelhook-%e4%b8%8e-asyncparallelbailhook\"><code>AsyncParallelHook</code> 与 <code>AsyncParallelBailHook</code></a><ul><li><a href=\"#asyncparallelhook\">AsyncParallelHook</a></li>\n<li><a href=\"#asyncparallelbailhook\">AsyncParallelBailHook</a></li>\n</ul></li>\n<li><a href=\"#%e5%bc%82%e6%ad%a5%e4%b8%b2%e8%a1%8c--asyncserieshook\">异步串行 —— AsyncSeriesHook</a></li>\n<li><a href=\"#%e5%bc%82%e6%ad%a5%e4%b8%b2%e8%a1%8c--asyncserieswaterfallhook\">异步串行 —— AsyncSeriesWaterfallHook</a></li>\n<li><a href=\"#%e6%89%8b%e5%86%99webpack\">手写webpack</a></li>\n<li><a href=\"#webpack%e5%88%86%e6%9e%90%e5%8f%8a%e5%a4%84%e7%90%86\">webpack分析及处理</a></li>\n<li><a href=\"#%e5%88%9b%e5%bb%ba%e4%be%9d%e8%b5%96%e5%85%b3%e7%b3%bb\">创建依赖关系</a></li>\n<li><a href=\"#ast%e9%80%92%e5%bd%92%e8%a7%a3%e6%9e%90\">ast递归解析</a></li>\n<li><a href=\"#%e7%94%9f%e6%88%90%e6%89%93%e5%8c%85%e5%b7%a5%e5%85%b7\">生成打包工具</a></li>\n<li><a href=\"#%e5%a2%9e%e5%8a%a0loader\">增加loader</a></li>\n<li><a href=\"#%e5%a2%9e%e5%8a%a0plugins\">增加plugins</a></li>\n<li><a href=\"#loader\">loader</a></li>\n<li><a href=\"#%e9%85%8d%e7%bd%ae%e5%a4%9a%e4%b8%aaloader\">配置多个loader</a></li>\n<li><a href=\"#babel-loader%e5%ae%9e%e7%8e%b0\"><code>babel-loader</code>实现</a></li>\n<li><a href=\"#banner-loader%e5%ae%9e%e7%8e%b0%e8%87%aa%e5%88%9b\"><code>banner-loader</code>实现(自创)</a></li>\n<li><a href=\"#%e5%ae%9e%e7%8e%b0file-loader%e5%92%8curl-loader\">实现<code>file-loader</code>和<code>url-loader</code></a></li>\n<li><a href=\"#less-loader%e5%92%8ccss-loader\"><code>less-loader</code>和<code>css-loader</code></a></li>\n<li><a href=\"#css-loader\"><code>css-loader</code></a></li>\n<li><a href=\"#webpack-%e4%b8%ad%e7%9a%84%e6%8f%92%e4%bb%b6\">webpack 中的插件</a></li>\n<li><a href=\"#%e6%96%87%e4%bb%b6%e5%88%97%e8%a1%a8%e6%8f%92%e4%bb%b6\">文件列表插件</a></li>\n<li><a href=\"#%e5%86%85%e8%81%94%e7%9a%84webpack%e6%8f%92%e4%bb%b6\">内联的<code>webpack</code>插件</a></li>\n<li><a href=\"#%e6%89%93%e5%8c%85%e5%90%8e%e8%87%aa%e5%8a%a8%e5%8f%91%e5%b8%83\">打包后自动发布</a></li>\n</ul><h2 id=\"安装前先npm初始化\">安装前先npm初始化<a href=\"#安装前先npm初始化\" title=\"安装前先npm初始化\"></a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init -y</span><br><span class=\"line\">npm i webpack webpack-cli -D</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight js\"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)   <span class=\"comment\">// 相对路径变绝对路径</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'production'</span>, <span class=\"comment\">// 模式 默认 production development</span></span><br><span class=\"line\">  entry: <span class=\"string\">'./src/index'</span>,    <span class=\"comment\">// 入口</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'bundle.[hash:8].js'</span>,   <span class=\"comment\">// hash: 8只显示8位</span></span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">    publicPath: <span class=\"string\">''</span>  <span class=\"comment\">// // 给所有打包文件引入时加前缀，包括css，js，img，如果只想处理图片可以单独在url-loader配置中加publicPath</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"本地服务\">本地服务<a href=\"#本地服务\" title=\"本地服务\"></a></h2><p><code>npm i webpack-dev-server -D</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">devServer: &#123;</span><br><span class=\"line\">  port: 3000,</span><br><span class=\"line\">  progress: true          &#x2F;&#x2F; 滚动条</span><br><span class=\"line\">  contentBase: &#39;.&#x2F;build&#39;  &#x2F;&#x2F; 起服务的地址</span><br><span class=\"line\">  open: true              &#x2F;&#x2F; 自动打开浏览器</span><br><span class=\"line\">  compress： true         &#x2F;&#x2F; gzip压缩</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"复制html\">复制html<a href=\"#复制html\" title=\"复制html\"></a></h2><p><code>npm i html-webpack-plugin -D</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;)</span><br><span class=\"line\">plugins: [ &#x2F;&#x2F; 放着所有webpack插件</span><br><span class=\"line\">  new HtmlWebpackPlugin(&#123; &#x2F;&#x2F; 用于使用模板打包时生成index.html文件，并且在run dev时会将模板文件也打包到内存中</span><br><span class=\"line\">    template: &#39;.&#x2F;index.html&#39;, &#x2F;&#x2F; 模板文件</span><br><span class=\"line\">    filename: &#39;index.html&#39;, &#x2F;&#x2F; 打包后生成文件</span><br><span class=\"line\">    hash: true, &#x2F;&#x2F; 添加hash值解决缓存问题</span><br><span class=\"line\">    minify: &#123; &#x2F;&#x2F; 对打包的html模板进行压缩</span><br><span class=\"line\">      removeAttributeQuotes: true, &#x2F;&#x2F; 删除属性双引号</span><br><span class=\"line\">      collapseWhitespace: true &#x2F;&#x2F; 折叠空行变成一行</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://github.com/jantimon/html-webpack-plugin#options\" target=\"_blank\">html-webpack-plugin#options</a></p>\n<h2 id=\"处理css\">处理css<a href=\"#处理css\" title=\"处理css\"></a></h2><p><code>npm i css-loader style-loader -D</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; css-loader   作用：用来解析@import这种语法</span><br><span class=\"line\">&#x2F;&#x2F; style-loader 作用：把 css 插入到head标签中</span><br><span class=\"line\">&#x2F;&#x2F; loader的执行顺序： 默认是从右向左（从下向上）</span><br><span class=\"line\">module: &#123;    &#x2F;&#x2F; 模块</span><br><span class=\"line\">  rules: [   &#x2F;&#x2F; 规则</span><br><span class=\"line\">    &#x2F;&#x2F; style-loader 把css插入head标签中</span><br><span class=\"line\">    &#x2F;&#x2F; loader 功能单一</span><br><span class=\"line\">    &#x2F;&#x2F; 多个loader 需要 []</span><br><span class=\"line\">    &#x2F;&#x2F; 顺便默认从右到左</span><br><span class=\"line\">    &#x2F;&#x2F; 也可以写成对象方式</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      test: &#x2F;\\.css$&#x2F;,   &#x2F;&#x2F; css 处理</span><br><span class=\"line\">      &#x2F;&#x2F; use: &#39;css-loader&#39;</span><br><span class=\"line\">      &#x2F;&#x2F; use: [&#39;style-loader&#39;, &#39;css-loader&#39;],</span><br><span class=\"line\">      use: [</span><br><span class=\"line\">        &#x2F;&#x2F; &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;     loader: &#39;style-loader&#39;,</span><br><span class=\"line\">        &#x2F;&#x2F;     options: &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;         insertAt: &#39;top&#39; &#x2F;&#x2F; 将css标签插入最顶头  这样可以自定义style不被覆盖</span><br><span class=\"line\">        &#x2F;&#x2F;     &#125;</span><br><span class=\"line\">        &#x2F;&#x2F; &#125;,</span><br><span class=\"line\">        MiniCssExtractPlugin.loader,</span><br><span class=\"line\">        &#39;css-loader&#39;, &#x2F;&#x2F; css-loader 用来解析@import这种语法,</span><br><span class=\"line\">        &#39;postcss-loader&#39;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"处理less\">处理less<a href=\"#处理less\" title=\"处理less\"></a></h2><p><code>npm i less-loader</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  test: &#x2F;\\.less$&#x2F;,   &#x2F;&#x2F; less 处理</span><br><span class=\"line\">  &#x2F;&#x2F; use: &#39;css-loader&#39;</span><br><span class=\"line\">  &#x2F;&#x2F; use: [&#39;style-loader&#39;, &#39;css-loader&#39;],</span><br><span class=\"line\">  use: [</span><br><span class=\"line\">    &#x2F;&#x2F; &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;     loader: &#39;style-loader&#39;,</span><br><span class=\"line\">    &#x2F;&#x2F;     options: &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;         insertAt: &#39;top&#39; &#x2F;&#x2F; 将css标签插入最顶头  这样可以自定义style不被覆盖</span><br><span class=\"line\">    &#x2F;&#x2F;     &#125;</span><br><span class=\"line\">    &#x2F;&#x2F; &#125;,</span><br><span class=\"line\">    MiniCssExtractPlugin.loader,   &#x2F;&#x2F; 这样相当于抽离成一个css文件， 如果希望抽离成分别不同的css, 需要再引入MiniCssExtractPlugin，再配置</span><br><span class=\"line\">    &#39;css-loader&#39;, &#x2F;&#x2F; css-loader 用来解析@import这种语法</span><br><span class=\"line\">    &#39;postcss-loader&#39;,</span><br><span class=\"line\">    &#39;less-loader&#39; &#x2F;&#x2F; less-loader less -&gt; css</span><br><span class=\"line\">    &#x2F;&#x2F; sass node-sass sass-loader</span><br><span class=\"line\">    &#x2F;&#x2F; stylus stylus-loader</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://webpack.js.org/loaders/less-loader/#src/components/Sidebar/Sidbar.jsx\" target=\"_blank\">less-loader</a></p>\n<h2 id=\"抽离css文件，通过link引入\">抽离css文件，通过link引入<a href=\"#抽离css文件，通过link引入\" title=\"抽离css文件，通过link引入\"></a></h2><p><code>yarn add mini-css-extract-plugin -D</code></p>\n<p><a href=\"https://github.com/webpack-contrib/mini-css-extract-plugin\" target=\"_blank\">mini-css-extract-plugin</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let MiniCssExtractPlugin &#x3D; require(&#39;mini-css-extract-plugin&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 压缩css</span><br><span class=\"line\"></span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">  new MiniCssExtractPlugin(&#123;</span><br><span class=\"line\">      filename: &#39;css&#x2F;main.css&#39;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  test: &#x2F;\\.css$&#x2F;,   &#x2F;&#x2F; css 处理</span><br><span class=\"line\">  &#x2F;&#x2F; use: &#39;css-loader&#39;</span><br><span class=\"line\">  &#x2F;&#x2F; use: [&#39;style-loader&#39;, &#39;css-loader&#39;],</span><br><span class=\"line\">  use: [</span><br><span class=\"line\">    &#x2F;&#x2F; &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;     loader: &#39;style-loader&#39;,</span><br><span class=\"line\">    &#x2F;&#x2F;     options: &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;         insertAt: &#39;top&#39; &#x2F;&#x2F; 将css标签插入最顶头  这样可以自定义style不被覆盖</span><br><span class=\"line\">    &#x2F;&#x2F;     &#125;</span><br><span class=\"line\">    &#x2F;&#x2F; &#125;,</span><br><span class=\"line\">    &#x2F;&#x2F; 此时不需要style-loader</span><br><span class=\"line\">    MiniCssExtractPlugin.loader,   &#x2F;&#x2F; 抽离</span><br><span class=\"line\">    &#39;css-loader&#39;, &#x2F;&#x2F; css-loader 用来解析@import这种语法,</span><br><span class=\"line\">    &#39;postcss-loader&#39;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>抽离css插件文件时可使用<code>optimize-css-assets-webpack-plugin</code>优化压缩css以及js文件</p>\n<h2 id=\"压缩css和js\">压缩css和js<a href=\"#压缩css和js\" title=\"压缩css和js\"></a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 用了&#96;mini-css-extract-plugin&#96;抽离css为link需使用&#96;optimize-css-assets-webpack-plugin&#96;进行压缩css,使用此方法压缩了css需要&#96;uglifyjs-webpack-plugin&#96;压缩js</span><br><span class=\"line\">const OptimizeCSSAssetsPlugin &#x3D; require(&quot;optimize-css-assets-webpack-plugin&quot;)</span><br><span class=\"line\">const UglifyJsPlugin &#x3D; require(&quot;uglifyjs-webpack-plugin&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  optimization: &#123;              &#x2F;&#x2F; 优化项</span><br><span class=\"line\">    minimizer: [</span><br><span class=\"line\">      new UglifyJsPlugin(&#123;     &#x2F;&#x2F; 优化js</span><br><span class=\"line\">        cache: true,           &#x2F;&#x2F; 是否缓存</span><br><span class=\"line\">        parallel: true,        &#x2F;&#x2F; 是否并发打包</span><br><span class=\"line\">        &#x2F;&#x2F; sourceMap: true     &#x2F;&#x2F; 源码映射 set to true if you want JS source maps</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">      new OptimizeCSSAssetsPlugin(&#123;&#125;)    &#x2F;&#x2F; css 的优化</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mode: &#39;production&#39;,</span><br><span class=\"line\">  entry: &#39;&#39;,</span><br><span class=\"line\">  output: &#123;&#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"给css加上兼容浏览器的前缀\">给css加上兼容浏览器的前缀<a href=\"#给css加上兼容浏览器的前缀\" title=\"给css加上兼容浏览器的前缀\"></a></h2><p><code>yarn add postcss-loader autoprefixer -D</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; css</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  test: &#x2F;\\.css$&#x2F;,   &#x2F;&#x2F; css 处理</span><br><span class=\"line\">  &#x2F;&#x2F; use: &#39;css-loader&#39;</span><br><span class=\"line\">  &#x2F;&#x2F; use: [&#39;style-loader&#39;, &#39;css-loader&#39;],</span><br><span class=\"line\">  use: [</span><br><span class=\"line\">    &#x2F;&#x2F; &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;     loader: &#39;style-loader&#39;,</span><br><span class=\"line\">    &#x2F;&#x2F;     options: &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;         insertAt: &#39;top&#39; &#x2F;&#x2F; 将css标签插入最顶头  这样可以自定义style不被覆盖</span><br><span class=\"line\">    &#x2F;&#x2F;     &#125;</span><br><span class=\"line\">    &#x2F;&#x2F; &#125;,</span><br><span class=\"line\">    MiniCssExtractPlugin.loader,</span><br><span class=\"line\">    &#39;css-loader&#39;, &#x2F;&#x2F; css-loader 用来解析@import这种语法,</span><br><span class=\"line\">    &#39;postcss-loader&#39;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F; less</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  test: &#x2F;\\.less$&#x2F;,   &#x2F;&#x2F; less 处理</span><br><span class=\"line\">  &#x2F;&#x2F; use: &#39;css-loader&#39;</span><br><span class=\"line\">  &#x2F;&#x2F; use: [&#39;style-loader&#39;, &#39;css-loader&#39;],</span><br><span class=\"line\">  use: [</span><br><span class=\"line\">    &#x2F;&#x2F; &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;     loader: &#39;style-loader&#39;,</span><br><span class=\"line\">    &#x2F;&#x2F;     options: &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;         insertAt: &#39;top&#39; &#x2F;&#x2F; 将css标签插入最顶头  这样可以自定义style不被覆盖</span><br><span class=\"line\">    &#x2F;&#x2F;     &#125;</span><br><span class=\"line\">    &#x2F;&#x2F; &#125;,</span><br><span class=\"line\">    MiniCssExtractPlugin.loader,   &#x2F;&#x2F; 这样相当于抽离成一个css文件， 如果希望抽离成分别不同的css, 需要再引入MiniCssExtractPlugin，再配置</span><br><span class=\"line\">    &#39;css-loader&#39;, &#x2F;&#x2F; css-loader 用来解析@import这种语法</span><br><span class=\"line\">    &#39;postcss-loader&#39;,</span><br><span class=\"line\">    &#39;less-loader&#39; &#x2F;&#x2F; less-loader less -&gt; css</span><br><span class=\"line\">    &#x2F;&#x2F; sass node-sass sass-loader</span><br><span class=\"line\">    &#x2F;&#x2F; stylus stylus-loader</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>postcss 需要配置文档   <code>postcss.config1.js</code></p>\n<p><a href=\"https://github.com/postcss/postcss-loader\" target=\"_blank\">postcss-loader</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    require(&#39;autoprefixer&#39;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"es6-转-es5\">es6 转 es5<a href=\"#es6-转-es5\" title=\"es6 转 es5\"></a></h2><p><code>npm i babel-loader @babel/core  @babel/preset-env -D</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  module: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: &#x2F;\\.js$&#x2F;,</span><br><span class=\"line\">        use: &#123;</span><br><span class=\"line\">          loader: &#39;babel-loader&#39;,</span><br><span class=\"line\">          options: &#123;</span><br><span class=\"line\">            presets: [ &#x2F;&#x2F;预设</span><br><span class=\"line\">              &#39;@babel&#x2F;preset-env&#39; </span><br><span class=\"line\">            ],</span><br><span class=\"line\">            plugins:[</span><br><span class=\"line\">              &#x2F;&#x2F; 转es7的语法</span><br><span class=\"line\">              [&quot;@babel&#x2F;plugin-proposal-decorators&quot;, &#123; &quot;legacy&quot;: true &#125;],</span><br><span class=\"line\">              [&quot;@babel&#x2F;plugin-proposal-class-properties&quot;, &#123; &quot;loose&quot; : true &#125;]</span><br><span class=\"line\">            ]</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        exclude: &#x2F;node_modules&#x2F;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"转es7的语法\">转es7的语法<a href=\"#转es7的语法\" title=\"转es7的语法\"></a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 转class</span><br><span class=\"line\">npm i @babel&#x2F;plugin-proposal-class-properties -D</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 转装饰器</span><br><span class=\"line\">npm i @babel&#x2F;plugin-proposal-decorators -D</span><br></pre></td></tr></table></figure>\n\n<p>配置如上</p>\n<h3 id=\"其他不兼容的高级语法\">其他不兼容的高级语法<a href=\"#其他不兼容的高级语法\" title=\"其他不兼容的高级语法\"></a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用 @babel&#x2F;polyfill</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"语法检查-eslint\">语法检查 eslint<a href=\"#语法检查-eslint\" title=\"语法检查 eslint\"></a></h2><p><code>npm i eslint eslint-loader -S</code></p>\n<p>根目录添加 <code>.eslintrc.json</code> 配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  module: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: &#x2F;\\.js$&#x2F;,</span><br><span class=\"line\">        use: &#123;</span><br><span class=\"line\">          loader: &#39;eslint-loader&#39;,</span><br><span class=\"line\">          options: &#123;</span><br><span class=\"line\">            enforce: &#39;pre&#39;  &#x2F;&#x2F; previous优先执行  post-普通loader之后执行</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: &#x2F;\\.js$&#x2F;,      &#x2F;&#x2F; mormal 普通的loader</span><br><span class=\"line\">        use: &#123;</span><br><span class=\"line\">          loader: &#39;babel-loader&#39;,</span><br><span class=\"line\">          options: &#123;</span><br><span class=\"line\">            presets: [ &#x2F;&#x2F;预设</span><br><span class=\"line\">              &#39;@babel&#x2F;preset-env&#39; </span><br><span class=\"line\">            ]</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        exclude: &#x2F;node_modules&#x2F;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"全局变量引入\">全局变量引入<a href=\"#全局变量引入\" title=\"全局变量引入\"></a></h2><p>jquery的引入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i jquery -S</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let webpack &#x3D; require(&#39;webpack&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">new webpack.ProvidePlugin(&#123;</span><br><span class=\"line\">  $: &#39;jquery&#39;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>其他情况</p>\n<ol><li>暴露全局</li>\n</ol><p><code>npm i expose-loader -D</code> 暴露全局的<code>loader</code></p>\n<h4 id=\"法1：\">法1：<a href=\"#法1：\" title=\"法1：\"></a></h4><p>可以在js中 <code>import $ from &#39;expose-loader?$!jquery&#39;</code>   // 全局暴露jquery为$符号</p>\n<p>可以调用<code>window.$</code></p>\n<h4 id=\"法2：\">法2：<a href=\"#法2：\" title=\"法2：\"></a></h4><p>也可在<code>webpack.config.js</code> 中配置 <code>rules</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  module: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: require.resolve(&#39;jquery&#39;),</span><br><span class=\"line\">        use: &#39;expose-loader?$&#39;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以后在<code>.js</code>文件中引入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import $ from &#39;jquery&#39;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"法3-如何在每个模块中注入：\">法3. 如何在每个模块中注入：<a href=\"#法3-如何在每个模块中注入：\" title=\"法3. 如何在每个模块中注入：\"></a></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let webpack &#x3D; require(&#39;webpack&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    new webpack.ProvidePlugin(&#123;</span><br><span class=\"line\">      $: &#39;jquery&#39;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">之后代码内直接使用 $</span><br></pre></td></tr></table></figure>\n<h4 id=\"法4：\">法4：<a href=\"#法4：\" title=\"法4：\"></a></h4><p>在<code>index.html</code>中通过<code>script</code>标签引入<code>jquery</code>, 但是在<code>js</code>中，用<code>import</code>会重新打包<code>jquery</code>,如何避免</p>\n<p>从输出的bundle 中排除依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  externals: &#123; &#x2F;&#x2F; 告知webpack是外部引入的，不需要打包</span><br><span class=\"line\">    jquery: &#39;jQuery&#39;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时在index.js上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import $ from &#39;jquery&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log($)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"webpack图片打包\">webpack图片打包<a href=\"#webpack图片打包\" title=\"webpack图片打包\"></a></h2><ol><li>js中创建</li>\n<li>css中引入</li>\n<li><code>&lt;img src=&quot;&quot;&gt;</code></li>\n</ol><p><code>yarn add file-loader -D</code></p>\n<p>适合一二情况</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.export&#x3D;&#123;</span><br><span class=\"line\">  module: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: &#x2F;\\.(png|jpg|gif)$&#x2F;,</span><br><span class=\"line\">        use: &#39;file-loader&#39;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>默认会内部生成一张图片到build,生成图片的路径返回回来</p>\n<p>第一种情况: 图片地址要<code>import</code>引入，直接写图片的地址，会默认为字符串</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import logo from &#39;.&#x2F;logo.png&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">let image &#x3D; new Image()</span><br><span class=\"line\">image.src &#x3D; logo</span><br><span class=\"line\">document.body.appendChild(image)</span><br></pre></td></tr></table></figure>\n\n<p>第二种情况: <code>css-loader</code>会将<code>css</code>里面的图片转为<code>require</code>的格式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div &#123;</span><br><span class=\"line\">  background: url(&quot;.&#x2F;logo.png&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第三种情况: 解析<code>html</code>中的<code>image</code></p>\n<p><code>yarn add html-withimg-loader -D</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  test: &#x2F;\\.html$&#x2F;,</span><br><span class=\"line\">  use: &#39;html-withimg-loader&#39;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"当图片小于多少，用base64\">当图片小于多少，用base64<a href=\"#当图片小于多少，用base64\" title=\"当图片小于多少，用base64\"></a></h2><p><code>yarn add url-loader -D</code></p>\n<p>如果过大，才用<code>file-loader</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  test: &#x2F;\\.(png|jpg|gif)$&#x2F;,</span><br><span class=\"line\">  &#x2F;&#x2F; 当图片小于多少，用base64,否则用file-loader产生真实的图片</span><br><span class=\"line\">  use: &#123;</span><br><span class=\"line\">    loader: &#39;url-loader&#39;,</span><br><span class=\"line\">    options: &#123;</span><br><span class=\"line\">      limit: 200 * 1024,          &#x2F;&#x2F; 小于200k变成base64</span><br><span class=\"line\">      &#x2F;&#x2F; outputPath: &#39;&#x2F;img&#x2F;&#39;,     &#x2F;&#x2F; 打包后输出地址</span><br><span class=\"line\">      &#x2F;&#x2F; publicPath: &#39;&#39;           &#x2F;&#x2F; 给资源加上域名路径</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"打包文件分类\">打包文件分类<a href=\"#打包文件分类\" title=\"打包文件分类\"></a></h2><p>1.图片:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  test: &#x2F;\\.(png|jpg|gif)$&#x2F;,</span><br><span class=\"line\">  &#x2F;&#x2F; 当图片小于多少，用base64,否则用file-loader产生真实的图片</span><br><span class=\"line\">  use: &#123;</span><br><span class=\"line\">    loader: &#39;url-loader&#39;,</span><br><span class=\"line\">    options: &#123;</span><br><span class=\"line\">      limit: 1,  &#x2F;&#x2F; 200k 200 * 1024</span><br><span class=\"line\">      outputPath: &#39;img&#x2F;&#39;   &#x2F;&#x2F; 打包后输出地址 在dist&#x2F;img</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>2.css:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [</span><br><span class=\"line\">  new MiniCssExtractPlugin(&#123;</span><br><span class=\"line\">    filename: &#39;css&#x2F;main.css&#39;</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"希望输出的时候，给这些cssimg加上前缀，传到服务器也能访问\">希望输出的时候，给这些<code>css\\img</code>加上前缀，传到服务器也能访问<a href=\"#希望输出的时候，给这些cssimg加上前缀，传到服务器也能访问\" title=\"希望输出的时候，给这些css\\img加上前缀，传到服务器也能访问\"></a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output: &#123;</span><br><span class=\"line\">  filename: &#39;bundle.[hash:8].js&#39;,   &#x2F;&#x2F; hash: 8只显示8位</span><br><span class=\"line\">  path: path.resolve(__dirname, &#39;dist&#39;),</span><br><span class=\"line\">  publicPath: &#39;http:&#x2F;&#x2F;www.mayufo.cn&#39;  &#x2F;&#x2F; 给静态资源统一加</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"如果只希望处理图片\">如果只希望处理图片<a href=\"#如果只希望处理图片\" title=\"如果只希望处理图片\"></a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  test: &#x2F;\\.(png|jpg|gif)$&#x2F;,</span><br><span class=\"line\">  &#x2F;&#x2F; 当图片小于多少，用base64,否则用file-loader产生真实的图片</span><br><span class=\"line\">  use: &#123;</span><br><span class=\"line\">    loader: &#39;url-loader&#39;,</span><br><span class=\"line\">    options: &#123;</span><br><span class=\"line\">      limit: 1,  &#x2F;&#x2F; 200k 200 * 1024</span><br><span class=\"line\">      outputPath: &#39;&#x2F;img&#x2F;&#39;,   &#x2F;&#x2F; 打包后输出地址</span><br><span class=\"line\">      publicPath: &#39;http:&#x2F;&#x2F;www.mayufo.cn&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"打包多页应用\">打包多页应用<a href=\"#打包多页应用\" title=\"打包多页应用\"></a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 多入口</span><br><span class=\"line\">let path &#x3D; require(&#39;path&#39;)</span><br><span class=\"line\">let HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  mode: &#39;development&#39;,</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    home: &#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class=\"line\">    other: &#39;.&#x2F;src&#x2F;other.js&#39;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: &quot;[name].js&quot;,</span><br><span class=\"line\">    path: path.resolve(__dirname, &#39;dist2&#39;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      template: &#39;.&#x2F;index.html&#39;,</span><br><span class=\"line\">      filename: &#39;home.html&#39;,</span><br><span class=\"line\">      chunks: [&#39;home&#39;]</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      template: &#39;.&#x2F;index.html&#39;,</span><br><span class=\"line\">      filename: &#39;other.html&#39;,</span><br><span class=\"line\">      chunks: [&#39;other&#39;, &#39;home&#39;]   &#x2F;&#x2F; other.html 里面有 other.js &amp; home.js</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置source-map\">配置<code>source-map</code><a href=\"#配置source-map\" title=\"配置source-map\"></a></h2><p><code>yarn add @babel/core  @babel/preset-env babel-loader  webpack-dev-server -D</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  devtool: &#39;source-map&#39; &#x2F;&#x2F; 增加映射文件调试源代码</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol><li>源码映射 会标识错误的代码 打包后生成独立的文件 大而全 「source-map」</li>\n<li>不会陈胜单独的文件 但是可以显示行和列  「eval-source-map」</li>\n<li>不会产生列有行，产生单独的映射文件  「cheap-module-source-map」</li>\n<li>不会产生文件 集成在打包后的文件中 不会产生列有行 「cheap-module-eval-source-map」</li>\n</ol><h2 id=\"watch-改完代表重新打包实体\"><code>watch</code> 改完代表重新打包实体<a href=\"#watch-改完代表重新打包实体\" title=\"watch 改完代表重新打包实体\"></a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  watch: true,</span><br><span class=\"line\">  watchOptions: &#123;</span><br><span class=\"line\">    poll: 1000,              &#x2F;&#x2F; 每秒监听1000次</span><br><span class=\"line\">    aggregateTimeout: 300,   &#x2F;&#x2F; 防抖，当第一个文件更改，会在重新构建前增加延迟</span><br><span class=\"line\">    ignored: &#x2F;node_modules&#x2F;  &#x2F;&#x2F; 对于某些系统，监听大量文件系统会导致大量的 CPU 或内存占用。这个选项可以排除一些巨大的文件夹，</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"webpack的其他三个小插件\"><code>webpack</code>的其他三个小插件<a href=\"#webpack的其他三个小插件\" title=\"webpack的其他三个小插件\"></a></h2><ol><li><code>cleanWebpackPlugin</code></li>\n</ol><p>每次打包之前删掉dist目录<br><code>yarn add clean-webpack-plugin -D</code></p>\n<p><a href=\"https://github.com/johnagan/clean-webpack-plugin\" target=\"_blank\">clean-webpack-plugin</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const CleanWebpackPlugin &#x3D; require(&#39;clean-webpack-plugin&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.resolve(process.cwd(), &#39;dist&#39;),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    new CleanWebpackPlugin(&#39;.&#x2F;dist&#39;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol><li><code>copyWebpackPlugin</code></li>\n</ol><p>一些静态资源也希望拷贝的dist中</p>\n<p><code>yarn add copy-webpack-plugin -D</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const CopyWebpackPlugin &#x3D; require(&#39;copy-webpack-plugin&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    new CopyWebpackPlugin([</span><br><span class=\"line\">      &#123;from: &#39;doc&#39;, to: &#39;.&#x2F;dist&#39;&#125;</span><br><span class=\"line\">    ])</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol><li><code>bannerPlugin</code>内置模块</li>\n</ol><p>版权声明</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const webpack &#x3D; require(&#39;webpack&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">new webpack.BannerPlugin(&#39;hello world&#39;)</span><br><span class=\"line\">&#x2F;&#x2F; or</span><br><span class=\"line\">new webpack.BannerPlugin(&#123; banner: &#39;hello world&#39;&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"webpack-跨域\"><code>webpack</code> 跨域<a href=\"#webpack-跨域\" title=\"webpack 跨域\"></a></h2><p>设置一个服务,由于<code>webpack-dev-server</code>内含<code>express</code></p>\n<p><a href=\"https://expressjs.com/zh-cn/starter/hello-world.html\" target=\"_blank\">express</a></p>\n<p><code>server.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; express</span><br><span class=\"line\"></span><br><span class=\"line\">let express &#x3D; require(&#39;express&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">let app &#x3D; express();</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(&#39;&#x2F;api&#x2F;user&#39;, (res) &#x3D;&gt; &#123;</span><br><span class=\"line\">  res.json(&#123;name: &#39;mayufo&#39;&#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(3000)   &#x2F;&#x2F; 服务端口在3000</span><br></pre></td></tr></table></figure>\n\n<p>写完后记得<code>node server.js</code></p>\n<p>访问 <code>http://localhost:3000/api/user</code> 可见内容</p>\n<p><code>index.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 发送一个请求</span><br><span class=\"line\">let xhr &#x3D; new XMLHttpRequest();</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 默认访问 http:&#x2F;&#x2F;localhost:8080  webpack-dev-server 的服务 再转发给3000</span><br><span class=\"line\">xhr.open(&#39;GET&#39;, &#39;&#x2F;api&#x2F;user&#39;, true);</span><br><span class=\"line\"></span><br><span class=\"line\">xhr.onload &#x3D; function () &#123;</span><br><span class=\"line\">  console.log(xhr.response)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">xhr.send();</span><br></pre></td></tr></table></figure>\n\n\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    proxy: &#123;</span><br><span class=\"line\">      &#39;&#x2F;api&#39;: &#39;http:&#x2F;&#x2F;localhost:3000&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1如果后端给的请求没有api-「跨域」\">1.如果后端给的请求没有API 「跨域」<a href=\"#1如果后端给的请求没有api-「跨域」\" title=\"1.如果后端给的请求没有API 「跨域」\"></a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; express</span><br><span class=\"line\"></span><br><span class=\"line\">let express &#x3D; require(&#39;express&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">let app &#x3D; express();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">app.get(&#39;&#x2F;user&#39;, (res) &#x3D;&gt; &#123;</span><br><span class=\"line\">  res.json(&#123;name: &#39;mayufo&#39;&#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(3000)   &#x2F;&#x2F; 服务端口在3000</span><br></pre></td></tr></table></figure>\n\n\n<p>请求已api开头, 转发的时候再删掉api</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">devServer: &#123;</span><br><span class=\"line\">  proxy: &#123;</span><br><span class=\"line\">    &#39;&#x2F;api&#39;: &#123;</span><br><span class=\"line\">      target: &#39;http:&#x2F;&#x2F;localhost:3000&#39;,</span><br><span class=\"line\">      pathRewrite: &#123;&#39;^&#x2F;api&#39;: &#39;&#39;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2前端只想单纯mock数据-「跨域」\">2.前端只想单纯mock数据 「跨域」<a href=\"#2前端只想单纯mock数据-「跨域」\" title=\"2.前端只想单纯mock数据 「跨域」\"></a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">devServer: &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; proxy: &#123;</span><br><span class=\"line\">  &#x2F;&#x2F;     &#39;&#x2F;api&#39;: &#39;http:&#x2F;&#x2F;localhost:3000&#39; &#x2F;&#x2F; 配置一个代理</span><br><span class=\"line\">  &#x2F;&#x2F; &#125;</span><br><span class=\"line\">  &#x2F;&#x2F;   proxy: &#123;   &#x2F;&#x2F; 重写方式 把请求代理到express 上</span><br><span class=\"line\">  &#x2F;&#x2F;       &#39;&#x2F;api&#39;: &#123;</span><br><span class=\"line\">  &#x2F;&#x2F;           target: &#39;http:&#x2F;&#x2F;localhost:3000&#39;,</span><br><span class=\"line\">  &#x2F;&#x2F;           pathRewrite: &#123;&#39;^&#x2F;api&#39;: &#39;&#39;&#125;</span><br><span class=\"line\">  &#x2F;&#x2F;       &#125;</span><br><span class=\"line\">  &#x2F;&#x2F;   &#125;</span><br><span class=\"line\">  before: function (app) &#123;  &#x2F;&#x2F; 勾子</span><br><span class=\"line\">    app.get(&#39;&#x2F;api&#x2F;user&#39;, (req, res) &#x3D;&gt; &#123;</span><br><span class=\"line\">      res.json(&#123;name: &#39;tigerHee&#39;&#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3有服务端，不用代理-服务端启动webpack-「跨域」\">3.有服务端，不用代理, 服务端启动webpack 「跨域」<a href=\"#3有服务端，不用代理-服务端启动webpack-「跨域」\" title=\"3.有服务端，不用代理, 服务端启动webpack 「跨域」\"></a></h2><p><code>server.js</code>中启动<code>webpack</code></p>\n<p><code>yarn add webpack-dev-middleware -D</code></p>\n<p><code>server.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; express</span><br><span class=\"line\"></span><br><span class=\"line\">let express &#x3D; require(&#39;express&#39;)</span><br><span class=\"line\">let webpack &#x3D; require(&#39;webpack&#39;)</span><br><span class=\"line\">let app &#x3D; express();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 中间件</span><br><span class=\"line\">let middle &#x3D; require(&#39;webpack-dev-middleware&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">let config &#x3D; require(&#39;.&#x2F;webpack.config&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">let compiler &#x3D; webpack(config)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">app.use(middle(compiler))</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(&#39;&#x2F;user&#39;, (req, res) &#x3D;&gt; &#123;</span><br><span class=\"line\">  res.json(&#123;name: &#39;mayufo&#39;&#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(3000)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"webpack解析resolve\">webpack解析resolve<a href=\"#webpack解析resolve\" title=\"webpack解析resolve\"></a></h2><p>以<code>bootstrap</code>为例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install bootstrap  -D</span><br></pre></td></tr></table></figure>\n\n<p><code>index.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#39;bootstrap&#x2F;dist&#x2F;css&#x2F;bootstrap.css&#39;</span><br></pre></td></tr></table></figure>\n\n<p>报错</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR in .&#x2F;node_modules&#x2F;bootstrap&#x2F;dist&#x2F;css&#x2F;bootstrap.css 7:0</span><br><span class=\"line\">Module parse failed: Unexpected token (7:0)</span><br><span class=\"line\">You may need an appropriate loader to handle this file type.</span><br><span class=\"line\">|  * Licensed under MIT (https:&#x2F;&#x2F;github.com&#x2F;twbs&#x2F;bootstrap&#x2F;blob&#x2F;master&#x2F;LICENSE)</span><br><span class=\"line\">|  *&#x2F;</span><br><span class=\"line\">&gt; :root &#123;</span><br><span class=\"line\">|   --blue: #007bff;</span><br><span class=\"line\">|   --indigo: #6610f2;</span><br><span class=\"line\"> @ .&#x2F;src&#x2F;index.js 22:0-42</span><br><span class=\"line\"> @ multi (webpack)-dev-server&#x2F;client?http:&#x2F;&#x2F;localhost:8081 .&#x2F;src&#x2F;index.js</span><br></pre></td></tr></table></figure>\n\n<p>这是因为<code>bootstrap</code> 4.0的css引入了新的特性，CSS Variables</p>\n<p>安装<br><code>npm install postcss-custom-properties --save-dev</code></p>\n<p>配置<code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  test: &#x2F;\\.css$&#x2F;,</span><br><span class=\"line\">  use: [&#39;style-loader&#39;, &#39;css-loader&#39;, &#123;</span><br><span class=\"line\">    loader: &#39;postcss-loader&#39;,</span><br><span class=\"line\">    options: &#123;</span><br><span class=\"line\">      plugins: (loader) &#x3D;&gt; [</span><br><span class=\"line\">        require(&quot;postcss-custom-properties&quot;)</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"但是每次引入都很长，如何优雅引入\">但是每次引入都很长，如何优雅引入<a href=\"#但是每次引入都很长，如何优雅引入\" title=\"但是每次引入都很长，如何优雅引入\"></a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resolve: &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; 在当前目录查找</span><br><span class=\"line\">  modules: [path.resolve(&#39;node_modules&#39;)],</span><br><span class=\"line\">  alias: &#123;</span><br><span class=\"line\">      &#39;bootstrapCss&#39;: &#39;bootstrap&#x2F;dist&#x2F;css&#x2F;bootstrap.css&#39;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#39;bootstrapCss&#39;  &#x2F;&#x2F; 在node_modules查找</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"省略扩展名\">省略扩展名<a href=\"#省略扩展名\" title=\"省略扩展名\"></a></h2><p>extensions:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resolve: &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; 在当前目录查找</span><br><span class=\"line\">  modules: [path.resolve(&#39;node_modules&#39;)],</span><br><span class=\"line\">  &#x2F;&#x2F; alias: &#123;</span><br><span class=\"line\">  &#x2F;&#x2F;   &#39;bootstrapCss&#39;: &#39;bootstrap&#x2F;dist&#x2F;css&#x2F;bootstrap.css&#39;</span><br><span class=\"line\">  &#x2F;&#x2F; &#125;,</span><br><span class=\"line\">  mainFields: [&#39;style&#39;, &#39;main&#39;],   &#x2F;&#x2F; 先用bootstrap中在package中的style,没有在用main</span><br><span class=\"line\">  &#x2F;&#x2F; mainFiles: []  &#x2F;&#x2F; 入口文件的名字 默认index</span><br><span class=\"line\">  extensions: [&#39;.js&#39;, &#39;.css&#39;, &#39;.json&#39;]  &#x2F;&#x2F; 当没有拓展命的时候，先默认js、次之css、再次之json</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"定义环境变量\">定义环境变量<a href=\"#定义环境变量\" title=\"定义环境变量\"></a></h2><p><code>DefinePlugin</code> 允许创建一个在编译时可以配置的全局常量。这可能会对开发模式和生产模式的构建允许不同的行为非常有用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let url &#x3D; &#39;&#39;</span><br><span class=\"line\">if (DEV &#x3D;&#x3D;&#x3D; &#39;dev&#39;) &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; 开发环境</span><br><span class=\"line\">  url &#x3D; &#39;http:&#x2F;&#x2F;localhost:3000&#39;</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; 生成环境</span><br><span class=\"line\">  url &#x3D; &#39;http:&#x2F;&#x2F;www.mayufo.cn&#39;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new webpack.DefinePlugin(&#123;</span><br><span class=\"line\">  &#x2F;&#x2F; DEV: &#39;&quot;production&quot;&#39;,</span><br><span class=\"line\">  DEV: JSON.stringify(&#39;production&#39;),</span><br><span class=\"line\">  FLAG: &#39;true&#39;,   &#x2F;&#x2F; 布尔</span><br><span class=\"line\">  EXPRESSION: &#39;1 + 1&#39;   &#x2F;&#x2F; 字符串 如果希望是字符串 JSON.stringify(&#39;1 + 1&#39;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"区分两个不同的环境\">区分两个不同的环境<a href=\"#区分两个不同的环境\" title=\"区分两个不同的环境\"></a></h2><p>分别配置不同的环境</p>\n<ul><li><code>webpack.base4.js</code>   基础配置</li>\n<li><code>webpack.dev4.js</code>    开发环境</li>\n<li><code>webpack.prod4.js</code>   生产环境</li>\n</ul><p><code>yarn add webpack-merge -D</code></p>\n<p><code>npm run build -- -- config webpack.dev4.js</code><br><code>npm run build -- -- config webpack.build.js</code></p>\n<p><a href=\"https://webpack.docschina.org/guides/production/\" target=\"_blank\">官方文档</a></p>\n<p><code>webpack.base4.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let path &#x3D; require(&#39;path&#39;)</span><br><span class=\"line\">let HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;)</span><br><span class=\"line\">let CleanWebpackPlugin &#x3D; require(&#39;clean-webpack-plugin&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    home: &#39;.&#x2F;src&#x2F;index.js&#39;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: &quot;[name].js&quot;,</span><br><span class=\"line\">    path: path.resolve(process.cwd(), &#39;dist3&#39;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  module: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: &#x2F;\\.js$&#x2F;,</span><br><span class=\"line\">        use: &#123;</span><br><span class=\"line\">          loader: &#39;babel-loader&#39;,</span><br><span class=\"line\">          options: &#123;</span><br><span class=\"line\">            presets: [</span><br><span class=\"line\">              &#39;@babel&#x2F;preset-env&#39;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: &#x2F;\\.css$&#x2F;,</span><br><span class=\"line\">        use: [&#39;style-loader&#39;, &#39;css-loader&#39;, &#123;</span><br><span class=\"line\">          loader: &#39;postcss-loader&#39;,</span><br><span class=\"line\">          options: &#123;</span><br><span class=\"line\">            plugins: (loader) &#x3D;&gt; [</span><br><span class=\"line\">              require(&quot;postcss-custom-properties&quot;)</span><br><span class=\"line\">            ]</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      template: &#39;.&#x2F;src&#x2F;index.html&#39;,</span><br><span class=\"line\">      filename: &#39;index.html&#39;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>webpack.dev4.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let merge &#x3D; require(&#39;webpack-merge&#39;)</span><br><span class=\"line\">let base &#x3D; require(&#39;.&#x2F;webpack.base4.js&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; merge(base, &#123;</span><br><span class=\"line\">  mode: &#39;development&#39;,</span><br><span class=\"line\">  devServer: &#123;&#125;,</span><br><span class=\"line\">  devtool: &#39;source-map&#39;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><code>webpack.prod4.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let merge &#x3D; require(&#39;webpack-merge&#39;)</span><br><span class=\"line\">let base &#x3D; require(&#39;.&#x2F;webpack.base4.js&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; merge(base, &#123;</span><br><span class=\"line\">  mode: &#39;production&#39;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><code>package.json</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">  &quot;build&quot;: &quot;webpack  --config webpack.prod4.js&quot;,</span><br><span class=\"line\">  &quot;dev&quot;: &quot;webpack-dev-server --config webpack.dev4.js&quot;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"webpack-优化\">webpack 优化<a href=\"#webpack-优化\" title=\"webpack 优化\"></a></h2><p><code>yarn add webpack webpack-cli html-webpack-plugin @babel/core babel-loader @babel/preset-env @babel/preset-react -D</code></p>\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let path &#x3D; require(&#39;path&#39;)</span><br><span class=\"line\">let HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  mode: &#39;development&#39;,</span><br><span class=\"line\">  entry: &#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: &#39;main.js&#39;,</span><br><span class=\"line\">    path: path.resolve(__dirname, &#39;dist&#39;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  module: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: &#x2F;\\.js$&#x2F;,</span><br><span class=\"line\">        use: &#123;</span><br><span class=\"line\">          loader: &#39;babel-loader&#39;,</span><br><span class=\"line\">          options: &#123;</span><br><span class=\"line\">            presets: [</span><br><span class=\"line\">              &#39;@babel&#x2F;preset-env&#39;,</span><br><span class=\"line\">              &#39;@babel&#x2F;preset-react&#39;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      template: &#39;.&#x2F;src&#x2F;index.html&#39;,</span><br><span class=\"line\">      filename: &#39;index.html&#39;</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"优化：当某些包是独立的个体没有依赖\">优化：当某些包是独立的个体没有依赖<a href=\"#优化：当某些包是独立的个体没有依赖\" title=\"优化：当某些包是独立的个体没有依赖\"></a></h2><p>以jquery为例，<code>yarn add jquery -D</code>,它是一个独立的包没有依赖，可以在webpack配置中，配置它不再查找依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module: &#123;</span><br><span class=\"line\">    noParse: &#x2F;jquery&#x2F;, &#x2F;&#x2F; 不用解析某些包的依赖</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: &#x2F;\\.js$&#x2F;,</span><br><span class=\"line\">        use: &#123;</span><br><span class=\"line\">          loader: &#39;babel-loader&#39;,</span><br><span class=\"line\">          options: &#123;</span><br><span class=\"line\">            presets: [</span><br><span class=\"line\">              &#39;@babel&#x2F;preset-env&#39;,</span><br><span class=\"line\">              &#39;@babel&#x2F;preset-react&#39;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行<code>npx webpack</code></p>\n<p>从2057ms  -&gt; 1946 ms</p>\n<h2 id=\"优化：规则匹配设置范围\">优化：规则匹配设置范围<a href=\"#优化：规则匹配设置范围\" title=\"优化：规则匹配设置范围\"></a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rules: [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    test: &#x2F;\\.js$&#x2F;,</span><br><span class=\"line\">    exclude: &#39;&#x2F;node_modules&#x2F;&#39;,   &#x2F;&#x2F; 排除</span><br><span class=\"line\">    include: path.resolve(&#39;src&#39;),  &#x2F;&#x2F; 在这个范围内</span><br><span class=\"line\">    use: &#123;</span><br><span class=\"line\">      loader: &#39;babel-loader&#39;,</span><br><span class=\"line\">      options: &#123;</span><br><span class=\"line\">        presets: [</span><br><span class=\"line\">          &#39;@babel&#x2F;preset-env&#39;,</span><br><span class=\"line\">          &#39;@babel&#x2F;preset-react&#39;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>尽量实用<code>include</code>,不使用<code>exclude</code>,使用绝对路径</p>\n<h2 id=\"优化：忽略依赖中不必要的语言包\">优化：忽略依赖中不必要的语言包<a href=\"#优化：忽略依赖中不必要的语言包\" title=\"优化：忽略依赖中不必要的语言包\"></a></h2><p><code>yarn add moment webpack-dev-server -D</code></p>\n<p>忽略掉<code>moment</code>的其他语言包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let webpack &#x3D; require(&#39;webpack&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">    new webpack.IgnorePlugin(&#x2F;\\.\\&#x2F;locale&#x2F;, &#x2F;moment&#x2F;)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p><code>index.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import moment from &#39;moment&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">let r &#x3D; moment().endOf(&#39;day&#39;).fromNow()  &#x2F;&#x2F; 距离现在多少天</span><br><span class=\"line\">console.log(r);</span><br></pre></td></tr></table></figure>\n\n\n<p>从 1.2MB 到  800kb</p>\n<h2 id=\"动态链接库\">动态链接库<a href=\"#动态链接库\" title=\"动态链接库\"></a></h2><p><code>yarn add react react-dom</code></p>\n<p>正常使用</p>\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  test: &#x2F;\\.js$&#x2F;,</span><br><span class=\"line\">  exclude: &#39;&#x2F;node_modules&#x2F;&#39;,</span><br><span class=\"line\">  include: path.resolve(&#39;src&#39;),</span><br><span class=\"line\">  use: &#123;</span><br><span class=\"line\">    loader: &#39;babel-loader&#39;,</span><br><span class=\"line\">    options: &#123;</span><br><span class=\"line\">      presets: [</span><br><span class=\"line\">        &#39;@babel&#x2F;preset-env&#39;,</span><br><span class=\"line\">        &#39;@babel&#x2F;preset-react&#39;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>index.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &#39;react&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">import &#123;render&#125; from &#39;react-dom&#39;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">render(&lt;h1&gt;111111&lt;&#x2F;h1&gt;, window.root)</span><br></pre></td></tr></table></figure>\n\n<p><code>index.html</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;root&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>独立的将<code>react react-dom</code> 打包好, 打包好再引用，从而减少<code>webpack</code>每次都要打包<code>react</code></p>\n<p>创建<code>webpack.config.react.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let path &#x3D; require(&#39;path&#39;)</span><br><span class=\"line\">let webpack &#x3D; require(&#39;webpack&#39;)</span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  mode: &#39;development&#39;,</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; test: &#39;.&#x2F;src&#x2F;test.js&#39;</span><br><span class=\"line\">    react: [&#39;react&#39;, &#39;react-dom&#39;]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: &#39;_dll_[name].js&#39;,  &#x2F;&#x2F; 产生的文件名</span><br><span class=\"line\">    path: path.resolve(__dirname, &#39;dist&#39;),</span><br><span class=\"line\">    library: &#39;_dll_[name]&#39;,     &#x2F;&#x2F; 给输出的结果加个名字</span><br><span class=\"line\">    &#x2F;&#x2F; libraryTarget: &#39;var&#39;   &#x2F;&#x2F; 配置如何暴露 library</span><br><span class=\"line\">    &#x2F;&#x2F; commonjs 结果放在export属性上， umd统一资源模块, 默认是var</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    new webpack.DllPlugin(&#123;</span><br><span class=\"line\">      name: &#39;_dll_[name]&#39;,   &#x2F;&#x2F; name &#x3D;&#x3D;&#x3D; library</span><br><span class=\"line\">      path: path.resolve(__dirname, &#39;dist&#39;, &#39;manifest.json&#39;)  &#x2F;&#x2F; manifest.json 定义了各个模块的路径</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://webpack.docschina.org/configuration/output/#%E6%9A%B4%E9%9C%B2%E4%B8%BA%E4%B8%80%E4%B8%AA%E5%8F%98%E9%87%8F\" target=\"_blank\">libraryTarget</a></p>\n<p><code>manifest.json</code>就是一个任务清单or动态链接库，在这个清单里面查找react</p>\n<p><code>npx webpack --config webpack.config.react.js</code></p>\n<p>在<code>index.html</code>增加引用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;root&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;script src&#x3D;&quot;&#x2F;_dll_react.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在webpack.config.js 中配置，现在动态链接库<code>manifest.json</code>中查找,如果没有再打包react</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [</span><br><span class=\"line\">  new webpack.DllReferencePlugin(&#123;</span><br><span class=\"line\">    manifest: path.resolve(__dirname, &#39;dist&#39;, &#39;manifest.json&#39;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://webpack.docschina.org/plugins/dll-plugin/#src/components/Sidebar/Sidebar.jsx\" target=\"_blank\">DLLPlugin 和 DLLReferencePlugin</a></p>\n<p><code>npm run build</code></p>\n<p>打包后的<code>bunle.js</code>文件变小</p>\n<p><code>npm run dev</code></p>\n<p>可以理解为先把react打包，后面每次都直接使用react打包后的结果</p>\n<h2 id=\"多线程打包happypack\">多线程打包<code>happypack</code><a href=\"#多线程打包happypack\" title=\"多线程打包happypack\"></a></h2><p><code>yarn add happypack</code></p>\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let Happypack &#x3D; require(&#39;happypack&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">rules: [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    test: &#x2F;\\.js$&#x2F;,</span><br><span class=\"line\">    exclude: &#39;&#x2F;node_modules&#x2F;&#39;,</span><br><span class=\"line\">    include: path.resolve(&#39;src&#39;),</span><br><span class=\"line\">    use: &#39;happypack&#x2F;loader?id&#x3D;js&#39;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">  new Happypack(&#123;</span><br><span class=\"line\">    id: &#39;js&#39;,</span><br><span class=\"line\">    use: [&#123;</span><br><span class=\"line\">      loader: &#39;babel-loader&#39;,</span><br><span class=\"line\">      options: &#123;</span><br><span class=\"line\">        presets: [</span><br><span class=\"line\">          &#39;@babel&#x2F;preset-env&#39;,</span><br><span class=\"line\">          &#39;@babel&#x2F;preset-react&#39;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>js启用多线程，由于启用多线程也会浪费时间，因此当项目比较大的时候启用效果更好</p>\n<p>css启用多线程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  test: &#x2F;\\.css$&#x2F;,</span><br><span class=\"line\">  use: &#39;happypack&#x2F;loader?id&#x3D;css&#39;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">new Happypack(&#123;</span><br><span class=\"line\">  id: &#39;css&#39;,</span><br><span class=\"line\">  use: [&#39;style-loader&#39;, &#39;css-loader&#39;]</span><br><span class=\"line\">&#125;),</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"webpack-自带的优化\">webpack 自带的优化<a href=\"#webpack-自带的优化\" title=\"webpack 自带的优化\"></a></h2><p><code>test.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let sum &#x3D; (a, b) &#x3D;&gt; &#123;</span><br><span class=\"line\">  return a + b + &#39;sum&#39;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let minus &#x3D; (a, b) &#x3D;&gt; &#123;</span><br><span class=\"line\">  return a - b + &#39;minus&#39;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  sum, minus</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol><li>使用import </li>\n</ol><p><code>index.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import calc from &#39;.&#x2F;test&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(calc.sum(1, 2));</span><br></pre></td></tr></table></figure>\n\n\n<p>import在生产环境下会自动去除没有用的代码<code>minus</code>，这叫<code>tree-shaking</code>，将没有用的代码自动删除掉</p>\n<p><code>index.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let calc &#x3D; require(&#39;.&#x2F;test&#39;)</span><br><span class=\"line\">console.log(calc);   &#x2F;&#x2F; es 6导出，是一个default的对象</span><br><span class=\"line\">console.log(calc.default.sum(1, 2));</span><br></pre></td></tr></table></figure>\n\n<p>require引入es6 模块会把结果放在default上,打包build后并不会把多余<code>minus</code>代码删除掉，不支持<code>tree-shaking</code></p>\n<ol><li>作用域的提升</li>\n</ol><p><code>index.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a &#x3D; 1</span><br><span class=\"line\">let b &#x3D; 2</span><br><span class=\"line\">let c &#x3D; 3</span><br><span class=\"line\">let d &#x3D; a + b + c</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(d, &#39;---------&#39;);</span><br></pre></td></tr></table></figure>\n<p>打包出来的文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(r.default.sum(1,2));console.log(6,&quot;---------&quot;)</span><br></pre></td></tr></table></figure>\n\n<p>在webpack中可以省略一些可以简化的代码</p>\n<h2 id=\"抽取公共代码\">抽取公共代码<a href=\"#抽取公共代码\" title=\"抽取公共代码\"></a></h2><ol><li>抽离自有模块</li>\n</ol><p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  optimization: &#123;</span><br><span class=\"line\">    splitChunks: &#123;             &#x2F;&#x2F; 分割代码块，针对多入口</span><br><span class=\"line\">      cacheGroups: &#123;           &#x2F;&#x2F; 缓存组</span><br><span class=\"line\">        common: &#123;              &#x2F;&#x2F; 公共模块</span><br><span class=\"line\">          minSize: 0,          &#x2F;&#x2F; 大于多少抽离</span><br><span class=\"line\">          minChunks: 2,        &#x2F;&#x2F; 使用多少次以上抽离抽离</span><br><span class=\"line\">          chunks: &#39;initial&#39;    &#x2F;&#x2F; 从什么地方开始, 从入口开始</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://webpack.docschina.org/plugins/split-chunks-plugin/\" target=\"_blank\">SplitChunksPlugin</a></p>\n<p>分别有a.js和b.js, index.js和other.js分别引入a和b两个js</p>\n<p><code>index.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#39;.&#x2F;a&#39;</span><br><span class=\"line\">import &#39;.&#x2F;b&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&#39;index.js&#39;);</span><br></pre></td></tr></table></figure>\n\n<p><code>other.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#39;.&#x2F;a&#39;</span><br><span class=\"line\">import &#39;.&#x2F;b&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&#39;other.js&#39;);</span><br></pre></td></tr></table></figure>\n\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  optimization: &#123;</span><br><span class=\"line\">    splitChunks: &#123;             &#x2F;&#x2F; 分割代码块，针对多入口</span><br><span class=\"line\">      cacheGroups: &#123;           &#x2F;&#x2F; 缓存组</span><br><span class=\"line\">        common: &#123;              &#x2F;&#x2F; 公共模块</span><br><span class=\"line\">          minSize: 0,          &#x2F;&#x2F; 大于多少抽离</span><br><span class=\"line\">          minChunks: 2,        &#x2F;&#x2F; 使用多少次以上抽离抽离</span><br><span class=\"line\">          chunks: &#39;initial&#39;    &#x2F;&#x2F; 从什么地方开始, 从入口开始</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol><li>抽离第三方模块</li>\n</ol><p>比如jquery</p>\n<p><code>index.js</code> 和 <code>other.js</code>分别引入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import $ from &#39;jquery&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log($);</span><br></pre></td></tr></table></figure>\n\n<p>修改<code>webpack.config.js</code>配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">optimization: &#123;</span><br><span class=\"line\">  splitChunks: &#123;              &#x2F;&#x2F; 分割代码块，针对多入口</span><br><span class=\"line\">    cacheGroups: &#123;            &#x2F;&#x2F; 缓存组</span><br><span class=\"line\">      common: &#123;               &#x2F;&#x2F; 公共模块</span><br><span class=\"line\">        minSize: 0,           &#x2F;&#x2F; 大于多少抽离</span><br><span class=\"line\">        minChunks: 2,         &#x2F;&#x2F; 使用多少次以上抽离抽离</span><br><span class=\"line\">        chunks: &#39;initial&#39;     &#x2F;&#x2F; 从什么地方开始,刚开始</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      vendor: &#123;</span><br><span class=\"line\">        priority: 1,          &#x2F;&#x2F; 增加权重, (先抽离第三方)</span><br><span class=\"line\">        test: &#x2F;node_modules&#x2F;, &#x2F;&#x2F; 把此目录下的抽离</span><br><span class=\"line\">        minSize: 0,           &#x2F;&#x2F; 大于多少抽离</span><br><span class=\"line\">        minChunks: 2,         &#x2F;&#x2F; 使用多少次以上抽离抽离</span><br><span class=\"line\">        chunks: &#39;initial&#39;     &#x2F;&#x2F; 从什么地方开始,刚开始</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"懒加载延迟加载\">懒加载(延迟加载)<a href=\"#懒加载延迟加载\" title=\"懒加载(延迟加载)\"></a></h2><p><code>yarn add @babel/plugin-syntax-dynamic-import  -D</code></p>\n<p><code>source.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default &#39;mayufo&#39;</span><br></pre></td></tr></table></figure>\n\n<p><code>index.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let button &#x3D; document.createElement(&#39;button&#39;)</span><br><span class=\"line\">button.innerHTML &#x3D; &#39;hello&#39;</span><br><span class=\"line\">button.addEventListener(&#39;click&#39;, function () &#123;</span><br><span class=\"line\">  console.log(&#39;click&#39;)</span><br><span class=\"line\">  &#x2F;&#x2F; es6草案中的语法，jsonp实现动态加载文件</span><br><span class=\"line\">  import(&#39;.&#x2F;source.js&#39;).then(data &#x3D;&gt; &#123;</span><br><span class=\"line\">    console.log(data.default)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">document.body.appendChild(button)</span><br></pre></td></tr></table></figure>\n\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  test: &#x2F;\\.js$&#x2F;,</span><br><span class=\"line\">  exclude: &#39;&#x2F;node_modules&#x2F;&#39;,</span><br><span class=\"line\">  include: path.resolve(&#39;src&#39;),</span><br><span class=\"line\">  use: [&#123;</span><br><span class=\"line\">    loader: &#39;babel-loader&#39;,</span><br><span class=\"line\">    options: &#123;</span><br><span class=\"line\">      presets: [</span><br><span class=\"line\">        &#39;@babel&#x2F;preset-env&#39;,</span><br><span class=\"line\">        &#39;@babel&#x2F;preset-react&#39;</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      plugins: [</span><br><span class=\"line\">        &#39;@babel&#x2F;plugin-syntax-dynamic-import&#39;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"热更新当页面改变只更新改变的部分，不重新打包\">热更新(当页面改变只更新改变的部分，不重新打包)<a href=\"#热更新当页面改变只更新改变的部分，不重新打包\" title=\"热更新(当页面改变只更新改变的部分，不重新打包)\"></a></h2><p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [</span><br><span class=\"line\">  new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">    template: &#39;.&#x2F;src&#x2F;index.html&#39;,</span><br><span class=\"line\">    filename: &#39;index.html&#39;</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">  new webpack.NameModulesPlugin(),          &#x2F;&#x2F; 打印更新的模块路径</span><br><span class=\"line\">  new webpack.HotModuleReplacementPlugin()  &#x2F;&#x2F; 热更新插件</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p><code>index.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import str from &#39;.&#x2F;source&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(str);</span><br><span class=\"line\"></span><br><span class=\"line\">if (module.hot) &#123;</span><br><span class=\"line\">  module.hot.accept(&#39;.&#x2F;source&#39;, () &#x3D;&gt; &#123;</span><br><span class=\"line\">    console.log(&#39;文件更新了&#39;);</span><br><span class=\"line\">    require(&#39;.&#x2F;source&#39;)</span><br><span class=\"line\">    console.log(str);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"tapable介绍---synchook\">tapable介绍 - SyncHook<a href=\"#tapable介绍---synchook\" title=\"tapable介绍 - SyncHook\"></a></h2><p><a href=\"https://juejin.im/post/5abf33f16fb9a028e46ec352\" target=\"_blank\">tapable</a></p>\n<p><code>webpack</code>本质上是一种事件流的机制，它的工作流程就是将各个插件串联起来，而实现这一切的核心就是<code>Tapable</code>，<code>webpack</code>中最核心的负责编译的<code>Compiler</code>和负责创建<code>bundles</code>的<code>Compilation</code>都是<code>Tapable</code>的实例。</p>\n<p><code>SyncHook</code> 不关心监听函数的返回值</p>\n<p><code>yarn add tabable</code></p>\n<p><code>1.use.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let &#123;SyncHook&#125; &#x3D; require(&#39;tapable&#39;)   &#x2F;&#x2F; 结构同步勾子</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Lesson &#123;</span><br><span class=\"line\">  constructor () &#123;</span><br><span class=\"line\">    this.hooks &#x3D; &#123;</span><br><span class=\"line\">      &#x2F;&#x2F; 订阅勾子</span><br><span class=\"line\">      arch: new SyncHook([&#39;name&#39;]),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  start () &#123;</span><br><span class=\"line\">    this.hooks.arch.call(&#39;may&#39;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  tap () &#123;   &#x2F;&#x2F;  注册监听函数</span><br><span class=\"line\">    this.hooks.arch.tap(&#39;node&#39;, function (name) &#123;</span><br><span class=\"line\">      console.log(&#39;node&#39;, name)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    this.hooks.arch.tap(&#39;react&#39;, function (name) &#123;</span><br><span class=\"line\">      console.log(&#39;react&#39;, name)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">let l &#x3D; new Lesson()</span><br><span class=\"line\"></span><br><span class=\"line\">l.tap();  &#x2F;&#x2F;注册两个函数</span><br><span class=\"line\">l.start() &#x2F;&#x2F; 启动勾子</span><br></pre></td></tr></table></figure>\n\n<p><code>1.theory.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class SyncHook &#123;  &#x2F;&#x2F; 勾子是同步的</span><br><span class=\"line\">  constructor(args) &#123;  &#x2F;&#x2F; args &#x3D;&gt; [&#39;name&#39;]</span><br><span class=\"line\">    this.tasks &#x3D; []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  tap (name, task) &#123;</span><br><span class=\"line\">    this.tasks.push(task)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  call (...args) &#123;</span><br><span class=\"line\">    this.tasks.forEach((task) &#x3D;&gt; task(...args))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let hook &#x3D; new SyncHook([&#39;name&#39;])</span><br><span class=\"line\"></span><br><span class=\"line\">hook.tap(&#39;react&#39;, function (name) &#123;</span><br><span class=\"line\">  console.log(&#39;react&#39;, name);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">hook.tap(&#39;node&#39;, function (name) &#123;</span><br><span class=\"line\">  console.log(&#39;node&#39;, name);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">hook.call(&#39;jw&#39;)</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"tapable介绍---syncbailhook\">tapable介绍 - SyncBailHook<a href=\"#tapable介绍---syncbailhook\" title=\"tapable介绍 - SyncBailHook\"></a></h2><p><code>SyncBailHook</code>为勾子加了个保险，当<code>return</code>返回不是<code>undefine</code>就会停止</p>\n<p><code>2.use.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let &#123;SyncBailHook&#125; &#x3D; require(&#39;tapable&#39;)   &#x2F;&#x2F; 解构同步勾子</span><br><span class=\"line\"></span><br><span class=\"line\">class Lesson &#123;</span><br><span class=\"line\">  constructor () &#123;</span><br><span class=\"line\">    this.hooks &#x3D; &#123;</span><br><span class=\"line\">      &#x2F;&#x2F; 订阅勾子</span><br><span class=\"line\">      arch: new SyncBailHook([&#39;name&#39;]),</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  start () &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 发布</span><br><span class=\"line\">    this.hooks.arch.call(&#39;may&#39;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  tap () &#123;   &#x2F;&#x2F;  注册监听函数,订阅</span><br><span class=\"line\">    this.hooks.arch.tap(&#39;node&#39;, function (name) &#123;</span><br><span class=\"line\">      console.log(&#39;node&#39;, name)</span><br><span class=\"line\">      return &#39;停止学习&#39;  &#x2F;&#x2F; 会停止</span><br><span class=\"line\">      &#x2F;&#x2F; return undefined</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    this.hooks.arch.tap(&#39;react&#39;, function (name) &#123;</span><br><span class=\"line\">      console.log(&#39;react&#39;, name)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">let l &#x3D; new Lesson()</span><br><span class=\"line\"></span><br><span class=\"line\">l.tap();  &#x2F;&#x2F;注册两个函数</span><br><span class=\"line\">l.start() &#x2F;&#x2F; 启动勾子</span><br></pre></td></tr></table></figure>\n\n<p><code>2.theory.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class SyncBailHook &#123;  &#x2F;&#x2F; 勾子是同步的</span><br><span class=\"line\">    constructor(args) &#123;  &#x2F;&#x2F; args &#x3D;&gt; [&#39;name&#39;]</span><br><span class=\"line\">        this.tasks &#x3D; []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tap (name, task) &#123;</span><br><span class=\"line\">        this.tasks.push(task)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    call (...args) &#123;</span><br><span class=\"line\">        let ret;   &#x2F;&#x2F; 当前函数的返回值</span><br><span class=\"line\">        let index &#x3D; 0; &#x2F;&#x2F; 当前要执行的第一个</span><br><span class=\"line\">        do &#123;</span><br><span class=\"line\">            ret &#x3D; this.tasks[index](...args)</span><br><span class=\"line\">        &#125; while (ret &#x3D;&#x3D;&#x3D; undefined  &amp;&amp; index &lt; this.tasks.length)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let hook &#x3D; new SyncBailHook([&#39;name&#39;])</span><br><span class=\"line\"></span><br><span class=\"line\">hook.tap(&#39;react&#39;, function (name) &#123;</span><br><span class=\"line\">    console.log(&#39;react&#39;, name);</span><br><span class=\"line\">    return &#39;停止学习&#39;</span><br><span class=\"line\">    &#x2F;&#x2F; return undefined</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">hook.tap(&#39;node&#39;, function (name) &#123;</span><br><span class=\"line\">    console.log(&#39;node&#39;, name);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">hook.call(&#39;jw&#39;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"tapable介绍---syncwaterfallhook\">tapable介绍 - SyncWaterfallHook<a href=\"#tapable介绍---syncwaterfallhook\" title=\"tapable介绍 - SyncWaterfallHook\"></a></h2><p><code>SyncWaterfallHook</code>上一个监听函数的返回值可以传给下一个监听函数</p>\n<p><code>3.use.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let &#123;SyncWaterfallHook&#125; &#x3D; require(&#39;tapable&#39;)   &#x2F;&#x2F; 解构同步勾子</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; waterfall 瀑布</span><br><span class=\"line\"></span><br><span class=\"line\">class Lesson &#123;</span><br><span class=\"line\">    constructor () &#123;</span><br><span class=\"line\">        this.hooks &#x3D; &#123;</span><br><span class=\"line\">            &#x2F;&#x2F; 订阅勾子</span><br><span class=\"line\">            arch: new SyncWaterfallHook([&#39;name&#39;]),</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    start () &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 发布</span><br><span class=\"line\">        this.hooks.arch.call(&#39;may&#39;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tap () &#123;   &#x2F;&#x2F;  注册监听函数,订阅</span><br><span class=\"line\">        this.hooks.arch.tap(&#39;node&#39;, function (name) &#123;</span><br><span class=\"line\">            console.log(&#39;node&#39;, name)</span><br><span class=\"line\">            return &#39;学的不错&#39;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        this.hooks.arch.tap(&#39;react&#39;, function (name) &#123;</span><br><span class=\"line\">            console.log(&#39;react&#39;, name)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">let l &#x3D; new Lesson()</span><br><span class=\"line\"></span><br><span class=\"line\">l.tap();  &#x2F;&#x2F;注册两个函数</span><br><span class=\"line\">l.start() &#x2F;&#x2F; 启动勾子</span><br></pre></td></tr></table></figure>\n\n<p><code>3.theory.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class SyncWaterfallHook &#123;  &#x2F;&#x2F; 勾子是同步的 - 瀑布</span><br><span class=\"line\">    constructor(args) &#123;  &#x2F;&#x2F; args &#x3D;&gt; [&#39;name&#39;]</span><br><span class=\"line\">        this.tasks &#x3D; []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tap (name, task) &#123;</span><br><span class=\"line\">        this.tasks.push(task)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    call (...args) &#123;</span><br><span class=\"line\">        let [first, ...others] &#x3D; this.tasks;</span><br><span class=\"line\">        let ret &#x3D; first(...args)</span><br><span class=\"line\">        others.reduce((a, b) &#x3D;&gt; &#123;</span><br><span class=\"line\">            return b(a);</span><br><span class=\"line\">        &#125;, ret);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let hook &#x3D; new SyncWaterfallHook([&#39;name&#39;])</span><br><span class=\"line\"></span><br><span class=\"line\">hook.tap(&#39;react&#39;, function (name) &#123;</span><br><span class=\"line\">    console.log(&#39;react&#39;, name);</span><br><span class=\"line\">    return &#39;react Ok&#39;</span><br><span class=\"line\">    &#x2F;&#x2F; return undefined</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">hook.tap(&#39;node&#39;, function (name) &#123;</span><br><span class=\"line\">    console.log(&#39;node&#39;, name);</span><br><span class=\"line\">    return &#39;node Ok&#39;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">hook.tap(&#39;webpack&#39;, function (data) &#123;</span><br><span class=\"line\">    console.log(&#39;webpack&#39;, data);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">hook.call(&#39;jw&#39;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"tapable介绍---syncloophook\">tapable介绍 - SyncLoopHook<a href=\"#tapable介绍---syncloophook\" title=\"tapable介绍 - SyncLoopHook\"></a></h2><p><code>SyncLoopHook</code>当监听函数被触发的时候，如果该监听函数返回<code>true</code>时则这个监听函数会反复执行，如果返回 <code>undefined</code> 则表示退出循环</p>\n<p><code>4.use.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let &#123;SyncLoopHook&#125; &#x3D; require(&#39;tapable&#39;)   &#x2F;&#x2F; 解构同步勾子</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 不返回undefined 会多次执行</span><br><span class=\"line\"></span><br><span class=\"line\">class Lesson &#123;</span><br><span class=\"line\">    constructor () &#123;</span><br><span class=\"line\">        this.index &#x3D; 0</span><br><span class=\"line\">        this.hooks &#x3D; &#123;</span><br><span class=\"line\">            &#x2F;&#x2F; 订阅勾子</span><br><span class=\"line\">            arch: new SyncLoopHook([&#39;name&#39;]),</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    start () &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 发布</span><br><span class=\"line\">        this.hooks.arch.call(&#39;may&#39;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tap () &#123;   &#x2F;&#x2F;  注册监听函数,订阅</span><br><span class=\"line\">        this.hooks.arch.tap(&#39;node&#39;,  (name) &#x3D;&gt; &#123;</span><br><span class=\"line\">            console.log(&#39;node&#39;, name)</span><br><span class=\"line\">            return ++this.index &#x3D;&#x3D;&#x3D; 3 ? undefined : &#39;继续学&#39;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        this.hooks.arch.tap(&#39;react&#39;,  (name) &#x3D;&gt; &#123;</span><br><span class=\"line\">            console.log(&#39;react&#39;, name)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">let l &#x3D; new Lesson()</span><br><span class=\"line\"></span><br><span class=\"line\">l.tap();  &#x2F;&#x2F;注册两个函数</span><br><span class=\"line\">l.start() &#x2F;&#x2F; 启动勾子</span><br></pre></td></tr></table></figure>\n\n<p><code>4.theory.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class SyncLoopHook &#123;  &#x2F;&#x2F; 勾子是同步的 - 瀑布</span><br><span class=\"line\">    constructor(args) &#123;  &#x2F;&#x2F; args &#x3D;&gt; [&#39;name&#39;]</span><br><span class=\"line\">        this.tasks &#x3D; []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tap (name, task) &#123;</span><br><span class=\"line\">        this.tasks.push(task)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    call (...args) &#123;</span><br><span class=\"line\">        this.tasks.forEach(task &#x3D;&gt; &#123;</span><br><span class=\"line\">            let ret</span><br><span class=\"line\">            do &#123;</span><br><span class=\"line\">                ret &#x3D; task(...args);</span><br><span class=\"line\">            &#125; while(ret !&#x3D;&#x3D; undefined)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let hook &#x3D; new SyncLoopHook([&#39;name&#39;])</span><br><span class=\"line\">let total &#x3D; 0</span><br><span class=\"line\">hook.tap(&#39;react&#39;, function (name) &#123;</span><br><span class=\"line\">    console.log(&#39;react&#39;, name);</span><br><span class=\"line\">    return ++total &#x3D;&#x3D;&#x3D; 3 ? undefined: &#39;继续学&#39;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">hook.tap(&#39;node&#39;, function (name) &#123;</span><br><span class=\"line\">    console.log(&#39;node&#39;, name);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">hook.tap(&#39;webpack&#39;, function (data) &#123;</span><br><span class=\"line\">    console.log(&#39;webpack&#39;, data);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">hook.call(&#39;jw&#39;)</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"asyncparallelhook-与-asyncparallelbailhook\"><code>AsyncParallelHook</code> 与 <code>AsyncParallelBailHook</code><a href=\"#asyncparallelhook-与-asyncparallelbailhook\" title=\"AsyncParallelHook 与 AsyncParallelBailHook\"></a></h2><p>异步的勾子分两种<code>串行</code>和<code>并行</code></p>\n<p><code>并行</code>等待所有并发的异步事件执行后执行回调</p>\n<p>注册的三种方法</p>\n<ol><li>异步的注册方法<code>tap</code></li>\n<li>异步的注册方法<code>tapAsync</code>， 还有个回调参数</li>\n<li><code>topPromise</code>,注册<code>promise</code></li>\n</ol><p>调用的三种</p>\n<ol><li>call (同步)</li>\n<li>callAsync （异步）</li>\n<li>promise （异步）</li>\n</ol><p>这里介绍的是异步并行的</p>\n<h4 id=\"asyncparallelhook\">AsyncParallelHook<a href=\"#asyncparallelhook\" title=\"AsyncParallelHook\"></a></h4><p>不关心监听函数的返回值。</p>\n<p><code>5.use.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let &#123;AsyncParallelHook&#125; &#x3D; require(&#39;tapable&#39;)   &#x2F;&#x2F; 解构同步勾子</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 不返回undefined 会多次执行</span><br><span class=\"line\"></span><br><span class=\"line\">class Lesson &#123;</span><br><span class=\"line\">    constructor() &#123;</span><br><span class=\"line\">        this.index &#x3D; 0</span><br><span class=\"line\">        this.hooks &#x3D; &#123;</span><br><span class=\"line\">            &#x2F;&#x2F; 订阅勾子</span><br><span class=\"line\">            arch: new AsyncParallelHook([&#39;name&#39;]),</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    start() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 发布callAsync</span><br><span class=\"line\">        &#x2F;&#x2F; this.hooks.arch.callAsync(&#39;may&#39;, function () &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;     console.log(&#39;end&#39;);</span><br><span class=\"line\">        &#x2F;&#x2F; &#125;)</span><br><span class=\"line\">        &#x2F;&#x2F; 另一种发布promise</span><br><span class=\"line\">        this.hooks.arch.promise(&#39;may&#39;).then(function () &#123;</span><br><span class=\"line\">                console.log(&#39;end&#39;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    tap() &#123;   &#x2F;&#x2F;  注册监听函数,订阅</span><br><span class=\"line\">        &#x2F;&#x2F; 注册tapAsync</span><br><span class=\"line\">        &#x2F;&#x2F; this.hooks.arch.tapAsync(&#39;node&#39;,  (name, callback) &#x3D;&gt; &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;     setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;         console.log(&#39;node&#39;, name)</span><br><span class=\"line\">        &#x2F;&#x2F;         callback()</span><br><span class=\"line\">        &#x2F;&#x2F;     &#125;, 1000)</span><br><span class=\"line\">        &#x2F;&#x2F; &#125;)</span><br><span class=\"line\">        &#x2F;&#x2F; this.hooks.arch.tapAsync(&#39;react&#39;,  (name, callback) &#x3D;&gt; &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;     setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;         console.log(&#39;react&#39;, name)</span><br><span class=\"line\">        &#x2F;&#x2F;         callback()</span><br><span class=\"line\">        &#x2F;&#x2F;     &#125;, 1000)</span><br><span class=\"line\">        &#x2F;&#x2F; &#125;)</span><br><span class=\"line\">        &#x2F;&#x2F; 另一种订阅 tapPromise</span><br><span class=\"line\">        this.hooks.arch.tapPromise(&#39;node&#39;, (name) &#x3D;&gt; &#123;</span><br><span class=\"line\">            return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">                setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">                    console.log(&#39;node&#39;, name)</span><br><span class=\"line\">                    resolve()</span><br><span class=\"line\">                &#125;, 1000)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        this.hooks.arch.tapPromise(&#39;react&#39;, (name) &#x3D;&gt; &#123;</span><br><span class=\"line\">            return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">                setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">                    console.log(&#39;react&#39;, name)</span><br><span class=\"line\">                    resolve()</span><br><span class=\"line\">                &#125;, 1000)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">let l &#x3D; new Lesson()</span><br><span class=\"line\"></span><br><span class=\"line\">l.tap();  &#x2F;&#x2F;注册两个函数</span><br><span class=\"line\">l.start() &#x2F;&#x2F; 启动勾子</span><br></pre></td></tr></table></figure>\n\n\n<p><code>5.theory.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class AsyncParallelHook &#123;  &#x2F;&#x2F; 勾子是同步的 - 瀑布</span><br><span class=\"line\">    constructor(args) &#123;  &#x2F;&#x2F; args &#x3D;&gt; [&#39;name&#39;]</span><br><span class=\"line\">        this.tasks &#x3D; []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    tapAsync(name, task) &#123;</span><br><span class=\"line\">        this.tasks.push(task)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    tapPromise(name, task) &#123;</span><br><span class=\"line\">        this.tasks.push(task)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    callAsync(...args) &#123;</span><br><span class=\"line\">        let finalCallback &#x3D; args.pop()   &#x2F;&#x2F; 拿出最终的函数</span><br><span class=\"line\">        let index &#x3D; 0</span><br><span class=\"line\">        let done &#x3D; () &#x3D;&gt; &#123;   &#x2F;&#x2F; 类似promise.all的实现</span><br><span class=\"line\">            index++;</span><br><span class=\"line\">            if (index &#x3D;&#x3D;&#x3D; this.tasks.length) &#123;</span><br><span class=\"line\">                finalCallback();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        this.tasks.forEach(task &#x3D;&gt; &#123;</span><br><span class=\"line\">            task(...args, done) &#x2F;&#x2F; 这里的args 已经把最后一个参数删掉</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    promise(...args) &#123;</span><br><span class=\"line\">        let tasks &#x3D; this.tasks.map(task &#x3D;&gt; task(...args))</span><br><span class=\"line\">        return Promise.all(tasks)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let hook &#x3D; new AsyncParallelHook([&#39;name&#39;])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; hook.tapAsync(&#39;react&#39;, function (name, callback) &#123;</span><br><span class=\"line\">&#x2F;&#x2F;     setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">&#x2F;&#x2F;         console.log(&#39;react&#39;, name);</span><br><span class=\"line\">&#x2F;&#x2F;         callback()</span><br><span class=\"line\">&#x2F;&#x2F;     &#125;, 1000)</span><br><span class=\"line\">&#x2F;&#x2F; &#125;)</span><br><span class=\"line\">&#x2F;&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F; hook.tapAsync(&#39;node&#39;, function (name, callback) &#123;</span><br><span class=\"line\">&#x2F;&#x2F;     setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">&#x2F;&#x2F;         console.log(&#39;node&#39;, name);</span><br><span class=\"line\">&#x2F;&#x2F;         callback()</span><br><span class=\"line\">&#x2F;&#x2F;     &#125;, 1000)</span><br><span class=\"line\">&#x2F;&#x2F; &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; hook.tapAsync(&#39;webpack&#39;, function (name, callback) &#123;</span><br><span class=\"line\">&#x2F;&#x2F;     setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">&#x2F;&#x2F;         console.log(&#39;webpack&#39;, name);</span><br><span class=\"line\">&#x2F;&#x2F;         callback()</span><br><span class=\"line\">&#x2F;&#x2F;     &#125;, 1000)</span><br><span class=\"line\">&#x2F;&#x2F; &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">hook.tapPromise(&#39;react&#39;, function (name, callback) &#123;</span><br><span class=\"line\">    return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">        setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">            console.log(&#39;react&#39;, name);</span><br><span class=\"line\">            resolve()</span><br><span class=\"line\">        &#125;, 1000)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">hook.tapPromise(&#39;node&#39;, function (name, callback) &#123;</span><br><span class=\"line\">    return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">        setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">            console.log(&#39;node&#39;, name);</span><br><span class=\"line\">            resolve()</span><br><span class=\"line\">        &#125;, 1000)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F; hook.callAsync(&#39;jw&#39;, function () &#123;</span><br><span class=\"line\">&#x2F;&#x2F;     console.log(&#39;end&#39;);</span><br><span class=\"line\">&#x2F;&#x2F; &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">hook.promise(&#39;jw&#39;).then(function () &#123;</span><br><span class=\"line\">    console.log(&#39;end&#39;);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"asyncparallelbailhook\">AsyncParallelBailHook<a href=\"#asyncparallelbailhook\" title=\"AsyncParallelBailHook\"></a></h4><p>只要监听函数的返回值不为 <code>null</code>，就会忽略后面的监听函数执行，直接跳跃到<code>callAsync</code>等触发函数绑定的回调函数，然后执行这个被绑定的回调函数。</p>\n<p>使用和原理与<code>SyncBailHook</code>相似</p>\n<h2 id=\"异步串行--asyncserieshook\">异步串行 —— AsyncSeriesHook<a href=\"#异步串行--asyncserieshook\" title=\"异步串行 —— AsyncSeriesHook\"></a></h2><p><code>串行</code>one by one</p>\n<p><code>6.use.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let &#123;AsyncSeriesHook&#125; &#x3D; require(&#39;tapable&#39;)   &#x2F;&#x2F; 解构同步勾子</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Lesson &#123;</span><br><span class=\"line\">    constructor() &#123;</span><br><span class=\"line\">        this.index &#x3D; 0</span><br><span class=\"line\">        this.hooks &#x3D; &#123;</span><br><span class=\"line\">            &#x2F;&#x2F; 订阅勾子</span><br><span class=\"line\">            arch: new AsyncSeriesHook([&#39;name&#39;]),</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    start() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 发布</span><br><span class=\"line\">        &#x2F;&#x2F; this.hooks.arch.callAsync(&#39;may&#39;, function () &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;     console.log(&#39;end&#39;);</span><br><span class=\"line\">        &#x2F;&#x2F; &#125;)</span><br><span class=\"line\">        &#x2F;&#x2F; 另一种发布</span><br><span class=\"line\">        this.hooks.arch.promise(&#39;may&#39;).then(function () &#123;</span><br><span class=\"line\">                console.log(&#39;end&#39;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    tap() &#123;   &#x2F;&#x2F;  注册监听函数,订阅</span><br><span class=\"line\">        &#x2F;&#x2F; this.hooks.arch.tapAsync(&#39;node&#39;,  (name, callback) &#x3D;&gt; &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;     setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;         console.log(&#39;node&#39;, name)</span><br><span class=\"line\">        &#x2F;&#x2F;         callback()</span><br><span class=\"line\">        &#x2F;&#x2F;     &#125;, 1000)</span><br><span class=\"line\">        &#x2F;&#x2F; &#125;)</span><br><span class=\"line\">        &#x2F;&#x2F; this.hooks.arch.tapAsync(&#39;react&#39;,  (name, callback) &#x3D;&gt; &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;     setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;         console.log(&#39;react&#39;, name)</span><br><span class=\"line\">        &#x2F;&#x2F;         callback()</span><br><span class=\"line\">        &#x2F;&#x2F;     &#125;, 1000)</span><br><span class=\"line\">        &#x2F;&#x2F; &#125;)</span><br><span class=\"line\">        &#x2F;&#x2F; 另一种订阅</span><br><span class=\"line\">        this.hooks.arch.tapPromise(&#39;node&#39;, (name) &#x3D;&gt; &#123;</span><br><span class=\"line\">            return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">                setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">                    console.log(&#39;node&#39;, name)</span><br><span class=\"line\">                    resolve()</span><br><span class=\"line\">                &#125;, 1000)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        this.hooks.arch.tapPromise(&#39;react&#39;, (name) &#x3D;&gt; &#123;</span><br><span class=\"line\">            return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">                setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">                    console.log(&#39;react&#39;, name)</span><br><span class=\"line\">                    resolve()</span><br><span class=\"line\">                &#125;, 1000)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">let l &#x3D; new Lesson()</span><br><span class=\"line\"></span><br><span class=\"line\">l.tap();  &#x2F;&#x2F;注册两个函数</span><br><span class=\"line\">l.start(); &#x2F;&#x2F; 启动勾子</span><br></pre></td></tr></table></figure>\n\n<p><code>6.theory.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class AsyncSeriesHook &#123;  &#x2F;&#x2F;</span><br><span class=\"line\">    constructor(args) &#123;  &#x2F;&#x2F; args &#x3D;&gt; [&#39;name&#39;]</span><br><span class=\"line\">        this.tasks &#x3D; []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    tapAsync(name, task) &#123;</span><br><span class=\"line\">        this.tasks.push(task)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    tapPromise(name, task) &#123;</span><br><span class=\"line\">        this.tasks.push(task)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    callAsync(...args) &#123;</span><br><span class=\"line\">        let finalCallback &#x3D; args.pop()</span><br><span class=\"line\">        let index &#x3D; 0;</span><br><span class=\"line\">        let next &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">            if (this.tasks.length &#x3D;&#x3D;&#x3D; index) return finalCallback();</span><br><span class=\"line\">            let task &#x3D; this.tasks[index++];</span><br><span class=\"line\">            task(...args, next);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        next();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    promise(...args) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 将promise串联起来</span><br><span class=\"line\">        let [first, ...other] &#x3D; this.tasks</span><br><span class=\"line\">        return other.reduce((p, n) &#x3D;&gt; &#123;</span><br><span class=\"line\">             return p.then(() &#x3D;&gt; n (...args))</span><br><span class=\"line\">        &#125;, first(...args))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let hook &#x3D; new AsyncSeriesHook([&#39;name&#39;])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; hook.tapAsync(&#39;react&#39;, function (name, callback) &#123;</span><br><span class=\"line\">&#x2F;&#x2F;     setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">&#x2F;&#x2F;         console.log(&#39;react&#39;, name);</span><br><span class=\"line\">&#x2F;&#x2F;         callback()</span><br><span class=\"line\">&#x2F;&#x2F;     &#125;, 1000)</span><br><span class=\"line\">&#x2F;&#x2F; &#125;)</span><br><span class=\"line\">&#x2F;&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F; hook.tapAsync(&#39;node&#39;, function (name, callback) &#123;</span><br><span class=\"line\">&#x2F;&#x2F;     setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">&#x2F;&#x2F;         console.log(&#39;node&#39;, name);</span><br><span class=\"line\">&#x2F;&#x2F;         callback()</span><br><span class=\"line\">&#x2F;&#x2F;     &#125;, 1000)</span><br><span class=\"line\">&#x2F;&#x2F; &#125;)</span><br><span class=\"line\">&#x2F;&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F; hook.tapAsync(&#39;webpack&#39;, function (name, callback) &#123;</span><br><span class=\"line\">&#x2F;&#x2F;     setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">&#x2F;&#x2F;         console.log(&#39;webpack&#39;, name);</span><br><span class=\"line\">&#x2F;&#x2F;         callback()</span><br><span class=\"line\">&#x2F;&#x2F;     &#125;, 1000)</span><br><span class=\"line\">&#x2F;&#x2F; &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">hook.tapPromise(&#39;react&#39;, function (name, callback) &#123;</span><br><span class=\"line\">    return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">        setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">            console.log(&#39;react&#39;, name);</span><br><span class=\"line\">            resolve()</span><br><span class=\"line\">        &#125;, 1000)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">hook.tapPromise(&#39;node&#39;, function (name, callback) &#123;</span><br><span class=\"line\">    return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">        setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">            console.log(&#39;node&#39;, name);</span><br><span class=\"line\">            resolve()</span><br><span class=\"line\">        &#125;, 1000)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; hook.callAsync(&#39;jw&#39;, function () &#123;</span><br><span class=\"line\">&#x2F;&#x2F;     console.log(&#39;end&#39;);</span><br><span class=\"line\">&#x2F;&#x2F; &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">hook.promise(&#39;jw&#39;).then(function () &#123;</span><br><span class=\"line\">    console.log(&#39;end&#39;);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"异步串行--asyncserieswaterfallhook\">异步串行 —— AsyncSeriesWaterfallHook<a href=\"#异步串行--asyncserieswaterfallhook\" title=\"异步串行 —— AsyncSeriesWaterfallHook\"></a></h2><p>上一个监听函数的中的<code>callback(err, data)</code>的第二个参数,可以作为下一个监听函数的参数</p>\n<p><code>7.use.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let &#123;AsyncSeriesWaterfallHook&#125; &#x3D; require(&#39;tapable&#39;)   &#x2F;&#x2F; 解构同步勾子</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Lesson &#123;</span><br><span class=\"line\">    constructor() &#123;</span><br><span class=\"line\">        this.index &#x3D; 0</span><br><span class=\"line\">        this.hooks &#x3D; &#123;</span><br><span class=\"line\">            &#x2F;&#x2F; 订阅勾子</span><br><span class=\"line\">            arch: new AsyncSeriesWaterfallHook([&#39;name&#39;]),</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    start() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 发布</span><br><span class=\"line\">        this.hooks.arch.callAsync(&#39;may&#39;, function () &#123;</span><br><span class=\"line\">            console.log(&#39;end&#39;);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        &#x2F;&#x2F; 另一种发布</span><br><span class=\"line\">        &#x2F;&#x2F; this.hooks.arch.promise(&#39;may&#39;).then(function () &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;         console.log(&#39;end&#39;);</span><br><span class=\"line\">        &#x2F;&#x2F;     &#125;</span><br><span class=\"line\">        &#x2F;&#x2F; )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    tap() &#123;   &#x2F;&#x2F;  注册监听函数,订阅</span><br><span class=\"line\">        this.hooks.arch.tapAsync(&#39;node&#39;,  (name, callback) &#x3D;&gt; &#123;</span><br><span class=\"line\">            setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">                console.log(&#39;node&#39;, name)</span><br><span class=\"line\">                &#x2F;&#x2F; callback(null, &#39;result&#39;)</span><br><span class=\"line\">                callback(&#39;error&#39;, &#39;result&#39;)   &#x2F;&#x2F; 如果放error, 会跳过直接后面的勾子，直接走到最终的</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;, 1000)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        this.hooks.arch.tapAsync(&#39;react&#39;,  (name, callback) &#x3D;&gt; &#123;</span><br><span class=\"line\">            setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">                console.log(&#39;react&#39;, name)</span><br><span class=\"line\">                callback()</span><br><span class=\"line\">            &#125;, 1000)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        &#x2F;&#x2F; 另一种订阅</span><br><span class=\"line\">        &#x2F;&#x2F; this.hooks.arch.tapPromise(&#39;node&#39;, (name) &#x3D;&gt; &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;     return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;         setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;             console.log(&#39;node&#39;, name)</span><br><span class=\"line\">        &#x2F;&#x2F;             resolve()</span><br><span class=\"line\">        &#x2F;&#x2F;         &#125;, 1000)</span><br><span class=\"line\">        &#x2F;&#x2F;     &#125;)</span><br><span class=\"line\">        &#x2F;&#x2F; &#125;)</span><br><span class=\"line\">        &#x2F;&#x2F; this.hooks.arch.tapPromise(&#39;react&#39;, (name) &#x3D;&gt; &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;     return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;         setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;             console.log(&#39;react&#39;, name)</span><br><span class=\"line\">        &#x2F;&#x2F;             resolve()</span><br><span class=\"line\">        &#x2F;&#x2F;         &#125;, 1000)</span><br><span class=\"line\">        &#x2F;&#x2F;     &#125;)</span><br><span class=\"line\">        &#x2F;&#x2F; &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">let l &#x3D; new Lesson()</span><br><span class=\"line\"></span><br><span class=\"line\">l.tap();  &#x2F;&#x2F;注册两个函数</span><br><span class=\"line\">l.start(); &#x2F;&#x2F; 启动勾子</span><br></pre></td></tr></table></figure>\n\n<p><code>7.theory.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class AsyncSeriesWaterfallHook &#123;  &#x2F;&#x2F;</span><br><span class=\"line\">    constructor(args) &#123;  &#x2F;&#x2F; args &#x3D;&gt; [&#39;name&#39;]</span><br><span class=\"line\">        this.tasks &#x3D; []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    tapAsync(name, task) &#123;</span><br><span class=\"line\">        this.tasks.push(task)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    tapPromise(name, task) &#123;</span><br><span class=\"line\">        this.tasks.push(task)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    callAsync(...args) &#123;</span><br><span class=\"line\">        let finalCallback &#x3D; args.pop()</span><br><span class=\"line\">        let index &#x3D; 0;</span><br><span class=\"line\">        let next &#x3D; (err, data) &#x3D;&gt; &#123;</span><br><span class=\"line\">            let task &#x3D; this.tasks[index]</span><br><span class=\"line\">            if(!task) return finalCallback();</span><br><span class=\"line\">            if (index &#x3D;&#x3D;&#x3D; 0) &#123;</span><br><span class=\"line\">                &#x2F;&#x2F; 执行的第一个</span><br><span class=\"line\">                task(...args, next)</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                task(data, next)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            index ++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        next();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    promise(...args) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 将promise串联起来</span><br><span class=\"line\">        let [first, ...other] &#x3D; this.tasks</span><br><span class=\"line\">        return other.reduce((p, n) &#x3D;&gt; &#123;</span><br><span class=\"line\">             return p.then((data) &#x3D;&gt; n(data))</span><br><span class=\"line\">        &#125;, first(...args))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let hook &#x3D; new AsyncSeriesWaterfallHook([&#39;name&#39;])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; hook.tapAsync(&#39;react&#39;, function (name, callback) &#123;</span><br><span class=\"line\">&#x2F;&#x2F;     setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">&#x2F;&#x2F;         console.log(&#39;react&#39;, name);</span><br><span class=\"line\">&#x2F;&#x2F;         callback(null, &#39;结果1&#39;)</span><br><span class=\"line\">&#x2F;&#x2F;     &#125;, 1000)</span><br><span class=\"line\">&#x2F;&#x2F; &#125;)</span><br><span class=\"line\">&#x2F;&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F; hook.tapAsync(&#39;node&#39;, function (name, callback) &#123;</span><br><span class=\"line\">&#x2F;&#x2F;     setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">&#x2F;&#x2F;         console.log(&#39;node&#39;, name);</span><br><span class=\"line\">&#x2F;&#x2F;         callback(null, &#39;结果2&#39;)</span><br><span class=\"line\">&#x2F;&#x2F;     &#125;, 1000)</span><br><span class=\"line\">&#x2F;&#x2F; &#125;)</span><br><span class=\"line\">&#x2F;&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F; hook.tapAsync(&#39;webpack&#39;, function (name, callback) &#123;</span><br><span class=\"line\">&#x2F;&#x2F;     setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">&#x2F;&#x2F;         console.log(&#39;webpack&#39;, name);</span><br><span class=\"line\">&#x2F;&#x2F;         callback()</span><br><span class=\"line\">&#x2F;&#x2F;     &#125;, 1000)</span><br><span class=\"line\">&#x2F;&#x2F; &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;</span><br><span class=\"line\">hook.tapPromise(&#39;react&#39;, function (name, callback) &#123;</span><br><span class=\"line\">    return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">        setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">            console.log(&#39;react&#39;, name);</span><br><span class=\"line\">            resolve(&#39;result&#39;)</span><br><span class=\"line\">        &#125;, 1000)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">hook.tapPromise(&#39;node&#39;, function (name, callback) &#123;</span><br><span class=\"line\">    return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">        setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">            console.log(&#39;node&#39;, name);</span><br><span class=\"line\">            resolve()</span><br><span class=\"line\">        &#125;, 1000)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F; hook.callAsync(&#39;jw&#39;, function () &#123;</span><br><span class=\"line\">&#x2F;&#x2F;     console.log(&#39;end&#39;);</span><br><span class=\"line\">&#x2F;&#x2F; &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">hook.promise(&#39;jw&#39;).then(function () &#123;</span><br><span class=\"line\">    console.log(&#39;end&#39;);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"手写webpack\">手写webpack<a href=\"#手写webpack\" title=\"手写webpack\"></a></h2><p><a href=\"https://github.com/mayufo/webpack-training\" target=\"_blank\">对应的may-pack项目</a></p>\n<p><code>yarn add webpack webpack-cli -D</code></p>\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let path &#x3D; require(&#39;path&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">    mode: &#39;development&#39;,</span><br><span class=\"line\">    entry: &#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: &#39;bundle.js&#39;,</span><br><span class=\"line\">        path: path.resolve(__dirname, &#39;dist&#39;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>npx webpack</code></p>\n<p>生成文件<code>bundle.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function (modules) &#123;</span><br><span class=\"line\">    var installedModules &#x3D; &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    function __webpack_require__(moduleId) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (installedModules[moduleId]) &#123;</span><br><span class=\"line\">            return installedModules[moduleId].exports;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        var module &#x3D; installedModules[moduleId] &#x3D; &#123;</span><br><span class=\"line\">            i: moduleId,</span><br><span class=\"line\">            l: false,</span><br><span class=\"line\">            exports: &#123;&#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);</span><br><span class=\"line\"></span><br><span class=\"line\">        module.l &#x3D; true;</span><br><span class=\"line\"></span><br><span class=\"line\">        return module.exports;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; Load entry module and return exports</span><br><span class=\"line\">    return __webpack_require__(__webpack_require__.s &#x3D; &quot;.&#x2F;src&#x2F;index.js&quot;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">(&#123;</span><br><span class=\"line\">    &quot;.&#x2F;src&#x2F;a.js&quot;:</span><br><span class=\"line\">        (function (module, exports, __webpack_require__) &#123;</span><br><span class=\"line\">            eval(&quot;let b &#x3D; __webpack_require__(&#x2F;*! .&#x2F;base&#x2F;b *&#x2F; \\&quot;.&#x2F;src&#x2F;base&#x2F;b.js\\&quot;)\\n\\nmodule.exports &#x3D; &#39;a&#39;+ b\\n\\n\\n\\n&#x2F;&#x2F;# sourceURL&#x3D;webpack:&#x2F;&#x2F;&#x2F;.&#x2F;src&#x2F;a.js?&quot;);</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">    &quot;.&#x2F;src&#x2F;base&#x2F;b.js&quot;:</span><br><span class=\"line\">        (function (module, exports) &#123;</span><br><span class=\"line\">            eval(&quot;module.exports &#x3D; &#39;b&#39;\\n\\n\\n&#x2F;&#x2F;# sourceURL&#x3D;webpack:&#x2F;&#x2F;&#x2F;.&#x2F;src&#x2F;base&#x2F;b.js?&quot;);</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">    &quot;.&#x2F;src&#x2F;index.js&quot;:</span><br><span class=\"line\">        (function (module, exports, __webpack_require__) &#123;</span><br><span class=\"line\">            eval(&quot; let str &#x3D; __webpack_require__(&#x2F;*! .&#x2F;a.js *&#x2F; \\&quot;.&#x2F;src&#x2F;a.js\\&quot;)\\n\\n console.log(str);\\n\\n\\n&#x2F;&#x2F;# sourceURL&#x3D;webpack:&#x2F;&#x2F;&#x2F;.&#x2F;src&#x2F;index.js?&quot;);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>新建项目用于自己的<code>webpack</code>,这里叫<code>may-pack</code></p>\n<p><code>yarn init</code></p>\n<p>如果在node里想执行命令，创建<code>bin</code>文件,再创建<code>may-pack.js</code></p>\n<p>配置<code>package.json</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;: &quot;may-pack&quot;,</span><br><span class=\"line\">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class=\"line\">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class=\"line\">  &quot;license&quot;: &quot;MIT&quot;,</span><br><span class=\"line\">  &quot;bin&quot;: &#123;</span><br><span class=\"line\">    &quot;may-pack&quot;: &quot;.&#x2F;bin&#x2F;may-pack.js&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>may-pack.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!  &#x2F;usr&#x2F;bin&#x2F;env node </span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; node环境</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&#39;start&#39;);</span><br></pre></td></tr></table></figure>\n<p>运行<code>npm link</code>将npm 模块链接到对应的运行项目中去，方便地对模块进行调试和测试</p>\n<p>在想运行<code>may-pack</code>的项目中运行，<code>npm link may-pack</code> 得到 <code>start</code></p>\n<h2 id=\"webpack分析及处理\">webpack分析及处理<a href=\"#webpack分析及处理\" title=\"webpack分析及处理\"></a></h2><p><code>may-pack.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!  &#x2F;usr&#x2F;bin&#x2F;env node</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; node环境</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&#39;start&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">let path &#x3D; require(&#39;path&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 拿到配置文件webpack.config.js</span><br><span class=\"line\">let config &#x3D; require(path.resolve(&#39;webpack.config.js&#39;));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">let Compiler &#x3D; require(&#39;..&#x2F;lib&#x2F;Compiler.js&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">let compiler &#x3D; new Compiler(config);</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 标识运行编译</span><br><span class=\"line\">compiler.run()</span><br></pre></td></tr></table></figure>\n\n<p>创建<code>lib</code>文件<code>Compiler.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let path &#x3D; require(&#39;path&#39;)</span><br><span class=\"line\">let fs &#x3D; require(&#39;fs&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">class Compiler &#123;</span><br><span class=\"line\">    constructor(config) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; entry  output</span><br><span class=\"line\">        this.config &#x3D; config</span><br><span class=\"line\">        &#x2F;&#x2F; 需要保存入口文件的路径</span><br><span class=\"line\">        this.entryId &#x3D; &#39;&#39;;   &#x2F;&#x2F; &#39;.&#x2F;src&#x2F;index.js&#39;</span><br><span class=\"line\">        &#x2F;&#x2F; 需要保存所有的模块依赖</span><br><span class=\"line\">        this.modules &#x3D; &#123;&#125;;</span><br><span class=\"line\">        this.entry &#x3D; config.entry  &#x2F;&#x2F; 入口文件</span><br><span class=\"line\">        &#x2F;&#x2F; 工作目录</span><br><span class=\"line\">        this.root &#x3D; process.cwd(); &#x2F;&#x2F; 当前运行npx的路径</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F; 构建模块</span><br><span class=\"line\">    buildModule(modulePath, isEntry) &#123;</span><br><span class=\"line\">       </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 发射文件</span><br><span class=\"line\">    emitFile() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 用数据 渲染想要的</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    run() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 执行 创建模块的依赖关系</span><br><span class=\"line\">        this.buildModule(path.resolve(this.root, this.entry), true)  &#x2F;&#x2F; path.resolve(this.root, this.entry) 得到入口文件的绝对路径</span><br><span class=\"line\">        &#x2F;&#x2F; 发射打包后的文件</span><br><span class=\"line\">        this.emitFile()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; Compiler</span><br></pre></td></tr></table></figure>\n<p>主要两个任务</p>\n<ol><li>拿到入口Id</li>\n<li>解析模块，也就是实现<code>buildModule</code>方法</li>\n</ol><h2 id=\"创建依赖关系\">创建依赖关系<a href=\"#创建依赖关系\" title=\"创建依赖关系\"></a></h2><p><code>may-pack</code>中<code>Compiler.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">let path &#x3D; require(&#39;path&#39;)</span><br><span class=\"line\">let fs &#x3D; require(&#39;fs&#39;)</span><br><span class=\"line\">&#x2F;&#x2F; babylon  主要把源码转成ast Babylon 是 Babel 中使用的 JavaScript 解析器。</span><br><span class=\"line\">&#x2F;&#x2F; @babel&#x2F;traverse 对ast解析遍历语法树 负责替换，删除和添加节点</span><br><span class=\"line\">&#x2F;&#x2F; @babel&#x2F;types 用于AST节点的Lodash-esque实用程序库</span><br><span class=\"line\">&#x2F;&#x2F; @babel&#x2F;generator 结果生成</span><br><span class=\"line\"></span><br><span class=\"line\">let babylon &#x3D; require(&#39;babylon&#39;)</span><br><span class=\"line\">let traverse &#x3D; require(&#39;@babel&#x2F;traverse&#39;).default;</span><br><span class=\"line\">let type &#x3D; require(&#39;@babel&#x2F;types&#39;);</span><br><span class=\"line\">let generator &#x3D; require(&#39;@babel&#x2F;generator&#39;).default</span><br><span class=\"line\">class Compiler &#123;</span><br><span class=\"line\">    constructor(config) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; entry  output</span><br><span class=\"line\">        this.config &#x3D; config</span><br><span class=\"line\">        &#x2F;&#x2F; 需要保存入口文件的路径</span><br><span class=\"line\">        this.entryId &#x3D; &#39;&#39;;   &#x2F;&#x2F; &#39;.&#x2F;src&#x2F;index.js&#39;</span><br><span class=\"line\">        &#x2F;&#x2F; 需要保存所有的模块依赖</span><br><span class=\"line\">        this.modules &#x3D; &#123;&#125;;</span><br><span class=\"line\">        this.entry &#x3D; config.entry  &#x2F;&#x2F; 入口文件</span><br><span class=\"line\">        &#x2F;&#x2F; 工作目录</span><br><span class=\"line\">        this.root &#x3D; process.cwd(); &#x2F;&#x2F; 当前运行npx的路径</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F; 拿到模块内容</span><br><span class=\"line\">    getSource (modulePath) &#123;</span><br><span class=\"line\">        let content &#x3D; fs.readFileSync(modulePath, &#39;utf8&#39;)</span><br><span class=\"line\">        return content</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    parse (source, parentPath) &#123;</span><br><span class=\"line\">        console.log(source, parentPath)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F; 构建模块</span><br><span class=\"line\">    buildModule(modulePath, isEntry) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 拿到模块内容</span><br><span class=\"line\">        let source &#x3D; this.getSource(modulePath)  &#x2F;&#x2F; 得到入口文件的内容</span><br><span class=\"line\">        &#x2F;&#x2F; 模块id modulePath(需要相对路径) &#x3D; modulePath(模块路径) - this.root(项目工作路径)   src&#x2F;index.js</span><br><span class=\"line\">        let moduleName &#x3D; &#39;.&#x2F;&#39; + path.relative(this.root, modulePath)</span><br><span class=\"line\">        console.log(source, moduleName);  &#x2F;&#x2F; 拿到代码 和相对路径 .&#x2F;src&#x2F;index.js</span><br><span class=\"line\">        if (isEntry) &#123;</span><br><span class=\"line\">            this.entryId &#x3D; moduleName</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        let &#123;sourceCode, dependencies&#125; &#x3D; this.parse(source, path.dirname(moduleName))   &#x2F;&#x2F; .&#x2F;src</span><br><span class=\"line\">        &#x2F;&#x2F; 把相对路径和模块中的内容对应起来</span><br><span class=\"line\">        this.modules[moduleName] &#x3D; sourceCode</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 发射文件</span><br><span class=\"line\">    emitFile() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 用数据 渲染想要的</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    run() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 执行 创建模块的依赖关系</span><br><span class=\"line\">        this.buildModule(path.resolve(this.root, this.entry), true)  &#x2F;&#x2F; path.resolve(this.root, this.entry) 得到入口文件的绝对路径</span><br><span class=\"line\">        console.log(this.modules, this.entryId);</span><br><span class=\"line\">        &#x2F;&#x2F; 发射打包后的文件</span><br><span class=\"line\">        this.emitFile()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; Compiler</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ast递归解析\">ast递归解析<a href=\"#ast递归解析\" title=\"ast递归解析\"></a></h2><p><code>parse</code>方法主要靠解析语法树来进行转义<br><code>babylon</code>  主要把源码转成ast Babylon 是 Babel 中使用的 JavaScript 解析器。<br><code>@babel/traverse</code> 对ast解析遍历语法树 负责替换，删除和添加节点<br><code>@babel/types</code> 用于AST节点的Lodash-esque实用程序库<br><code>@babel/generator</code> 结果生成</p>\n<p><code>yarn add babylon @babel/traverse @babel/types @babel/generator</code></p>\n<p><code>may-pack</code>中<code>Compiler.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let path &#x3D; require(&#39;path&#39;)</span><br><span class=\"line\">let fs &#x3D; require(&#39;fs&#39;)</span><br><span class=\"line\">&#x2F;&#x2F; babylon  主要把源码转成ast Babylon 是 Babel 中使用的 JavaScript 解析器。</span><br><span class=\"line\">&#x2F;&#x2F; @babel&#x2F;traverse 对ast解析遍历语法树 负责替换，删除和添加节点</span><br><span class=\"line\">&#x2F;&#x2F; @babel&#x2F;types 用于AST节点的Lodash-esque实用程序库</span><br><span class=\"line\">&#x2F;&#x2F; @babel&#x2F;generator 结果生成</span><br><span class=\"line\"></span><br><span class=\"line\">let babylon &#x3D; require(&#39;babylon&#39;)</span><br><span class=\"line\">let traverse &#x3D; require(&#39;@babel&#x2F;traverse&#39;).default;</span><br><span class=\"line\">let type &#x3D; require(&#39;@babel&#x2F;types&#39;);</span><br><span class=\"line\">let generator &#x3D; require(&#39;@babel&#x2F;generator&#39;).default</span><br><span class=\"line\">class Compiler &#123;</span><br><span class=\"line\">    constructor(config) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; entry  output</span><br><span class=\"line\">        this.config &#x3D; config</span><br><span class=\"line\">        &#x2F;&#x2F; 需要保存入口文件的路径</span><br><span class=\"line\">        this.entryId &#x3D; &#39;&#39;;   &#x2F;&#x2F; &#39;.&#x2F;src&#x2F;index.js&#39;</span><br><span class=\"line\">        &#x2F;&#x2F; 需要保存所有的模块依赖</span><br><span class=\"line\">        this.modules &#x3D; &#123;&#125;;</span><br><span class=\"line\">        this.entry &#x3D; config.entry  &#x2F;&#x2F; 入口文件</span><br><span class=\"line\">        &#x2F;&#x2F; 工作目录</span><br><span class=\"line\">        this.root &#x3D; process.cwd(); &#x2F;&#x2F; 当前运行npx的路径</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F; 拿到模块内容</span><br><span class=\"line\">    getSource (modulePath) &#123;</span><br><span class=\"line\">        let content &#x3D; fs.readFileSync(modulePath, &#39;utf8&#39;)</span><br><span class=\"line\">        return content</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    parse (source, parentPath) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; AST解析语法树</span><br><span class=\"line\">        let ast &#x3D; babylon.parse(source)</span><br><span class=\"line\">        let dependencies &#x3D; []; &#x2F;&#x2F; 依赖的数组</span><br><span class=\"line\">        &#x2F;&#x2F; https:&#x2F;&#x2F;astexplorer.net&#x2F;</span><br><span class=\"line\">        traverse(ast, &#123;</span><br><span class=\"line\">            &#x2F;&#x2F; 调用表达式</span><br><span class=\"line\">            CallExpression(p) &#123;</span><br><span class=\"line\">                let node &#x3D; p.node; &#x2F;&#x2F;对应的节点</span><br><span class=\"line\">                if(node.callee.name &#x3D;&#x3D;&#x3D; &#39;require&#39;) &#123;</span><br><span class=\"line\">                   node.callee.name &#x3D; &#39;__webpack_require__&#39;</span><br><span class=\"line\">                    let moduledName &#x3D; node.arguments[0].value   &#x2F;&#x2F; 取到模块的引用名字</span><br><span class=\"line\">                    moduledName &#x3D; moduledName + (path.extname(moduledName) ? &#39;&#39;: &#39;.js&#39;);  &#x2F;&#x2F; .&#x2F;a.js</span><br><span class=\"line\">                    moduledName &#x3D; &#39;.&#x2F;&#39; + path.join(parentPath, moduledName)  &#x2F;&#x2F; &#39;.&#x2F;src&#x2F;a.js&#39;</span><br><span class=\"line\">                    dependencies.push(moduledName)</span><br><span class=\"line\">                    node.arguments &#x3D; [type.stringLiteral(moduledName)] &#x2F;&#x2F; 改掉源码</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        let sourceCode &#x3D; generator(ast).code</span><br><span class=\"line\">        return &#123; sourceCode, dependencies &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F; 构建模块</span><br><span class=\"line\">    buildModule(modulePath, isEntry) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 拿到模块内容</span><br><span class=\"line\">        let source &#x3D; this.getSource(modulePath)  &#x2F;&#x2F; 得到入口文件的内容</span><br><span class=\"line\">        &#x2F;&#x2F; 模块id modulePath(需要相对路径) &#x3D; modulePath(模块路径) - this.root(项目工作路径)   src&#x2F;index.js</span><br><span class=\"line\">        let moduleName &#x3D; &#39;.&#x2F;&#39; + path.relative(this.root, modulePath)</span><br><span class=\"line\">        &#x2F;&#x2F; console.log(source, moduleName);  &#x2F;&#x2F; 拿到代码 和相对路径 .&#x2F;src&#x2F;index.js</span><br><span class=\"line\">        if (isEntry) &#123;</span><br><span class=\"line\">            this.entryId &#x3D; moduleName</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#x2F;&#x2F; 解析把source源码进行改造， 返回一个依赖列表</span><br><span class=\"line\">        let &#123;sourceCode, dependencies&#125; &#x3D; this.parse(source, path.dirname(moduleName))   &#x2F;&#x2F; .&#x2F;src</span><br><span class=\"line\">        &#x2F;&#x2F; 把相对路径和模块中的内容对应起来</span><br><span class=\"line\">        this.modules[moduleName] &#x3D; sourceCode</span><br><span class=\"line\">        dependencies.forEach(dep &#x3D;&gt; &#123;  &#x2F;&#x2F; 附模块的加载 递归加载</span><br><span class=\"line\">            this.buildModule(path.join(this.root, dep), false)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 发射文件</span><br><span class=\"line\">    emitFile() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 用数据 渲染想要的</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    run() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 执行 创建模块的依赖关系</span><br><span class=\"line\">        this.buildModule(path.resolve(this.root, this.entry), true)  &#x2F;&#x2F; path.resolve(this.root, this.entry) 得到入口文件的绝对路径</span><br><span class=\"line\">        console.log(this.modules, this.entryId);</span><br><span class=\"line\">        &#x2F;&#x2F; 发射打包后的文件</span><br><span class=\"line\">        this.emitFile()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; Compiler</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"生成打包工具\">生成打包工具<a href=\"#生成打包工具\" title=\"生成打包工具\"></a></h2><p>使用ejs模板</p>\n<p><code>may-pack</code>中<code>main.ejs</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function (modules) &#123;</span><br><span class=\"line\">var installedModules &#x3D; &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">function __webpack_require__(moduleId) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">if (installedModules[moduleId]) &#123;</span><br><span class=\"line\">return installedModules[moduleId].exports;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var module &#x3D; installedModules[moduleId] &#x3D; &#123;</span><br><span class=\"line\">i: moduleId,</span><br><span class=\"line\">l: false,</span><br><span class=\"line\">exports: &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);</span><br><span class=\"line\"></span><br><span class=\"line\">module.l &#x3D; true;</span><br><span class=\"line\"></span><br><span class=\"line\">return module.exports;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; Load entry module and return exports</span><br><span class=\"line\">return __webpack_require__(__webpack_require__.s &#x3D; &quot;&lt;%-entryId %&gt;&quot;);</span><br><span class=\"line\">&#125;)(&#123;</span><br><span class=\"line\">&lt;% for(let key in modules)&#123; %&gt;</span><br><span class=\"line\">    &quot;&lt;%- key %&gt;&quot;:</span><br><span class=\"line\">    (function (module, exports,__webpack_require__) &#123;</span><br><span class=\"line\">eval(&#96;&lt;%-modules[key] %&gt;&#96;);</span><br><span class=\"line\">&#125;),</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://ejs.bootcss.com/\" target=\"_blank\">ejs入门</a></p>\n<p><code>yarn add ejs</code></p>\n<p><code>may-pack</code>中<code>Compiler.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let ejs &#x3D; require(&#39;ejs&#39;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 发射文件</span><br><span class=\"line\">    emitFile() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 用数据 渲染想要的</span><br><span class=\"line\">        &#x2F;&#x2F; 输出到那个目录下</span><br><span class=\"line\">        let main &#x3D; path.join(this.config.output.path, this.config.output.filename)</span><br><span class=\"line\">        let templateStr &#x3D; this.getSource(path.join(__dirname, &#39;main.ejs&#39;))</span><br><span class=\"line\">        let code &#x3D; ejs.render(templateStr, &#123; entryId: this.entryId, modules: this.modules&#125;)</span><br><span class=\"line\">        this.assets &#x3D; &#123;&#125;</span><br><span class=\"line\">        &#x2F;&#x2F; 路径对应的代码</span><br><span class=\"line\">        this.assets[main] &#x3D; code</span><br><span class=\"line\">        fs.writeFileSync(main, this.assets[main])</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>在<code>webpack-training</code>项目中运行<code>npx may-pack</code>, 得到<code>bundle.js</code>,运行得到结果</p>\n<h2 id=\"增加loader\">增加loader<a href=\"#增加loader\" title=\"增加loader\"></a></h2><p>创建<code>loader</code>文件夹，创建<code>less-loader1.js</code>和<code>style-loader1.js</code></p>\n<p><code>yarn add less</code></p>\n<p><a href=\"http://lesscss.cn/#using-less\" target=\"_blank\">less使用</a></p>\n<p><code>less-loader1.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 将less转为css</span><br><span class=\"line\">let less &#x3D; require(&#39;less&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">function loader(source) &#123;</span><br><span class=\"line\">    let css &#x3D; &#39;&#39;</span><br><span class=\"line\">    less.render(source, function (err, output) &#123;</span><br><span class=\"line\">        css &#x3D; output.css</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    css &#x3D; css.replace(&#x2F;\\n&#x2F;g, &#39;\\\\n&#39;);</span><br><span class=\"line\">    return css</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; loader</span><br></pre></td></tr></table></figure>\n\n<p><code>style-loader1.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 将css插入到html头部</span><br><span class=\"line\">function loader(source) &#123;</span><br><span class=\"line\">    console.log(111);</span><br><span class=\"line\">    let style &#x3D; &#96;</span><br><span class=\"line\">    let style &#x3D; document.createElement(&#39;style&#39;)</span><br><span class=\"line\">    style.innerHTML &#x3D; $&#123;JSON.stringify(source)&#125;</span><br><span class=\"line\">    document.head.appendChild(style)</span><br><span class=\"line\">   &#96;</span><br><span class=\"line\">    return style</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports &#x3D; loader</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; JSON.stringify(source) 可以将代码转为一行</span><br></pre></td></tr></table></figure>\n\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let path &#x3D; require(&#39;path&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">    mode: &#39;development&#39;,</span><br><span class=\"line\">    entry: &#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: &#39;bundle.js&#39;,</span><br><span class=\"line\">        path: path.resolve(__dirname, &#39;dist&#39;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: &#x2F;\\.less$&#x2F;,</span><br><span class=\"line\">                use: [</span><br><span class=\"line\">                    path.resolve(__dirname, &#39;loader&#39;, &#39;style-loader1&#39;),</span><br><span class=\"line\">                    path.resolve(__dirname, &#39;loader&#39;, &#39;less-loader1&#39;)</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建<code>index.less</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body &#123;</span><br><span class=\"line\">  background: red</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>index.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let str &#x3D; require(&#39;.&#x2F;a.js&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">require(&#39;.&#x2F;index.less&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(str);</span><br></pre></td></tr></table></figure>\n\n<p><code>may-pack</code>中<code>Compiler.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 拿到模块内容</span><br><span class=\"line\">    getSource (modulePath) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 匹配各种文件的规则</span><br><span class=\"line\">        let rules&#x3D; this.config.module.rules;   &#x2F;&#x2F; webpack.config.js 中rules的数组</span><br><span class=\"line\">        let content &#x3D; fs.readFileSync(modulePath, &#39;utf8&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">        for (let i &#x3D; 0; i &lt; rules.length; i++) &#123;</span><br><span class=\"line\">            let rule &#x3D; rules[i]</span><br><span class=\"line\">            let &#123;test, use&#125; &#x3D; rule</span><br><span class=\"line\">            let len &#x3D; use.length - 1</span><br><span class=\"line\"></span><br><span class=\"line\">            if (test.test(modulePath)) &#123;</span><br><span class=\"line\">                &#x2F;&#x2F; console.log(use[len]);</span><br><span class=\"line\">                function normalLoader () &#123;</span><br><span class=\"line\">                    &#x2F;&#x2F; console.log(use[len--]);</span><br><span class=\"line\">                    let loader &#x3D; require(use[len--])</span><br><span class=\"line\">                    content &#x3D; loader(content)</span><br><span class=\"line\">                    &#x2F;&#x2F; 递归调用loader 实现转化</span><br><span class=\"line\">                    if (len &gt;&#x3D; 0) &#123;</span><br><span class=\"line\">                        normalLoader()</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                normalLoader()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return content</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行<code>npx may-pack</code></p>\n<h2 id=\"增加plugins\">增加plugins<a href=\"#增加plugins\" title=\"增加plugins\"></a></h2><p><code>yarn add tapable</code></p>\n<p><code>may-pack</code>中<code>Compiler.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">constructor(config) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; entry  output</span><br><span class=\"line\">        this.config &#x3D; config</span><br><span class=\"line\">        &#x2F;&#x2F; 需要保存入口文件的路径</span><br><span class=\"line\">        this.entryId &#x3D; &#39;&#39;;   &#x2F;&#x2F; &#39;.&#x2F;src&#x2F;index.js&#39;</span><br><span class=\"line\">        &#x2F;&#x2F; 需要保存所有的模块依赖</span><br><span class=\"line\">        this.modules &#x3D; &#123;&#125;;</span><br><span class=\"line\">        this.entry &#x3D; config.entry  &#x2F;&#x2F; 入口文件</span><br><span class=\"line\">        &#x2F;&#x2F; 工作目录</span><br><span class=\"line\">        this.root &#x3D; process.cwd(); &#x2F;&#x2F; 当前运行npx的路径</span><br><span class=\"line\"></span><br><span class=\"line\">        this.hooks &#x3D; &#123;</span><br><span class=\"line\">            entryOption: new SyncHook(),  &#x2F;&#x2F; 入口选项</span><br><span class=\"line\">            compile: new SyncHook(),      &#x2F;&#x2F; 编译</span><br><span class=\"line\">            afterCompile: new SyncHook(),  &#x2F;&#x2F; 编译完成</span><br><span class=\"line\">            afterPlugins: new SyncHook(),   &#x2F;&#x2F; 编译完插件</span><br><span class=\"line\">            run: new SyncHook(),         &#x2F;&#x2F; 运行</span><br><span class=\"line\">            emit: new SyncHook(),        &#x2F;&#x2F; 发射</span><br><span class=\"line\">            done: new SyncHook()         &#x2F;&#x2F; 完成</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#x2F;&#x2F; 如果传递了plugins参数</span><br><span class=\"line\">        let plugins &#x3D; this.config.plugins</span><br><span class=\"line\">        if (Array.isArray(plugins)) &#123;</span><br><span class=\"line\">            plugins.forEach(plugin &#x3D;&gt; &#123;</span><br><span class=\"line\">                plugin.apply(this); &#x2F;&#x2F; 这里只是appLy方法不是改变this指向</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        this.hooks.afterPlugins.call()</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>在<code>webpack.config.js</code>中写插件方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class P &#123;</span><br><span class=\"line\">    apply(compiler) &#123;   &#x2F;&#x2F; 这里只是appLy方法不是改变this指向</span><br><span class=\"line\">        &#x2F;&#x2F; 绑定</span><br><span class=\"line\">        compiler.hooks.emit.tap(&#39;emit&#39;, function () &#123;</span><br><span class=\"line\">            console.log(&#39;emit&#39;);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class P1 &#123;</span><br><span class=\"line\">    apply(compiler) &#123;   &#x2F;&#x2F; 这里只是appLy方法不是改变this指向</span><br><span class=\"line\">        &#x2F;&#x2F; 绑定</span><br><span class=\"line\">        compiler.hooks.afterPlugins.tap(&#39;emit&#39;, function () &#123;</span><br><span class=\"line\">            console.log(&#39;afterPlugins&#39;);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">    mode: &#39;development&#39;,</span><br><span class=\"line\">    entry: &#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: &#39;bundle.js&#39;,</span><br><span class=\"line\">        path: path.resolve(__dirname, &#39;dist&#39;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: &#x2F;\\.less$&#x2F;,</span><br><span class=\"line\">                use: [</span><br><span class=\"line\">                    path.resolve(__dirname, &#39;loader&#39;, &#39;style-loader&#39;),</span><br><span class=\"line\">                    path.resolve(__dirname, &#39;loader&#39;, &#39;less-loader&#39;)</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        new P(),</span><br><span class=\"line\">        new P1()</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后在各个地方调用</p>\n<p><code>may-pack</code>中<code>may-pack.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.....</span><br><span class=\"line\">&#x2F;&#x2F; 调用</span><br><span class=\"line\">compiler.hooks.entryOption.call()</span><br><span class=\"line\">&#x2F;&#x2F; 标识运行编译</span><br><span class=\"line\">compiler.run()</span><br></pre></td></tr></table></figure>\n\n<p><code>may-pack</code>中<code>Compiler.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">run() &#123;</span><br><span class=\"line\">        this.hooks.run.call()</span><br><span class=\"line\"></span><br><span class=\"line\">        this.hooks.compile.call()</span><br><span class=\"line\">        &#x2F;&#x2F; 执行 创建模块的依赖关系</span><br><span class=\"line\">        this.buildModule(path.resolve(this.root, this.entry), true)  &#x2F;&#x2F; path.resolve(this.root, this.entry) 得到入口文件的绝对路径</span><br><span class=\"line\">        &#x2F;&#x2F; console.log(this.modules, this.entryId);</span><br><span class=\"line\">        this.hooks.afterCompile.call()</span><br><span class=\"line\">        &#x2F;&#x2F; 发射打包后的文件</span><br><span class=\"line\">        this.emitFile()</span><br><span class=\"line\">        this.hooks.emit.call()</span><br><span class=\"line\">        this.hooks.done.call()</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行<code>npx may-pack</code></p>\n<h2 id=\"loader\">loader<a href=\"#loader\" title=\"loader\"></a></h2><p><a href=\"https://juejin.im/post/59e6a5de518825469c7461da\" target=\"_blank\">手写loader</a></p>\n<p><code>webapck.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let path &#x3D; require(&#39;path&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">    mode: &#39;development&#39;,</span><br><span class=\"line\">    entry: &#39;.&#x2F;src&#x2F;index&#39;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: &#39;build.js&#39;,</span><br><span class=\"line\">        path: path.resolve(__dirname, &#39;dist&#39;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: &#x2F;\\.js&#x2F;,</span><br><span class=\"line\">                use: &#39;loader1&#39; &#x2F;&#x2F; 如何找到这个loader1</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建<code>loader</code>文件<code>loader1.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(22);</span><br><span class=\"line\"></span><br><span class=\"line\">function loader(source) &#123;  &#x2F;&#x2F; loader的参数就是源代码</span><br><span class=\"line\">    return source</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports &#x3D; loader</span><br></pre></td></tr></table></figure>\n\n\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let path &#x3D; require(&#39;path&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">    mode: &#39;development&#39;,</span><br><span class=\"line\">    entry: &#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: &#39;build.js&#39;,</span><br><span class=\"line\">        path: path.resolve(__dirname, &#39;dist&#39;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    resolveLoader: &#123;</span><br><span class=\"line\">      &#x2F;&#x2F; 别名</span><br><span class=\"line\">      &#x2F;&#x2F; alias: &#123;</span><br><span class=\"line\">      &#x2F;&#x2F;     loader1: path.resolve(__dirname, &#39;loader&#39;, &#39;loader1&#39;)</span><br><span class=\"line\">      &#x2F;&#x2F; &#125;</span><br><span class=\"line\">        modules: [&#39;node_modules&#39;, path.resolve(__dirname, &#39;loader&#39;)]  &#x2F;&#x2F; 先找node_modules, 再去loader中去找</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: &#x2F;\\.js$&#x2F;,</span><br><span class=\"line\">                &#x2F;&#x2F; use: [path.resolve(__dirname, &#39;loader&#39;, &#39;loader1&#39;)]</span><br><span class=\"line\">                use: &#39;loader1&#39; &#x2F;&#x2F; 如何找到这个loader1</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#x2F;&#x2F; &#123;</span><br><span class=\"line\">            &#x2F;&#x2F;     test: &#x2F;\\.less$&#x2F;,</span><br><span class=\"line\">            &#x2F;&#x2F;     use: [</span><br><span class=\"line\">            &#x2F;&#x2F;         path.resolve(__dirname, &#39;loader&#39;, &#39;style-loader&#39;),</span><br><span class=\"line\">            &#x2F;&#x2F;         path.resolve(__dirname, &#39;loader&#39;, &#39;less-loader&#39;)</span><br><span class=\"line\">            &#x2F;&#x2F;     ]</span><br><span class=\"line\">            &#x2F;&#x2F; &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如何找到这个<code>loader1</code></p>\n<ol><li>通过配别名<code>alias</code></li>\n<li>通过<code>modules</code></li>\n</ol><p><code>npx webpack</code></p>\n<h2 id=\"配置多个loader\">配置多个loader<a href=\"#配置多个loader\" title=\"配置多个loader\"></a></h2><ol><li>数组方式</li>\n</ol><p>先分别在<code>loader</code>文件下创建，<code>loader2.js</code>和<code>loader3.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">function loader(source) &#123;  &#x2F;&#x2F; loader的参数就是源代码</span><br><span class=\"line\">    console.log(&#39;loader2&#39;);  &#x2F;&#x2F; loader3.js 类似</span><br><span class=\"line\">    return source</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports &#x3D; loader</span><br></pre></td></tr></table></figure>\n\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rules: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        test: &#x2F;\\.js$&#x2F;,</span><br><span class=\"line\">        use: [&#39;loader3&#39;, &#39;loader2&#39;, &#39;loader1&#39;]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>运行<code>npx webpack</code>,分别打出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loader1</span><br><span class=\"line\">loader2</span><br><span class=\"line\">loader3</span><br></pre></td></tr></table></figure>\n\n<ol><li>对象方式</li>\n</ol><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rules: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        test: &#x2F;\\.js$&#x2F;,</span><br><span class=\"line\">        use: [&#39;loader3&#39;]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        test: &#x2F;\\.js$&#x2F;,</span><br><span class=\"line\">        use: [&#39;loader2&#39;]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        test: &#x2F;\\.js$&#x2F;,</span><br><span class=\"line\">        use: [&#39;loader1&#39;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>运行<code>npx webpack</code>,分别打出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loader1</span><br><span class=\"line\">loader2</span><br><span class=\"line\">loader3</span><br></pre></td></tr></table></figure>\n\n\n<blockquote>\n<p><code>loader</code>的顺序: 从右到左, 从下到上</p>\n</blockquote>\n<p>也可以通过配置不同的参数改变<code>loader</code>的执行顺序，<code>pre</code> 前面的， <code>post</code>在后面的， <code>normal</code>正常</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    test: &#x2F;\\.js$&#x2F;,</span><br><span class=\"line\">    use: [&#39;loader1&#39;],</span><br><span class=\"line\">    enforce: &quot;pre&quot;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    test: &#x2F;\\.js$&#x2F;,</span><br><span class=\"line\">    use: [&#39;loader2&#39;]</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    test: &#x2F;\\.js$&#x2F;,</span><br><span class=\"line\">    use: [&#39;loader3&#39;],</span><br><span class=\"line\">    enforce: &quot;post&quot;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p><code>loader</code> 带参数执行的顺序: <code>pre  -&gt; normal -&gt; inline -&gt; post</code></p>\n<p><code>inline</code>为行内<code>loader</code></p>\n<p>在<code>loader</code>文件中新建<code>inlin-loader</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">function loader(source) &#123;  &#x2F;&#x2F; loader的参数就是源代码</span><br><span class=\"line\">    console.log(&#39;inline&#39;);</span><br><span class=\"line\">    return source</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports &#x3D; loader</span><br></pre></td></tr></table></figure>\n\n<p><code>src/a.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports &#x3D; &#39;may&#39;</span><br></pre></td></tr></table></figure>\n\n<p><code>src/index</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(&#39;hello&#39;)</span><br><span class=\"line\">let srt &#x3D; require(&#39;-!inline-loader!.&#x2F;a&#39;)</span><br></pre></td></tr></table></figure>\n\n<ol><li><code>-!</code>禁用<code>pre-loader</code>和 <code>normal-loader</code>来处理了</li>\n</ol><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loader1</span><br><span class=\"line\">loader2</span><br><span class=\"line\">loader3</span><br><span class=\"line\">inline</span><br><span class=\"line\">loader3</span><br></pre></td></tr></table></figure>\n\n\n\n<ol><li><code>!</code>禁用<code>normal-loader</code></li>\n</ol><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loader1</span><br><span class=\"line\">loader2</span><br><span class=\"line\">loader3</span><br><span class=\"line\">loader1</span><br><span class=\"line\">inline</span><br><span class=\"line\">loader3</span><br></pre></td></tr></table></figure>\n\n\n\n<ol><li><code>!!</code> 禁用<code>pre-loader</code>、<code>normal-loader</code>、<code>post-loader</code>,只能行内处理</li>\n</ol><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loader1</span><br><span class=\"line\">loader2</span><br><span class=\"line\">loader3</span><br><span class=\"line\">inline</span><br></pre></td></tr></table></figure>\n\n<p>loader 默认由两部分组成<code>pitch</code>和<code>normal</code></p>\n<p><code>user: [loader3, loader2, loader1]</code></p>\n<p>无返回值: 先执行pitch方法,从左到右，再获取资源</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    pitch loader - 无返回值</span><br><span class=\"line\">    </span><br><span class=\"line\">pitch   loader3 → loader2 → loader1  </span><br><span class=\"line\">                                    ↘</span><br><span class=\"line\">                                      资源</span><br><span class=\"line\">                                    ↙</span><br><span class=\"line\">normal   loader3 ← loader2 ← loader1</span><br></pre></td></tr></table></figure>\n\n<p>有返回值: 直接跳过后续所有的<code>loader</code>包括自己的,跳到之前的<code>loader</code>, 可用于阻断</p>\n<p><a href=\"https://webpack.docschina.org/api/loaders/\" target=\"_blank\">loader</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user: [loader3, loader2, loader1]</span><br><span class=\"line\"></span><br><span class=\"line\">    pitch loader - 有返回值</span><br><span class=\"line\">    </span><br><span class=\"line\">pitch   loader3 → loader2  loader1  </span><br><span class=\"line\">                     ↙               </span><br><span class=\"line\">               有返回值               资源</span><br><span class=\"line\">               ↙                      </span><br><span class=\"line\">normal  loader3  loader2  loader1</span><br></pre></td></tr></table></figure>\n\n<p><code>loadeer2.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">function loader(source) &#123;  &#x2F;&#x2F; loader的参数就是源代码</span><br><span class=\"line\">    console.log(&#39;loader2&#39;);</span><br><span class=\"line\">    return source</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">loader.pitch &#x3D; function () &#123;</span><br><span class=\"line\">    return &#39;111&#39;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports &#x3D; loader</span><br></pre></td></tr></table></figure>\n\n<p>结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loader3</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"babel-loader实现\"><code>babel-loader</code>实现<a href=\"#babel-loader实现\" title=\"babel-loader实现\"></a></h2><p><code>yarn add @babel/core @babel/preset-env</code></p>\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    test: &#39;\\.js$&#x2F;&#39;,</span><br><span class=\"line\">    use: &#123;</span><br><span class=\"line\">        loader: &#39;babel-loader2&#39;,</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">            presets: [</span><br><span class=\"line\">                &#39;@babel&#x2F;preset-env&#39;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在<code>loader</code>文件创建<code>babel-loader2.js</code>(如果你已经装过<code>babel-loader</code>)</p>\n<p>拿到<code>babel</code>的参数</p>\n<p><code>yarn add loader-utils</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 需要在webpack.config.js拿到babel的预设, 通过预设转换模块, 先引入babel</span><br><span class=\"line\">let babel &#x3D; require(&#39;@babel&#x2F;core&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 拿到babel的参数 需要工具 loaderUtils</span><br><span class=\"line\">let loaderUtils &#x3D;require(&#39;loader-utils&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">function loader(source) &#123;  &#x2F;&#x2F; loader的参数就是源代码  这里的this就是loader的上下文</span><br><span class=\"line\">    let options &#x3D; loaderUtils.getOptions(this)</span><br><span class=\"line\">    console.log(this.resourcePath, 444);   &#x2F;&#x2F; [.&#x2F;src&#x2F;index.js]</span><br><span class=\"line\">    let callback &#x3D; this.async(); &#x2F;&#x2F; babel的转换是异步的,同步的返回是不行的， 不能用return  同步就是直接掉用 异步会在async中</span><br><span class=\"line\">    babel.transform(source, &#123;</span><br><span class=\"line\">        ...options,</span><br><span class=\"line\">        sourceMap: true,         &#x2F;&#x2F; 是否设置sourceMap 还需要再webpack.config.js 中配置  devtool: &#39;source-map&#39;</span><br><span class=\"line\">        filename: this.resourcePath.split(&#39;&#x2F;&#39;).pop()   &#x2F;&#x2F;  给生成的&#96;source-map&#96;指定名字</span><br><span class=\"line\">    &#125;, function (err, result) &#123;</span><br><span class=\"line\">        callback(err, result.code, result.map)   &#x2F;&#x2F; 异步 参数分别是「错误 转化后的代码 和 sourceMap」</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    console.log(options);</span><br><span class=\"line\">    &#x2F;&#x2F; return source  失效</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; loader</span><br></pre></td></tr></table></figure>\n\n\n<p><code>index.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class May &#123;</span><br><span class=\"line\">    constructor () &#123;</span><br><span class=\"line\">        this.name &#x3D; &#39;may&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    getName () &#123;</span><br><span class=\"line\">        return this.name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">let may &#x3D; new May()</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(may.getName());</span><br></pre></td></tr></table></figure>\n\n<p><code>npx webpack</code></p>\n<h2 id=\"banner-loader实现自创\"><code>banner-loader</code>实现(自创)<a href=\"#banner-loader实现自创\" title=\"banner-loader实现(自创)\"></a></h2><p>给所有匹配的<code>js</code>加一个注释</p>\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;    &#x2F;&#x2F; 给所有匹配的&#96;js&#96;加一个注释</span><br><span class=\"line\">    test: &#x2F;\\.js$&#x2F;,</span><br><span class=\"line\">    use: &#123;</span><br><span class=\"line\">        loader: &#39;banner-loader&#39;,</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">           text: &#39;may&#39;,</span><br><span class=\"line\">           filename: path.resolve(__dirname, &#39;banner.js&#39;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>banner.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">二次星球中毒</span><br></pre></td></tr></table></figure>\n\n\n<p>在<code>loader</code>文件创建<code>banner-loader.js</code></p>\n<p><code>yarn add schema-utils</code> 校验自己写的<code>loader</code>格式是否正确</p>\n<p><a href=\"https://github.com/webpack-contrib/schema-utils\" target=\"_blank\">schema-utils</a></p>\n<p><code>banner-loader.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 拿到loader的配置</span><br><span class=\"line\">let loaderUtils &#x3D; require(&#39;loader-utils&#39;)</span><br><span class=\"line\">&#x2F;&#x2F; 校验loader</span><br><span class=\"line\">let validateOptions &#x3D; require(&#39;schema-utils&#39;)</span><br><span class=\"line\">&#x2F;&#x2F; 读取文件</span><br><span class=\"line\">let fs &#x3D; require(&#39;fs&#39;)  &#x2F;&#x2F; 异步</span><br><span class=\"line\"></span><br><span class=\"line\">function loader(source) &#123;  &#x2F;&#x2F; loader的参数就是源代码</span><br><span class=\"line\">    let options &#x3D; loaderUtils.getOptions(this)</span><br><span class=\"line\">    let callback &#x3D; this.async()  &#x2F;&#x2F; 读取文件是异步</span><br><span class=\"line\">    let schema &#x3D; &#123;</span><br><span class=\"line\">        type: &#39;object&#39;,</span><br><span class=\"line\">        properties: &#123;</span><br><span class=\"line\">            text: &#123;</span><br><span class=\"line\">                type: &#39;string&#39;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            filename: &#123;</span><br><span class=\"line\">                type: &#39;string&#39;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    validateOptions(schema, options, &#39;banner-loader&#39;)  &#x2F;&#x2F; 自己的校验格式， 自己的写的配置， 对应的loader名字</span><br><span class=\"line\">    if (options.filename) &#123;</span><br><span class=\"line\">        this.cacheable(false)  &#x2F;&#x2F; 不要缓存  如果有大量计算 推荐缓存</span><br><span class=\"line\">        &#x2F;&#x2F; this.cacheable &amp;&amp; this.cacheable()</span><br><span class=\"line\">        this.addDependency(options.filename) &#x2F;&#x2F; 自动增加依赖</span><br><span class=\"line\">        fs.readFile(options.filename, &#39;utf8&#39;, function (err, data) &#123;</span><br><span class=\"line\">            callback(err, &#96;&#x2F;**$&#123;data&#125;**&#x2F;$&#123;source&#125;&#96;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        callback(null, &#96;&#x2F;**$&#123;options.text&#125;**&#x2F;$&#123;source&#125;&#96;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return source</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports &#x3D; loader</span><br></pre></td></tr></table></figure>\n\n<p>优化:</p>\n<ol><li>修改<code>banner.js</code>的内容后, <code>webpack</code>进行监控，打包<code>webapck.config.js</code>配置<code>watch: true</code></li>\n<li><code>loader</code>缓存</li>\n</ol><h2 id=\"实现file-loader和url-loader\">实现<code>file-loader</code>和<code>url-loader</code><a href=\"#实现file-loader和url-loader\" title=\"实现file-loader和url-loader\"></a></h2><p><code>yarn add mime</code></p>\n<p>其主要用途是设置某种扩展名的文件的响应程序类型</p>\n<p><a href=\"https://github.com/broofa/node-mime#readme\" target=\"_blank\">mime</a></p>\n<p>创建<code>file-loader.js1</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 拿到babel的参数 需要工具 loaderUtils</span><br><span class=\"line\">let loaderUtils &#x3D; require(&#39;loader-utils&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">function loader(source) &#123;  &#x2F;&#x2F; loader的参数就是源代码</span><br><span class=\"line\">    &#x2F;&#x2F; file-loader需要返回路径</span><br><span class=\"line\">    let filename &#x3D; loaderUtils.interpolateName(this, &#39;[hash].[ext]&#39;, &#123;content: source &#125;)</span><br><span class=\"line\">    this.emitFile(filename, source) &#x2F;&#x2F; 发射文件</span><br><span class=\"line\">    console.log(&#39;loader1&#39;);</span><br><span class=\"line\">    return &#96;module.exports&#x3D;&quot;$&#123;filename&#125;&quot;&#96;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">loader.raw &#x3D; true &#x2F;&#x2F; 二进制</span><br><span class=\"line\">module.exports &#x3D; loader</span><br></pre></td></tr></table></figure>\n\n<p>创建<code>url-loader1.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 拿到babel的参数 需要工具 loaderUtils</span><br><span class=\"line\">let loaderUtils &#x3D; require(&#39;loader-utils&#39;)</span><br><span class=\"line\">let mime &#x3D; require(&#39;mime&#39;)  &#x2F;&#x2F; 途是设置某种扩展名的文件的响应程序类型</span><br><span class=\"line\"></span><br><span class=\"line\">function loader(source) &#123;  &#x2F;&#x2F; loader的参数就是源代码</span><br><span class=\"line\">    let &#123;limit&#125; &#x3D; loaderUtils.getOptions(this)</span><br><span class=\"line\">    console.log(this.resourcePath);</span><br><span class=\"line\">    if (limit &amp;&amp; limit &gt; source.length) &#123;</span><br><span class=\"line\">        return &#96;module.exports&#x3D;&quot;data:$&#123;mime.getType(this.resourcePath)&#125;;base64,$&#123;source.toString(&#39;base64&#39;)&#125;&quot;&#96;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        return require(&#39;.&#x2F;file-loader1&#39;).call(this, source)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">loader.raw &#x3D; true &#x2F;&#x2F; 二进制</span><br><span class=\"line\">module.exports &#x3D; loader</span><br></pre></td></tr></table></figure>\n\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    test: &#x2F;\\.png$&#x2F;,</span><br><span class=\"line\">    &#x2F;&#x2F; 目的是根据图片生成md5 发射到dist目录下，file-loader 返回当前图片路径</span><br><span class=\"line\">    &#x2F;&#x2F; use: &#39;file-loader&#39;</span><br><span class=\"line\">    &#x2F;&#x2F; 处理路径</span><br><span class=\"line\">    use: &#123;</span><br><span class=\"line\">        loader: &#39;url-loader1&#39;,</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">            limit: 200 * 1024</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>index.js</code>引入图片</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import p from &#39;.&#x2F;photo.png&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">let img &#x3D; document.createElement(&#39;img&#39;)</span><br><span class=\"line\">img.src &#x3D; p</span><br><span class=\"line\">document.body.appendChild(img);</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"less-loader和css-loader\"><code>less-loader</code>和<code>css-loader</code><a href=\"#less-loader和css-loader\" title=\"less-loader和css-loader\"></a></h2><p>先安装<code>less</code></p>\n<p>分别创建<code>style-loader2</code> <code>css-loader2</code> <code>less-loader2</code></p>\n<p><code>style-loader1</code> 与 <code>less-loader1</code> 同之前的</p>\n<h2 id=\"css-loader\"><code>css-loader</code><a href=\"#css-loader\" title=\"css-loader\"></a></h2><p>主要用来处理<code>css</code>中的图片链接，需要把<code>url</code>转换成<code>require</code></p>\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    test: &#x2F;\\.png$&#x2F;,</span><br><span class=\"line\">    &#x2F;&#x2F; 目的是根据图片生成md5 发射到dist目录下，file-loader 返回当前图片路径</span><br><span class=\"line\">    &#x2F;&#x2F; use: &#39;file-loader&#39;</span><br><span class=\"line\">    &#x2F;&#x2F; 处理路径</span><br><span class=\"line\">    use: &#123;</span><br><span class=\"line\">        loader: &#39;url-loader1&#39;,</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">            limit: 200 * 1024</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    test: &#x2F;\\.less$&#x2F;,</span><br><span class=\"line\">    use: [&#39;style-loader2&#39;, &#39;css-loader2&#39;, &#39;less-loader2&#39;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建<code>index.less</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@base: #f938ab;</span><br><span class=\"line\">body &#123;</span><br><span class=\"line\">  background: @base;</span><br><span class=\"line\">  background: url(&quot;.&#x2F;photo.png&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>less-loader2.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 将less转为css</span><br><span class=\"line\">let less &#x3D; require(&#39;less&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">function loader(source) &#123;</span><br><span class=\"line\">    let css &#x3D; &#39;&#39;</span><br><span class=\"line\">    &#x2F;&#x2F; console.log(source, 2222);</span><br><span class=\"line\">    less.render(source, function (err, output) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; console.log(output);</span><br><span class=\"line\">        css &#x3D; output.css</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    &#x2F;&#x2F; css &#x3D; css.replace(&#x2F;\\n&#x2F;g, &#39;\\\\n&#39;);</span><br><span class=\"line\">    return css</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; loader</span><br></pre></td></tr></table></figure>\n\n\n<p><code>css-loader2.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; css-loader 用来解析@import这种语法,包括css中引入的图片</span><br><span class=\"line\">function loader(source) &#123;</span><br><span class=\"line\">    let reg &#x3D; &#x2F;url\\((.+?)\\)&#x2F;g   &#x2F;&#x2F; 匹配括号</span><br><span class=\"line\"></span><br><span class=\"line\">    let pos &#x3D; 0;</span><br><span class=\"line\">    let current;</span><br><span class=\"line\"></span><br><span class=\"line\">    let arr &#x3D; [&#39;let list &#x3D; []&#39;]</span><br><span class=\"line\"></span><br><span class=\"line\">    while (current &#x3D; reg.exec(source)) &#123;</span><br><span class=\"line\">        let [matchUrl, g] &#x3D; current   &#x2F;&#x2F; matchUrl -&gt; &#39;url(&quot;.&#x2F;photo.png&quot;)&#39;, g  -&gt; &#39;&quot;.&#x2F;photo.png&quot;&#39;</span><br><span class=\"line\">        &#x2F;&#x2F; console.log(matchUrl, g, 88);</span><br><span class=\"line\">        let lastIndex &#x3D; reg.lastIndex - matchUrl.length    &#x2F;&#x2F; 拿到css从开通到地址链接之前的index</span><br><span class=\"line\">        arr.push(&#96;list.push($&#123;JSON.stringify(source.slice(pos, lastIndex))&#125;)&#96;)  &#x2F;&#x2F; 拼入开始和地址之前的代码</span><br><span class=\"line\">        pos &#x3D; reg.lastIndex</span><br><span class=\"line\">        arr.push(&#96;list.push(&#39;url(&#39;+ require($&#123;g&#125;) +&#39;)&#39;)&#96;)    &#x2F;&#x2F; 拼入图片地址</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    arr.push(&#96;list.push($&#123;JSON.stringify(source.slice(pos))&#125;)&#96;)  &#x2F;&#x2F; 拼入地址到结尾的代码</span><br><span class=\"line\">    arr.push(&#96;module.exports &#x3D; list.join(&#39;&#39;)&#96;)</span><br><span class=\"line\">    console.log(arr.join(&#39;\\r\\n&#39;));</span><br><span class=\"line\">    &#x2F;&#x2F; let list &#x3D; []</span><br><span class=\"line\">    &#x2F;&#x2F; list.push(&quot;body &#123;\\\\n  background: #f938ab;\\\\n  background: &quot;)</span><br><span class=\"line\">    &#x2F;&#x2F; list.push(&#39;url(&#39;+ require(&quot;.&#x2F;photo.png&quot;) +&#39;)&#39;)</span><br><span class=\"line\">    &#x2F;&#x2F; list.push(&quot;;\\\\n&#125;\\\\n&quot;)</span><br><span class=\"line\">    &#x2F;&#x2F; module.exports &#x3D; list.join(&#39;&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">    return arr.join(&#39;\\r\\n&#39;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports &#x3D; loader</span><br></pre></td></tr></table></figure>\n\n<p><code>style-loader2.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let loaderUtils &#x3D; require(&#39;loader-utils&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 将css插入到html头部</span><br><span class=\"line\">function loader(source) &#123;</span><br><span class=\"line\">    let str &#x3D; &#96;</span><br><span class=\"line\">    let style &#x3D; document.createElement(&#39;style&#39;)</span><br><span class=\"line\">    style.innerHTML &#x3D; $&#123;JSON.stringify(source)&#125;</span><br><span class=\"line\">    document.head.appendChild(style)</span><br><span class=\"line\">   &#96;</span><br><span class=\"line\">    return str</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; style-loader写了pitch,有返回后面的跳过，自己的写不会走</span><br><span class=\"line\">loader.pitch &#x3D; function (remainingRequest) &#123;  &#x2F;&#x2F; 剩余的请求</span><br><span class=\"line\">    console.log(loaderUtils.stringifyRequest(this, &#39;!!&#39; + remainingRequest, 99999999))</span><br><span class=\"line\">    &#x2F;&#x2F; 让style-loader 处理 less-loader 和css-loader拼接的结果</span><br><span class=\"line\">    &#x2F;&#x2F; 得到 &#x2F;Users&#x2F;liuhuimin&#x2F;work&#x2F;webpack&#x2F;loader&#x2F;css-loader2.js!&#x2F;Users&#x2F;liuhuimin&#x2F;work&#x2F;webpack&#x2F;loader&#x2F;less-loader2.js!&#x2F;Users&#x2F;liuhuimin&#x2F;work&#x2F;webpack&#x2F;src&#x2F;index.less</span><br><span class=\"line\">    &#x2F;&#x2F; 剩余的请求 less-loader!css-loader!.&#x2F;index.less</span><br><span class=\"line\">    &#x2F;&#x2F; console.log(remainingRequest, 1223);</span><br><span class=\"line\">    &#x2F;&#x2F; require返回的就是css-loader处理好的结果require(&#39;!!css-loader!less-loader!.&#x2F;index.less&#39;)</span><br><span class=\"line\">    let str &#x3D; &#96;</span><br><span class=\"line\">    let style &#x3D; document.createElement(&#39;style&#39;)</span><br><span class=\"line\">    style.innerHTML &#x3D; require($&#123;loaderUtils.stringifyRequest(this, &#39;!!&#39; + remainingRequest)&#125;)</span><br><span class=\"line\">    document.head.appendChild(style)</span><br><span class=\"line\">   &#96;</span><br><span class=\"line\">    &#x2F;&#x2F; stringifyRequest 绝对路径转相对路径</span><br><span class=\"line\">    return str</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports &#x3D; loader</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user: [&#39;style-loader2&#39;, &#39;css-loader2&#39;, &#39;less-loader2&#39;]</span><br><span class=\"line\"></span><br><span class=\"line\">    pitch loader - 有返回值</span><br><span class=\"line\">    </span><br><span class=\"line\">pitch   style-loader2 → css-loader2  less-loader2  </span><br><span class=\"line\">                     ↙               </span><br><span class=\"line\">               有返回值               资源</span><br><span class=\"line\">               ↙                      </span><br><span class=\"line\">normal  style-loader2  css-loader2  less-loader2</span><br></pre></td></tr></table></figure>\n\n<p>在<code>style-loader2</code>中 引用了<code>less-loader</code> <code>css-loader</code> 和<code>less</code>文件</p>\n<h2 id=\"webpack-中的插件\">webpack 中的插件<a href=\"#webpack-中的插件\" title=\"webpack 中的插件\"></a></h2><p><code>yarn add webpack webpack-cil -D</code></p>\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let path &#x3D; require(&#39;path&#39;)</span><br><span class=\"line\">let DonePlugin &#x3D; require(&#39;.&#x2F;plugins&#x2F;DonePlugins&#39;)</span><br><span class=\"line\">let AsyncPlugins &#x3D; require(&#39;.&#x2F;plugins&#x2F;AsyncPlugins&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">    mode: &#39;development&#39;,</span><br><span class=\"line\">    entry: &#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: &#39;build.js&#39;,</span><br><span class=\"line\">        path: path.resolve(__dirname, &#39;dist&#39;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        new DonePlugin(),    &#x2F;&#x2F; 同步</span><br><span class=\"line\">        new AsyncPlugins()   &#x2F;&#x2F; 异步</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>node_modules/webpack/lib</code>中查看<code>Compiler.js</code></p>\n<ol><li>同步<code>plugins/DonePlugins</code></li>\n</ol><p>打包完成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class DonePlugins &#123;</span><br><span class=\"line\">    apply (compiler) &#123;</span><br><span class=\"line\">        console.log(1);</span><br><span class=\"line\">        compiler.hooks.done.tap(&#39;DonePlugin&#39;, (stats) &#x3D;&gt; &#123;</span><br><span class=\"line\">            console.log(&#39;编译完成&#39;);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; DonePlugins</span><br></pre></td></tr></table></figure>\n\n\n<ol><li>异步<code>plugins/AsyncPlugins</code></li>\n</ol><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class AsyncPlugins &#123;</span><br><span class=\"line\">    apply (compiler) &#123;</span><br><span class=\"line\">        console.log(2);</span><br><span class=\"line\">        compiler.hooks.emit.tapAsync(&#39;AsyncPlugin&#39;, (complete, callback) &#x3D;&gt; &#123;</span><br><span class=\"line\">            setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">                console.log(&#39;文件发射出来&#39;);</span><br><span class=\"line\">                callback()</span><br><span class=\"line\">            &#125;, 1000)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        compiler.hooks.emit.tapPromise(&#39;AsyncPlugin&#39;, (complete, callback) &#x3D;&gt; &#123;</span><br><span class=\"line\">            return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">                setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">                    console.log(&#39;文件发射出来 222&#39;);</span><br><span class=\"line\">                    resolve()</span><br><span class=\"line\">                &#125;, 1000)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; AsyncPlugins</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文件列表插件\">文件列表插件<a href=\"#文件列表插件\" title=\"文件列表插件\"></a></h2><p>希望生成一个文件描述打包出来的文件</p>\n<p>在<code>plugins</code>中新建<code>FileListPlugin</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class FileListPlugin &#123;</span><br><span class=\"line\">    constructor (&#123;filename&#125;) &#123;</span><br><span class=\"line\">        this.filename &#x3D; filename</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    apply (compiler) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 文件已经准备好了 要进行发射</span><br><span class=\"line\">        &#x2F;&#x2F; emit</span><br><span class=\"line\">        compiler.hooks.emit.tap(&#39;FileListPlugin&#39;, (compilation) &#x3D;&gt; &#123;</span><br><span class=\"line\">            let assets &#x3D; compilation.assets;</span><br><span class=\"line\">            console.log(assets, 55);</span><br><span class=\"line\">            let content &#x3D; &#96;## 文件名  资源大小\\r\\n&#96;</span><br><span class=\"line\">            &#x2F;&#x2F; [ [bundls.js, &#123;&#125;], [index.html, &#123;&#125;]]</span><br><span class=\"line\">            Object.entries(assets).forEach(([filename, stateObj]) &#x3D;&gt; &#123;</span><br><span class=\"line\">                content +&#x3D; &#96;- $&#123;filename&#125;    $&#123;stateObj.size()&#125;\\r\\n&#96;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            &#x2F;&#x2F; 资源对象</span><br><span class=\"line\">            assets[this.filename] &#x3D; &#123;</span><br><span class=\"line\">                source () &#123;</span><br><span class=\"line\">                    return content;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                size () &#123;</span><br><span class=\"line\">                    return content.length</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; FileListPlugin</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let path &#x3D; require(&#39;path&#39;)</span><br><span class=\"line\">let DonePlugin &#x3D; require(&#39;.&#x2F;plugins&#x2F;DonePlugins&#39;)</span><br><span class=\"line\">let AsyncPlugins &#x3D; require(&#39;.&#x2F;plugins&#x2F;AsyncPlugins&#39;)</span><br><span class=\"line\">let HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;)</span><br><span class=\"line\">let FileListPlugin &#x3D; require(&#39;.&#x2F;plugins&#x2F;FileListPlugin&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">    mode: &#39;development&#39;,</span><br><span class=\"line\">    entry: &#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: &#39;build.js&#39;,</span><br><span class=\"line\">        path: path.resolve(__dirname, &#39;dist&#39;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        new DonePlugin(),</span><br><span class=\"line\">        new AsyncPlugins(),</span><br><span class=\"line\">        new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">            template: &#39;.&#x2F;src&#x2F;index.html&#39;,</span><br><span class=\"line\">            filename: &#39;index.html&#39;</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        new FileListPlugin(&#123;</span><br><span class=\"line\">            filename: &#39;list.md&#39;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>生成<code>list.md</code></p>\n<h2 id=\"内联的webpack插件\">内联的<code>webpack</code>插件<a href=\"#内联的webpack插件\" title=\"内联的webpack插件\"></a></h2><p>新建<code>index.css</code>引入<code>index.js</code></p>\n<p><code>yarn add css-loader mini-css-extract-plugin -D</code></p>\n<p>希望打包后<code>css、js</code>内联在<code>index.html</code>文件中</p>\n<p>创建<code>plugins</code>中<code>InlineSourcePlugins.js</code></p>\n<p><code>yarn add --dev html-webpack-plugin@next</code></p>\n<p><a href=\"https://github.com/jantimon/html-webpack-plugin\" target=\"_blank\">HTML Webpack Plugin</a></p>\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let path &#x3D; require(&#39;path&#39;)</span><br><span class=\"line\">let DonePlugin &#x3D; require(&#39;.&#x2F;plugins&#x2F;DonePlugins&#39;)</span><br><span class=\"line\">let AsyncPlugins &#x3D; require(&#39;.&#x2F;plugins&#x2F;AsyncPlugins&#39;)</span><br><span class=\"line\">let HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;)</span><br><span class=\"line\">let FileListPlugin &#x3D; require(&#39;.&#x2F;plugins&#x2F;FileListPlugin&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">let InlineSourcePlugins &#x3D; require(&#39;.&#x2F;plugins&#x2F;InlineSourcePlugins&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">let MiniCssExtractPlugin &#x3D; require(&#39;mini-css-extract-plugin&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">    mode: &#39;production&#39;,</span><br><span class=\"line\">    entry: &#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: &#39;bundle.js&#39;,</span><br><span class=\"line\">        path: path.resolve(__dirname, &#39;dist&#39;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: &#x2F;\\.css$&#x2F;,</span><br><span class=\"line\">                use: [MiniCssExtractPlugin.loader, &#39;css-loader&#39;]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        &#x2F;&#x2F; new DonePlugin(),</span><br><span class=\"line\">        &#x2F;&#x2F; new AsyncPlugins(),</span><br><span class=\"line\">        new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">            template: &#39;.&#x2F;src&#x2F;index.html&#39;,</span><br><span class=\"line\">            filename: &#39;index.html&#39;</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        new MiniCssExtractPlugin(&#123;</span><br><span class=\"line\">            filename: &#39;index.css&#39;</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        new InlineSourcePlugins(&#123;</span><br><span class=\"line\">            match: &#x2F;\\.(js|css)&#x2F;</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        &#x2F;&#x2F; new FileListPlugin(&#123;</span><br><span class=\"line\">        &#x2F;&#x2F;     filename: &#39;list.md&#39;</span><br><span class=\"line\">        &#x2F;&#x2F; &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>InlineSourcePlugins.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 把外链的标签编程内联的标签</span><br><span class=\"line\">class InlineSourcePlugins &#123;</span><br><span class=\"line\">    constructor(&#123;match&#125;) &#123;</span><br><span class=\"line\">        this.reg &#x3D; match  &#x2F;&#x2F; 正则</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 处理某一个标签</span><br><span class=\"line\">    processTag(tag, compilation) &#123;</span><br><span class=\"line\">        let newTag &#x3D; &#123;&#125;</span><br><span class=\"line\">        let url &#x3D; &#39;&#39;</span><br><span class=\"line\">        if (tag.tagName &#x3D;&#x3D;&#x3D; &#39;link&#39; &amp;&amp; this.reg.test(tag.attributes.href)) &#123;</span><br><span class=\"line\">            newTag &#x3D; &#123;</span><br><span class=\"line\">                tagName: &#39;style&#39;,</span><br><span class=\"line\">                attributes: &#123;type: &#39;text&#x2F;css&#39;&#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            url &#x3D; tag.attributes.href</span><br><span class=\"line\">        &#125; else if (tag.tagName &#x3D;&#x3D;&#x3D; &#39;script&#39; &amp;&amp; this.reg.test(tag.attributes.src)) &#123;</span><br><span class=\"line\">            newTag &#x3D; &#123;</span><br><span class=\"line\">                tagName: &#39;script&#39;,</span><br><span class=\"line\">                attributes: &#123;type: &#39;application&#x2F;javascript&#39;&#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            url &#x3D; tag.attributes.src</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (url) &#123;</span><br><span class=\"line\">            newTag.innerHTML &#x3D; compilation.assets[url].source(); &#x2F;&#x2F; 文件内容放到innerHTML属性中</span><br><span class=\"line\">            delete compilation.assets[url]   &#x2F;&#x2F; 删除原有的资源</span><br><span class=\"line\">            return newTag</span><br><span class=\"line\">            &#x2F;&#x2F; console.log(compilation.assets[url].source());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return tag</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 处理引入标签的数据</span><br><span class=\"line\">    processTags(data, compilation) &#123;</span><br><span class=\"line\">        let headTags &#x3D; []</span><br><span class=\"line\">        let bodyTags &#x3D; []</span><br><span class=\"line\">        data.headTags.forEach(headTag &#x3D;&gt; &#123;</span><br><span class=\"line\">            headTags.push(this.processTag(headTag, compilation))</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        data.bodyTags.forEach(bodyTag &#x3D;&gt; &#123;</span><br><span class=\"line\">            bodyTags.push(this.processTag(bodyTag, compilation))</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        console.log(&#123;...data, headTags, bodyTags&#125;)</span><br><span class=\"line\">        return &#123;...data, headTags, bodyTags&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    apply(compiler) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 通过webpackPlugin来实现  npm搜索  html-webpack-plugin</span><br><span class=\"line\">        compiler.hooks.compilation.tap(&#39;InlineSourcePlugins&#39;, (compilation) &#x3D;&gt; &#123;</span><br><span class=\"line\">            HtmlWebpackPlugin.getHooks(compilation).alterAssetTagGroups.tapAsync(</span><br><span class=\"line\">                &#39;alertPlugin&#39;,</span><br><span class=\"line\">                (data, callback) &#x3D;&gt; &#123;</span><br><span class=\"line\">                    &#x2F;&#x2F; console.log(&#39;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#39;);</span><br><span class=\"line\">                    &#x2F;&#x2F; console.log(data) &#x2F;&#x2F; 插入html标签的数据</span><br><span class=\"line\">                    &#x2F;&#x2F; console.log(&#39;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#39;);</span><br><span class=\"line\">                    data &#x3D; this.processTags(data, compilation)   &#x2F;&#x2F; compilation.assets 资源的链接</span><br><span class=\"line\">                    callback(null, data)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; InlineSourcePlugins</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"打包后自动发布\">打包后自动发布<a href=\"#打包后自动发布\" title=\"打包后自动发布\"></a></h2><p>打包好的文件自动上传致七牛</p>\n<p>需要这几个参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bucket: &#39;&#39;  &#x2F;&#x2F; 七牛的存储空间</span><br><span class=\"line\">domain: &#39;&#39;,</span><br><span class=\"line\">accessKey: &#39;&#39;, &#x2F;&#x2F; 七牛云的两对密匙</span><br><span class=\"line\">secretKey: &#39;&#39; &#x2F;&#x2F; 七牛云的两对密匙</span><br></pre></td></tr></table></figure>\n\n<p>注册七牛，并在对象存储里面,新建存储空间列表<code>test</code>,<code>bucket: &#39;test&#39;</code></p>\n<p>内容管理外链接默认域名 <code>domain: &#39;xxxxxxxx&#39;</code></p>\n<p>右上角个人面板里面个人中心,密钥管理分别对应<code>accessKey</code>和<code>secretKey</code></p>\n<p><a href=\"https://developer.qiniu.com/\" target=\"_blank\">进入开发者中心</a> -&gt; SDK&amp;工具 -&gt; 官方SDK -&gt; Node服务端文档 —&gt; 文件上传</p>\n<p><a href=\"https://developer.qiniu.com/kodo/sdk/1289/nodejs\" target=\"_blank\">node文件上传</a></p>\n<p><code>npm install qiniu</code></p>\n<p><a href=\"https://webpack.docschina.org/api/compiler-hooks\" target=\"_blank\">compiler-hooks</a></p>\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [</span><br><span class=\"line\">        new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">            template: &#39;.&#x2F;src&#x2F;index.html&#39;,</span><br><span class=\"line\">            filename: &#39;index.html&#39;</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        new MiniCssExtractPlugin(&#123;</span><br><span class=\"line\">            filename: &#39;index.css&#39;</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        new UploadPlugin(&#123;</span><br><span class=\"line\">            bucket: &#39;test&#39;,  &#x2F;&#x2F; 七牛的存储空间</span><br><span class=\"line\">            domain: &#39;poyrjyh1b.bkt.clouddn.com&#39;,</span><br><span class=\"line\">            accessKey: &#39;xxxxxx&#39;, &#x2F;&#x2F; 七牛云的两对密匙</span><br><span class=\"line\">            secretKey: &#39;yyyyyy&#39; &#x2F;&#x2F; 七牛云的两对密匙</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ]</span><br></pre></td></tr></table></figure>\n\n<p><code>UploadPlugin.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let qiniu &#x3D; require(&#39;qiniu&#39;)</span><br><span class=\"line\">let path &#x3D; require(&#39;path&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">class UploadPlugin &#123;</span><br><span class=\"line\">    constructor (options &#x3D; &#123;&#125;) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 参考 https:&#x2F;&#x2F;developer.qiniu.com&#x2F;kodo&#x2F;sdk&#x2F;1289&#x2F;nodejs</span><br><span class=\"line\">        let &#123; bucket &#x3D; &#39;&#39;, domain &#x3D; &#39;&#39;, accessKey &#x3D; &#39;&#39;, secretKey &#x3D; &#39;&#39;&#125; &#x3D; options</span><br><span class=\"line\">        let mac &#x3D; new qiniu.auth.digest.Mac(accessKey, secretKey)</span><br><span class=\"line\">        let putPolicy &#x3D; new qiniu.rs.PutPolicy(&#123;</span><br><span class=\"line\">            scope: bucket</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        this.uploadToken &#x3D; putPolicy.uploadToken(mac)</span><br><span class=\"line\">        let config &#x3D; new qiniu.conf.Config();</span><br><span class=\"line\">        this.formUploader &#x3D; new qiniu.form_up.FormUploader(config)</span><br><span class=\"line\">        this.putExtra &#x3D; new qiniu.form_up.PutExtra()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    apply (compiler) &#123;</span><br><span class=\"line\">        compiler.hooks.afterEmit.tapPromise(&#39;UploadPlugin&#39;, (complication) &#x3D;&gt; &#123;</span><br><span class=\"line\">            let assets &#x3D; complication.assets</span><br><span class=\"line\">            let promise &#x3D; []</span><br><span class=\"line\">            Object.keys(assets).forEach(filename &#x3D;&gt; &#123;</span><br><span class=\"line\">                promise.push(this.upload(filename))</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            return Promise.all(promise)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    upload (filename) &#123;</span><br><span class=\"line\">        return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">            let localFile &#x3D; path.resolve(__dirname, &#39;..&#x2F;dist&#39;, filename)</span><br><span class=\"line\">            this.formUploader.putFile(this.uploadToken, filename, localFile, this.putExtra, function(respErr,</span><br><span class=\"line\">                                                                                 respBody, respInfo) &#123;</span><br><span class=\"line\">                if (respErr) &#123;</span><br><span class=\"line\">                    reject(respErr)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                if (respInfo.statusCode &#x3D;&#x3D; 200) &#123;</span><br><span class=\"line\">                    resolve(respBody)</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    console.log(respInfo.statusCode)</span><br><span class=\"line\">                    console.log(respBody)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; UploadPlugin</span><br></pre></td></tr></table></figure>\n","prev":{"title":"hexo","link":"2020/02/29/note/hexo"},"next":{"title":"01.react-basic","link":"2019/12/10/note/01.react-basic"},"plink":"https://www.hansomezao.com/2019/12/10/note/webpack4/","toc":[{"id":"安装前先npm初始化","title":"安装前先npm初始化","index":"1"},{"id":"本地服务","title":"本地服务","index":"2"},{"id":"复制html","title":"复制html","index":"3"},{"id":"处理css","title":"处理css","index":"4"},{"id":"处理less","title":"处理less","index":"5"},{"id":"抽离css文件，通过link引入","title":"抽离css文件，通过link引入","index":"6"},{"id":"压缩css和js","title":"压缩css和js","index":"7"},{"id":"给css加上兼容浏览器的前缀","title":"给css加上兼容浏览器的前缀","index":"8"},{"id":"es6-转-es5","title":"es6 转 es5","index":"9"},{"id":"转es7的语法","title":"转es7的语法","index":"10","children":[{"id":"其他不兼容的高级语法","title":"其他不兼容的高级语法","index":"10.1"}]},{"id":"语法检查-eslint","title":"语法检查 eslint","index":"11"},{"id":"全局变量引入","title":"全局变量引入","index":"12"},{"id":"webpack图片打包","title":"webpack图片打包","index":"13"},{"id":"当图片小于多少，用base64","title":"当图片小于多少，用base64","index":"14"},{"id":"打包文件分类","title":"打包文件分类","index":"15"},{"id":"希望输出的时候，给这些cssimg加上前缀，传到服务器也能访问","title":"希望输出的时候，给这些css\\img加上前缀，传到服务器也能访问","index":"16"},{"id":"如果只希望处理图片","title":"如果只希望处理图片","index":"17"},{"id":"打包多页应用","title":"打包多页应用","index":"18"},{"id":"配置source-map","title":"配置source-map","index":"19"},{"id":"watch-改完代表重新打包实体","title":"watch 改完代表重新打包实体","index":"20"},{"id":"webpack的其他三个小插件","title":"webpack的其他三个小插件","index":"21"},{"id":"webpack-跨域","title":"webpack 跨域","index":"22"},{"id":"1如果后端给的请求没有api-「跨域」","title":"1.如果后端给的请求没有API 「跨域」","index":"23"},{"id":"2前端只想单纯mock数据-「跨域」","title":"2.前端只想单纯mock数据 「跨域」","index":"24"},{"id":"3有服务端，不用代理-服务端启动webpack-「跨域」","title":"3.有服务端，不用代理, 服务端启动webpack 「跨域」","index":"25"},{"id":"webpack解析resolve","title":"webpack解析resolve","index":"26"},{"id":"但是每次引入都很长，如何优雅引入","title":"但是每次引入都很长，如何优雅引入","index":"27"},{"id":"省略扩展名","title":"省略扩展名","index":"28"},{"id":"定义环境变量","title":"定义环境变量","index":"29"},{"id":"区分两个不同的环境","title":"区分两个不同的环境","index":"30"},{"id":"webpack-优化","title":"webpack 优化","index":"31"},{"id":"优化：当某些包是独立的个体没有依赖","title":"优化：当某些包是独立的个体没有依赖","index":"32"},{"id":"优化：规则匹配设置范围","title":"优化：规则匹配设置范围","index":"33"},{"id":"优化：忽略依赖中不必要的语言包","title":"优化：忽略依赖中不必要的语言包","index":"34"},{"id":"动态链接库","title":"动态链接库","index":"35"},{"id":"多线程打包happypack","title":"多线程打包happypack","index":"36"},{"id":"webpack-自带的优化","title":"webpack 自带的优化","index":"37"},{"id":"抽取公共代码","title":"抽取公共代码","index":"38"},{"id":"懒加载延迟加载","title":"懒加载(延迟加载)","index":"39"},{"id":"热更新当页面改变只更新改变的部分，不重新打包","title":"热更新(当页面改变只更新改变的部分，不重新打包)","index":"40"},{"id":"tapable介绍---synchook","title":"tapable介绍 - SyncHook","index":"41"},{"id":"tapable介绍---syncbailhook","title":"tapable介绍 - SyncBailHook","index":"42"},{"id":"tapable介绍---syncwaterfallhook","title":"tapable介绍 - SyncWaterfallHook","index":"43"},{"id":"tapable介绍---syncloophook","title":"tapable介绍 - SyncLoopHook","index":"44"},{"id":"asyncparallelhook-与-asyncparallelbailhook","title":"AsyncParallelHook 与 AsyncParallelBailHook","index":"45"},{"id":"异步串行--asyncserieshook","title":"异步串行 —— AsyncSeriesHook","index":"46"},{"id":"异步串行--asyncserieswaterfallhook","title":"异步串行 —— AsyncSeriesWaterfallHook","index":"47"},{"id":"手写webpack","title":"手写webpack","index":"48"},{"id":"webpack分析及处理","title":"webpack分析及处理","index":"49"},{"id":"创建依赖关系","title":"创建依赖关系","index":"50"},{"id":"ast递归解析","title":"ast递归解析","index":"51"},{"id":"生成打包工具","title":"生成打包工具","index":"52"},{"id":"增加loader","title":"增加loader","index":"53"},{"id":"增加plugins","title":"增加plugins","index":"54"},{"id":"loader","title":"loader","index":"55"},{"id":"配置多个loader","title":"配置多个loader","index":"56"},{"id":"babel-loader实现","title":"babel-loader实现","index":"57"},{"id":"banner-loader实现自创","title":"banner-loader实现(自创)","index":"58"},{"id":"实现file-loader和url-loader","title":"实现file-loader和url-loader","index":"59"},{"id":"less-loader和css-loader","title":"less-loader和css-loader","index":"60"},{"id":"css-loader","title":"css-loader","index":"61"},{"id":"webpack-中的插件","title":"webpack 中的插件","index":"62"},{"id":"文件列表插件","title":"文件列表插件","index":"63"},{"id":"内联的webpack插件","title":"内联的webpack插件","index":"64"},{"id":"打包后自动发布","title":"打包后自动发布","index":"65"}],"reward":true,"copyright":{"custom":"转载请加上署名!"}}