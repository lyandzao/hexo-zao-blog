{"title":"03.Hook","date":"2019-12-10T05:39:02.000Z","date_formatted":{"ll":"2019年12月10日","L":"2019/12/10","MM-DD":"12-10"},"author":"zao","link":"2019/12/10/note/03.Hook","tags":["react"],"categories":["note"],"updated":"2019-12-10T05:39:02.000Z","content":"<h2 id=\"hook\">Hook<a href=\"#hook\" title=\"Hook\"></a></h2><p>Hook 是 <code>React 16.8.0</code> 的新增特性。</p>\n<p>Hook 使你在非 class 的情况下可以使用更多的 React 特性。Hook 不能在 class 组件中使用。</p>\n<h3 id=\"使用规则：\">使用规则：<a href=\"#使用规则：\" title=\"使用规则：\"></a></h3><ul><li>只能在函数最外层调用 Hook。不要在循环、条件判断或者子函数中调用。</li>\n<li>只能在 React 的函数组件中调用 Hook。不要在其他 JavaScript 函数中调用。</li>\n</ul><h3 id=\"state-hook\">State Hook<a href=\"#state-hook\" title=\"State Hook\"></a></h3><blockquote>\n<h5 id=\"usestate\">useState<a href=\"#usestate\" title=\"useState\"></a></h5></blockquote>\n<p>使用useState可以不通过class组件而在函数组件内使用state，可通过多次调用声明多个state</p>\n<ul><li><p>参数：</p>\n<p><em>useState() 方法里面唯一的参数就是初始 state。</em></p>\n</li>\n<li><p>返回值：</p>\n<p><em>当前 state 以及更新 state 的函数。</em></p>\n</li>\n</ul><p><strong><em>函数式更新：</em></strong></p>\n<p>如果新的 state 需要通过使用先前的 state 计算得出，那么可以将函数传递给 setState。该函数将接收先前的 state，并返回一个更新后的值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Counter(&#123;initialCount&#125;) &#123;</span><br><span class=\"line\">  const [count, setCount] &#x3D; useState(initialCount);</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;&gt;</span><br><span class=\"line\">      Count: &#123;count&#125;</span><br><span class=\"line\">      &lt;button onClick&#x3D;&#123;() &#x3D;&gt; setCount(initialCount)&#125;&gt;Reset&lt;&#x2F;button&gt;</span><br><span class=\"line\">      &lt;button onClick&#x3D;&#123;() &#x3D;&gt; setCount(prevCount &#x3D;&gt; prevCount + 1)&#125;&gt;+&lt;&#x2F;button&gt;</span><br><span class=\"line\">      &lt;button onClick&#x3D;&#123;() &#x3D;&gt; setCount(prevCount &#x3D;&gt; prevCount - 1)&#125;&gt;-&lt;&#x2F;button&gt;</span><br><span class=\"line\">    &lt;&#x2F;&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"effect-hook\">Effect Hook<a href=\"#effect-hook\" title=\"Effect Hook\"></a></h3><p>Effect Hook 可以让你在函数组件中执行副作用操作（在 React 组件中执行过数据获取、订阅或者手动修改过 DOM。我们统一把这些操作称为“副作用”，或者简称为“作用”。）</p>\n<blockquote>\n<h5 id=\"useeffect\">useEffect<a href=\"#useeffect\" title=\"useEffect\"></a></h5></blockquote>\n<p>可以把 useEffect Hook 看做 componentDidMount，componentDidUpdate 和 componentWillUnmount 这三个函数的组合。</p>\n<p>useEffect 会在每次渲染后（第一次渲染之后和每次更新之后）都执行，如果你的 effect 返回一个函数，React 将会在组件卸载的时候执行清除操作时调用它。</p>\n<p>useEffect在组件内可多次调用，Hook 允许我们按照代码的用途分离他们，React 将按照 effect 声明的顺序依次调用组件中的每一个 effect。</p>\n<p><strong><em>使用位置：</em></strong></p>\n<p><em>组件内部调用 useEffect。 将 useEffect 放在组件内部让我们可以在 effect 中直接访问 count state 变量（或其他 props）。</em></p>\n<p><strong><em>性能优化：</em></strong></p>\n<p><em>useEffect 的第二个可选参数可以实现如果某些特定值在两次重渲染之间没有发生变化，你可以通知 React 跳过对 effect 的调用。请确保数组中包含了所有外部作用域中会随时间变化并且在 effect 中使用的变量</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 仅在 count 更改时更新</span><br><span class=\"line\">useEffect(() &#x3D;&gt; &#123;</span><br><span class=\"line\">  document.title &#x3D; &#96;You clicked $&#123;count&#125; times&#96;;</span><br><span class=\"line\">&#125;, [count]); </span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 仅在组件初次渲染和组件销毁时执行</span><br><span class=\"line\">useEffect(() &#x3D;&gt; &#123;</span><br><span class=\"line\">  console.log(&#39;1&#39;)</span><br><span class=\"line\">  return () &#x3D;&gt; &#123;</span><br><span class=\"line\">    console.log(&#39;2&#39;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;, [])</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"示例代码详解-usestate-与-useeffect-：\">示例代码详解 <code>useState</code> 与 <code>useEffect</code> ：<a href=\"#示例代码详解-usestate-与-useeffect-：\" title=\"示例代码详解 useState 与 useEffect ：\"></a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 引入 React 中的 useState Hook。它让我们在函数组件中存储内部 state</span><br><span class=\"line\">&#x2F;&#x2F; 引入 useEffect</span><br><span class=\"line\">import React, &#123; useState, useEffect &#125; from &#39;react&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">function Example(props) &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; 声明了一个叫 count 的 state 变量，然后把它设为 0</span><br><span class=\"line\">  const [count, setCount] &#x3D; useState(0);</span><br><span class=\"line\">  &#x2F;&#x2F; 声明第2个state</span><br><span class=\"line\">  const [isOnline, setIsOnline] &#x3D; useState(null);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 无需清除的 effect</span><br><span class=\"line\">  useEffect(() &#x3D;&gt; &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 将 document 的 title 设置为包含了点击次数的消息。</span><br><span class=\"line\">    document.title &#x3D; &#96;You clicked $&#123;count&#125; times&#96;;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#x2F;&#x2F; 需要清除的 effect</span><br><span class=\"line\">  useEffect(() &#x3D;&gt; &#123;</span><br><span class=\"line\">    function handleFn(val) &#123;</span><br><span class=\"line\">      setIsOnline(val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F; 注册监听</span><br><span class=\"line\">    XXAPI.subscribe(handleFn);</span><br><span class=\"line\">    &#x2F;&#x2F; 清除监听</span><br><span class=\"line\">    return () &#x3D;&gt; &#123;</span><br><span class=\"line\">      XXAPI.unsubscribe(handleFn);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &#x2F;&#x2F; 读取 State: 我们可以直接用 count</span><br><span class=\"line\">      &lt;p&gt;You clicked &#123;count&#125; times&lt;&#x2F;p&gt;</span><br><span class=\"line\">      &#x2F;&#x2F; 更新 State: 可以通过调用 setCount 来更新当前的 count</span><br><span class=\"line\">      &lt;button onClick&#x3D;&#123;() &#x3D;&gt; setCount(count + 1)&#125;&gt;</span><br><span class=\"line\">        Click me</span><br><span class=\"line\">      &lt;&#x2F;button&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"uselayouteffect\">useLayoutEffect<a href=\"#uselayouteffect\" title=\"useLayoutEffect\"></a></h3><p>其函数签名与 useEffect 相同，但它会在所有的 DOM 变更之后同步调用 effect。可以使用它来读取 DOM 布局并同步触发重渲染。在浏览器执行绘制之前，useLayoutEffect 内部的更新计划将被同步刷新。尽可能使用标准的 useEffect 以避免阻塞视觉更新。</p>\n<p>与 componentDidMount 或 componentDidUpdate 不同，使用 useEffect 调度的 effect 不会阻塞浏览器更新屏幕，这让你的应用看起来响应更快。大多数情况下，effect 不需要同步地执行。在个别情况下（例如测量布局），这时需要用到useLayoutEffect</p>\n<h3 id=\"useref\">useRef<a href=\"#useref\" title=\"useRef\"></a></h3><p>useRef 返回一个可变的 ref 对象，其 .current 属性被初始化为传入的参数（initialValue）。返回的 ref 对象在组件的整个生命周期内保持不变。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function TextInputWithFocusButton() &#123;</span><br><span class=\"line\">  const inputEl &#x3D; useRef(null);</span><br><span class=\"line\">  const onButtonClick &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; &#96;current&#96; 指向已挂载到 DOM 上的文本输入元素</span><br><span class=\"line\">    inputEl.current.focus();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;&gt;</span><br><span class=\"line\">      &lt;input ref&#x3D;&#123;inputEl&#125; type&#x3D;&quot;text&quot; &#x2F;&gt;</span><br><span class=\"line\">      &lt;button onClick&#x3D;&#123;onButtonClick&#125;&gt;Focus the input&lt;&#x2F;button&gt;</span><br><span class=\"line\">    &lt;&#x2F;&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>useRef() 比 ref 属性更有用。它可以很方便地保存任何可变值，其类似于在 class 中使用实例字段的方式。当 ref 对象内容发生变化时，useRef 并不会通知你。变更 .current 属性不会引发组件重新渲染。</p>\n<h3 id=\"自定义hook\">自定义Hook<a href=\"#自定义hook\" title=\"自定义Hook\"></a></h3><p>自定义Hook 是一个函数，其名称以 <code>use</code> 开头(必须以 <code>use</code> 开头)，函数内部可以调用其他的 Hook。自定义Hook用于提取多组件之间的共享逻辑，可用于替代 <code>render props</code> 和 <code>HOC</code>。</p>\n<p>在需要共享逻辑的组件内调用很简单，只需要引入定义好的自定义Hook，并传入自己想要的参数拿到你想要的返回值作用于当前组件。</p>\n<h5 id=\"如下例：\">如下例：<a href=\"#如下例：\" title=\"如下例：\"></a></h5><ol><li><p>提取自定义Hook：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; useState, useEffect &#125; from &#39;react&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">function useFriendStatus(friendID) &#123;</span><br><span class=\"line\">  const [isOnline, setIsOnline] &#x3D; useState(null);</span><br><span class=\"line\"></span><br><span class=\"line\">  useEffect(() &#x3D;&gt; &#123;</span><br><span class=\"line\">    function handleStatusChange(status) &#123;</span><br><span class=\"line\">      setIsOnline(status.isOnline);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    XXXAPI.subscribeToFriendStatus(friendID, handleStatusChange);</span><br><span class=\"line\">    return () &#x3D;&gt; &#123;</span><br><span class=\"line\">      XXXAPI.unsubscribeFromFriendStatus(friendID, handleStatusChange);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  return isOnline;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用自定义Hook：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function FriendListItem(props) &#123;</span><br><span class=\"line\">  const isOnline &#x3D; useFriendStatus(props.friend.id);</span><br><span class=\"line\"></span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;li style&#x3D;&#123;&#123; color: isOnline ? &#39;green&#39; : &#39;black&#39; &#125;&#125;&gt;</span><br><span class=\"line\">      &#123;props.friend.name&#125;</span><br><span class=\"line\">    &lt;&#x2F;li&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol><h3 id=\"其它hook\">其它Hook<a href=\"#其它hook\" title=\"其它Hook\"></a></h3><blockquote>\n<h5 id=\"usereducer\">useReducer<a href=\"#usereducer\" title=\"useReducer\"></a></h5></blockquote>\n<p><code>useReducer</code>是<code>useState</code>的替代方案，它接收一个形如 (state, action) =&gt; newState 的 reducer，并返回当前的 state 以及与其配套的 dispatch 方法。</p>\n<p>在某些场景下，useReducer 会比 useState 更适用，例如 state 逻辑较复杂且包含多个子值，或者下一个 state 依赖于之前的 state 等。并且，使用 useReducer 还能给那些会触发深更新的组件做性能优化，因为你可以向子组件传递 dispatch 而不是回调函数 。</p>\n<p>使用示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const initialState &#x3D; &#123;count: 0&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">function reducer(state, action) &#123;</span><br><span class=\"line\">  switch (action.type) &#123;</span><br><span class=\"line\">    case &#39;increment&#39;:</span><br><span class=\"line\">      return &#123;count: state.count + 1&#125;;</span><br><span class=\"line\">    case &#39;decrement&#39;:</span><br><span class=\"line\">      return &#123;count: state.count - 1&#125;;</span><br><span class=\"line\">    default:</span><br><span class=\"line\">      throw new Error();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function Counter() &#123;</span><br><span class=\"line\">  const [state, dispatch] &#x3D; useReducer(reducer, initialState);</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;&gt;</span><br><span class=\"line\">      Count: &#123;state.count&#125;</span><br><span class=\"line\">      &lt;button onClick&#x3D;&#123;() &#x3D;&gt; dispatch(&#123;type: &#39;increment&#39;&#125;)&#125;&gt;+&lt;&#x2F;button&gt;</span><br><span class=\"line\">      &lt;button onClick&#x3D;&#123;() &#x3D;&gt; dispatch(&#123;type: &#39;decrement&#39;&#125;)&#125;&gt;-&lt;&#x2F;button&gt;</span><br><span class=\"line\">    &lt;&#x2F;&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过阅读React源码 <code>ReactFiberHooks.js</code> 发现 <code>useState</code> 就是对 <code>useReducer</code> 的封装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; useState</span><br><span class=\"line\">export function useState&lt;S&gt;(</span><br><span class=\"line\">  initialState: (() &#x3D;&gt; S) | S,</span><br><span class=\"line\">): [S, Dispatch&lt;BasicStateAction&lt;S&gt;&gt;] &#123;</span><br><span class=\"line\">  return useReducer(</span><br><span class=\"line\">    basicStateReducer,</span><br><span class=\"line\">    &#x2F;&#x2F; useReducer has a special case to support lazy useState initializers</span><br><span class=\"line\">    (initialState: any),</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; useReducer</span><br><span class=\"line\">export function useReducer&lt;S, A&gt;(</span><br><span class=\"line\">  reducer: (S, A) &#x3D;&gt; S,</span><br><span class=\"line\">  initialState: S,</span><br><span class=\"line\">  initialAction: A | void | null,</span><br><span class=\"line\">): [S, Dispatch&lt;A&gt;] &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; ...</span><br><span class=\"line\">  &#x2F;&#x2F; ...</span><br><span class=\"line\">  &#x2F;&#x2F; ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#96;&#96;&#96; </span><br><span class=\"line\">&gt; ##### useMemo 与 useCallback</span><br><span class=\"line\"></span><br><span class=\"line\">可用于给子组件传递参数及回调函数时的优化项</span><br></pre></td></tr></table></figure>\n<p>import React, {useState, useMemo, useCallback} from ‘react’</p>\n<p>function fnComponent() {<br>  const [count, setCount] = useState(0)<br>  const [name, setName] = useState(‘name’)</p>\n<p>  // 不会在每次fnComponent有更新都重新渲染Child<br>  const config = useMemo(()=&gt;{<br>    text: <code>count is ${count}</code><br>  }, [count])<br>  const handleButtonClk = useCallback(()=&gt;{ setCount(c=&gt;c+1) }, [])</p>\n<p>  return (<br>    <div><br>      <div className='countStyle'>{name}</div><br>      <div className='countStyle'>{count}</div><br>      &lt;input value={name} onChange={(e)=&gt;{setName(e.target.value)}} /&gt;<br>      <Child config={config} handleButtonClk={handleButtonClk} /><br>    </div><br>  )<br>}</p>\n<p>function Child({config, handleButtonClk}) {<br>  console.log(‘child render’)<br>  return (<br>    <button\n      onClick={handleButtonClk}\n    ><br>      {config.text}<br>    </button><br>  )<br>}<br>```</p>\n","prev":{"title":"02.react-advance","link":"2019/12/10/note/02.react-advance"},"next":{"title":"05.redux-saga","link":"2019/12/10/note/05.redux-saga"},"plink":"https://www.hansomezao.com/2019/12/10/note/03.Hook/","toc":[{"id":"hook","title":"Hook","index":"1","children":[{"id":"使用规则：","title":"使用规则：","index":"1.1"},{"id":"state-hook","title":"State Hook","index":"1.2"},{"id":"effect-hook","title":"Effect Hook","index":"1.3"},{"id":"示例代码详解-usestate-与-useeffect-：","title":"示例代码详解 useState 与 useEffect ：","index":"1.4"},{"id":"uselayouteffect","title":"useLayoutEffect","index":"1.5"},{"id":"useref","title":"useRef","index":"1.6"},{"id":"自定义hook","title":"自定义Hook","index":"1.7"},{"id":"其它hook","title":"其它Hook","index":"1.8"}]}]}